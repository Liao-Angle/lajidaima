using System;
using System.Collections;
using System.Text;
using System.Web.UI;
using com.dsc.kernal.factory;
using com.dsc.kernal.databean;
using com.dsc.kernal.agent;
using com.dsc.kernal.utility;
using com.dsc.flow.data;
using com.dsc.flow.server;
using System.Data;
using System.Xml;
using WebServerProject;
using WebServerProject.auth;
using WebServerProject.flow.SMWP;
using System.Collections.Specialized;

namespace BaseWebUI
{
    /// <summary>
    /// 需撰寫:
    /// createToolBar
    /// cloneObject-2009/07/22補上
    /// isNecessary
    /// </summary>
    public class GeneralWebForm : GeneralWebPage
    {
        #region 私有變數
        private ArrayList errMsg = new ArrayList();
        private string agentXML = ""; //2009/07/22 國昌:cloneObject使用
        #endregion

        #region 按鈕宣告
        protected DSCWebControl.GlassButton AgreeButton;
        protected DSCWebControl.GlassButton DisagreeButton;
        protected DSCWebControl.GlassButton SaveButton;
        protected DSCWebControl.GlassButton DeleteButton;
        protected DSCWebControl.GlassButton SubmitButton;
        protected DSCWebControl.GlassButton SignButton;
        protected DSCWebControl.GlassButton AttachButton;
        protected DSCWebControl.GlassButton SaveDraftButton;
        protected DSCWebControl.GlassButton ReadDraftButton;
        protected DSCWebControl.GlassButton ViewButton;
        protected DSCWebControl.GlassButton RefreshButton;
        protected DSCWebControl.GlassButton ViewFlowButton;
        protected DSCWebControl.GlassButton SetFlowButton;
        protected DSCWebControl.GlassButton AddSignButton;
        protected DSCWebControl.GlassButton WithDrawButton;
        protected DSCWebControl.GlassButton RejectButton;
        protected DSCWebControl.GlassButton ForwardButton;
        protected DSCWebControl.GlassButton DispatchFlowButton;
        protected DSCWebControl.GlassButton CopyFormButton;
        protected DSCWebControl.GlassButton HistoryButton;
        protected DSCWebControl.GlassButton PrintCertificateButton;
        protected DSCWebControl.GlassButton BackListButton;
        protected DSCWebControl.GlassButton RedirectButton;
        protected DSCWebControl.GlassButton ReGetButton;
        protected DSCWebControl.GlassButton UserDefineButton1;
        protected DSCWebControl.GlassButton UserDefineButton2;
        protected DSCWebControl.GlassButton UserDefineButton3;
        protected DSCWebControl.GlassButton UserDefineButton4;
        protected DSCWebControl.GlassButton UserDefineButton5;
        protected DSCWebControl.GlassButton RollbackButton;
        protected DSCWebControl.OpenWin DraftOpenWin;
        //protected LiteralControl FormHeadArea; //單頭資訊區
        //protected LiteralControl FormHeadArea2;
        //protected LiteralControl FormHeadArea3;
        protected LiteralControl SignBarSpace; //SP8相容模式所需擠下的空間
        protected LiteralControl FormHeadGroupSpace;
        protected DSCWebControl.DSCGroupBox FormHeadGroup; //單頭資訊區

        protected LiteralControl AttachArea; //附件區
        protected LiteralControl AttachArea2;
        protected DSCWebControl.FileUpload attachFile;
        protected LiteralControl HistoryArea; //歷史資料列表區
        protected LiteralControl HistoryArea2;
        protected LiteralControl HistoryArea3;
        protected LiteralControl RelationArea; //相關表單列表區
        protected LiteralControl RelationArea2;
        protected LiteralControl RelationArea3;

        protected LiteralControl BarCodeArea;
        protected LiteralControl BarCodeArea2;

        protected LiteralControl FloatingToolBar;
        protected LiteralControl FloatingToolBar2;
        protected LiteralControl FloatingSignBar;
        protected LiteralControl FloatingSignBar2;
        protected LiteralControl FloatingSignSep1;
        protected LiteralControl FloatingSignSep2;
        protected LiteralControl FloatingSignSep3;

        protected DSCWebControl.DSCLabel SignLabel;
        protected DSCWebControl.SingleDropDownList SignResultField;
        protected DSCWebControl.SingleField SignOpinionField;
        protected DSCWebControl.GlassButton SignPhraseButton;
        protected DSCWebControl.OpenWin SignPhraseOpenWin;

        #endregion

        #region UIStatus可使用狀態
        /// <summary>
        /// 可發起流程的新增資料狀態
        /// </summary>
        public static string InitNew = "0";

        /// <summary>
        /// 可發起流程的檢視資料狀態(包含可修改以及刪除)
        /// </summary>
        public static string InitModify = "1";

        /// <summary>
        /// 可發起流程的刪除狀態
        /// </summary>
        public static string InitDelete = "2";

        /// <summary>
        /// 全檢視狀態
        /// </summary>
        public static string FormReadOnly = "3";

        /// <summary>
        /// 流程處理中的新增資料狀態
        /// </summary>
        public static string ProcessNew = "4";

        /// <summary>
        /// 流程處理中的檢視資料狀態(包含可修改以及刪除)
        /// </summary>
        public static string ProcessModify = "5";

        /// <summary>
        /// 流程處理中的刪除狀態
        /// </summary>
        public static string ProcessDelete = "6";

        /// <summary>
        /// 一般通用新增資料狀態
        /// </summary>
        public static string GeneralNew = "7";

        /// <summary>
        /// 一般資料檢視狀態(包含可修改以及刪除)
        /// </summary>
        public static string GeneralModify = "8";

        /// <summary>
        /// 一般資料刪除狀態
        /// </summary>
        public static string GeneralDelete = "9";

        /// <summary>
        /// 由已轉派資料夾進入狀態, 僅允許回清單, 列印憑證, 以及取回
        /// </summary>
        public static string FromRedirect = "10";

        /// <summary>
        /// 通知狀態
        /// </summary>
        public static string FormNotify = "11";

        /// <summary>
        /// 由已簽核資料夾進入狀態, 僅允許回清單, 列印憑證, 以及撤簽
        /// </summary>
        public static string FormRollback = "12";
        #endregion

        #region UIType可使用狀態
        /// <summary>
        /// 指明資料處理為流程方式
        /// </summary>
        public static string Process = "Process";

        /// <summary>
        /// 指明資料處理為一般方式
        /// </summary>
        public static string General = "General";
        #endregion

        #region 公用變數
        /// <summary>
        /// 是否為被代理之流程
        /// </summary>
        protected bool isSubstituteSign
        {
            get
            {
                //檢查是否為被代理之流程
                string pageUID = intTryParse(Page.Request.QueryString["ParentPageUID"]);
                StringCollection subsWorkOIDList = (StringCollection)getSession(pageUID, "SUBSLIST");
                //正常簽核狀態下檢查
                if (subsWorkOIDList != null && subsWorkOIDList.Contains((string)getSession("WorkItemOID")))
                {
                    return true;
                }
                else if (Request.QueryString["isSubstituteSign"]!=null) //針對帶最新一筆待處理項目 識別為待辦項目
                {
                    return true;
                }
                else
                {
                    //群簽時的狀態檢查, 國昌2010/05/10 || 改為 &&
                    if ((Page.Request.QueryString["GroupSign"] != null) && (Page.Request.QueryString["IsSubs"] != null))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
        }
        #endregion

        #region override方法, 事件起點

        protected override void OnInit(EventArgs e)
        {
            checkPoint("GeneralWebForm OnInit", modeFormLoad);
            if ((Request.QueryString["GroupSign"] != null) || (Request.QueryString["AfterApprove"] != null) || (Request.QueryString["GetSignOpinion"] != null))
            {
                string sClass = GlobalProperty.getProperty("global", "ConnectStringClass");
                com.dsc.kernal.db.ConnectStringFactory cs = new com.dsc.kernal.db.ConnectStringFactory();
                com.dsc.kernal.db.AbstractConnectString acs = cs.getConnectStringObject(sClass.Split(new char[] { '.' })[0], sClass);
                acs.getConnectionString();

                //讀取debugPage
                IOFactory factory = new IOFactory();
                AbstractEngine engine = factory.getEngine(acs.engineType, acs.connectString);
                string sql = "select SMVPAAA009, SMVPAAA014, SMVPAAA021, SMVPAAA022 from SMVPAAA";
                DataSet ds = engine.getDataSet(sql, "TEMP");
                if (ds.Tables[0].Rows[0][0].ToString().Equals("Y"))
                {
                    Session["DebugPage"] = true;
                }
                else
                {
                    Session["DebugPage"] = false;
                }
                Session["MaxRecordCount"] = ds.Tables[0].Rows[0][1];
                Session["FlowProcessCount"] = ds.Tables[0].Rows[0][2]; //流程引擎呼叫處理次數
                Session["FlowProcessWaiting"] = ds.Tables[0].Rows[0][3]; //流程引擎呼叫錯誤時等待毫秒

                sql = "select OID, userName, localeString from Users where id='" + com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(Request.QueryString["EFLogonID"]) + "'";
                ds = engine.getDataSet(sql, "TEMP");
              
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Session["UserGUID"] = ds.Tables[0].Rows[0][0].ToString();
                    Session["UserName"] = ds.Tables[0].Rows[0][1].ToString();
                    Session["Locale"] = ds.Tables[0].Rows[0][2].ToString();
                    Session["IsSysAdmin"] = false;
                }
                else
                {
                    Session["UserGUID"] = "";
                }

                WebServerProject.SysParam sp = new WebServerProject.SysParam(engine);
                Session["FlowAdapter"] = sp.getParam("FlowAdapter");
                Session["NaNaWebService"] = sp.getParam("NaNaWebService");
                Session["DotJWebService"] = sp.getParam("DotJWebService");
                Session["FlowAccount"] = sp.getParam("FlowAccount");
                Session["FlowPassword"] = sp.getParam("FlowPassword");

                engine.close();

                Session["connectString"] = acs.connectString;
                Session["engineType"] = acs.engineType;
                Session["dbIndex"] = "0";
                Session["layoutType"] = "Enterprise";
                Session["UserID"] = com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(Request.QueryString["EFLogonID"]);
            }
            //國昌20091217:因為底層先判斷Session["UserID"]導致afterApprove等功能一定會得到NoSession的錯誤
            base.OnInit(e);
            if (Request.QueryString["CertificateMode"] != null)
            {
                setProtectedLevel(15);

                //替換憑證模式的ＣＳＳ
                string sClass = GlobalProperty.getProperty("global", "ConnectStringClass");
                com.dsc.kernal.db.ConnectStringFactory cs = new com.dsc.kernal.db.ConnectStringFactory();
                com.dsc.kernal.db.AbstractConnectString acs = cs.getConnectStringObject(sClass.Split(new char[] { '.' })[0], sClass);
                acs.getConnectionString();

                //讀取debugPage
                IOFactory factory = new IOFactory();
                AbstractEngine engine = factory.getEngine(acs.engineType, acs.connectString);

                SysParam sp = new SysParam(engine);
                string css = sp.getParam("CertificateCSS");

                engine.close();

                for (int i = 0; i < Page.Header.Controls.Count; i++)
                {
                    if (Page.Header.Controls[i].GetType().Name.Equals("HtmlLink"))
                    {
                        System.Web.UI.HtmlControls.HtmlLink hl = (System.Web.UI.HtmlControls.HtmlLink)Page.Header.Controls[i];
                        hl.Href = Page.ResolveClientUrl("~/" + css);
                    }
                }

            }
            checkPoint("GeneralWebForm OnInit Complete", modeFormLoad);
        }
        /// <summary>
        /// 複寫建立動態畫面元件方法. 在此方法中建立工具列
        /// 僅能設定ID, 並且必須設定PageUniqueID. 事件也必須在此方法中設定
        /// SaveButton = new DSCWebControl.GlassButton();
        /// SaveButton.PageUniqueID = pUID;
        /// SaveButton.ID = "SaveButton";
        /// SaveButton.Click += new DSCWebControl.GlassButton.ClickEvent(SaveButton_Click);
        /// this.Controls.AddAt(0, SaveButton);
        /// </summary>
        protected override void createCustomControl(string pUID)
        {
            createToolBar(pUID);
            base.createCustomControl(pUID);
        }

        /// <summary>
        /// 設定動態畫面元件的預設屬性. 此處不可以設定各元件的Server動態變更屬性
        /// </summary>
        protected override void initCustomControl()
        {
            initToolBar();
            base.initCustomControl();
        }

        /// <summary>
        /// 複寫OnLoad方法. 在此方法中啟動資料顯示程序
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            checkPoint("GeneralWebForm OnLoad Start", modeFormLoad);
            ////Jack
            //writeLog(new Exception("OnLoad_Star/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
            //設定debugPage
            try
            {
                debugPage = (bool)Session["DebugPage"];
            }
            catch
            {
                debugPage = true;
            }
            //頁面參數初始化
            init();
            setSession("ProcessPageID", ProcessPageID);//forLog which Application
            //發起流程相關訊息變數
            messageInit();
            //決定系統參數內容
            string tempUIStatus = fixNull(Request.QueryString["UIStatus"]);
            if ((tempUIStatus.Equals(ProcessDelete)) || (tempUIStatus.Equals(ProcessModify)) || (tempUIStatus.Equals(ProcessNew)))
            {
                //若為修改, 則讀取系統參數值決定是否改變模式
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                AbstractEngine engine = null;

                engine = factory.getEngine(engineType, connectString);

                string sql = "select SMVPAAA023 from SMVPAAA";
                DataSet ds = engine.getDataSet(sql, "TEMP");
                string simMode = "0";
                if (ds.Tables[0].Rows.Count > 0)
                {
                    simMode = ds.Tables[0].Rows[0][0].ToString();
                }
                engine.close();

                //simulate EasyFlow mode
                Session["SIMMODE"] = simMode;
            }
            else
            {
                Session["SIMMODE"] = "0";
            }

            checkPoint("BasePage OnLoad  Start", modeFormLoad);
            base.OnLoad(e);  
            if (!IsPostBack)
            {
                //新頁面讀取或是事件進入
                checkPoint("OnLoad IsProcessEvent Start", modeFormLoad);
                if (!IsProcessEvent)
                {
                    checkPoint("OnLoad IsProcessEvent complete", modeFormLoad);
                    try
                    {                        
                        //儲存參數
                        checkPoint("OnLoad Parameter Start", modeFormLoad);
                        saveParameter();
                 
                        //改變參數內容
                        changeParameter();

                        //註冊公用ClietScript
                        registerScript();
                        checkPoint("OnLoad Parameter complete", modeFormLoad);
                        //取得簽核資訊
                        if (Request.QueryString["GetSignOpinion"] != null)
                        {
                            return;
                        }

                        //建立資料連線物件
                        string connectString = (string)Session["connectString"];
                        string engineType = (string)Session["engineType"];
                        checkPoint("Get Engine Start", modeFormLoad);
                        IOFactory factory = new IOFactory();
                        AbstractEngine engine = null;
                        if (Request.QueryString["AfterApprove"] != null)
                        {
                            engine = (AbstractEngine)com.dsc.kernal.global.GlobalCache.getValue((string)getSession("FlowGUID"));
                            if (engine == null)
                            {
                                engine = factory.getEngine(engineType, connectString);
                            }
                        }
                        else
                        {
                            engine = factory.getEngine(engineType, connectString);
                        }
                        
                        checkPoint("Get ProgramName Start", modeFormLoad);
                        //根據PageProcessID取得程式名稱
                        string sN = "select SMWAAAA003 from SMWAAAA where SMWAAAA002='" + ProcessPageID + "'";
                        DataSet dN = engine.getDataSet(sN, "TEMP");
                        if (dN.Tables[0].Rows.Count > 0)
                        {
                            setSession("ProgramName", dN.Tables[0].Rows[0][0].ToString());
                        }
                        else
                        {
                            //setSession("ProgramName", "未知的程式名稱");
                            setSession("ProgramName", com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError2", "未知的程式名稱"));
                        }
                        checkPoint("Get ProgramName Complete", modeFormLoad);
                        string UIStatus = (string)getSession("UIStatus");

                        //將資料由資料庫讀取到資料物件   
                        checkPoint("OnLoad readDB Start", modeFormLoad);
                        DataObject currentObject = readDB(engine, (string)getSession("ObjectGUID"), (string)getSession("UIStatus"));
                        checkPoint("OnLoad readDB Complete", modeFormLoad);
                        //複製表單進入
                        if (Request.QueryString["IsCopyForm"] != null)
                        {
                            string xmlData = (string)Session["CopyFormDraft"];
                            currentObject.loadXML3(xmlData);

                            //國昌20100622-mantis0017634
                            modifyDraftGUID(currentObject);
                            //currentObject.setData(getObjectGUIDField(), "");
                        }

                        //初始化畫面
                        //2009/07/13 國昌:解決維護作業無流程模式會出現稽核模組錯誤(因為AfterApprove)
                        if (Request.QueryString["AfterApprove"] == null)
                        {
                            checkPoint("OnLoad initializeUI", modeFormLoad);
                            initializeUI(engine);
                            checkPoint("OnLoad initializeUI Complete", modeFormLoad);
                        }

                        //初始化附件設定
                        SysParam sp = new SysParam(engine);
                        string fileAdapter = sp.getParam("FileAdapter");
                        attachFile.engine = engine;
                        attachFile.FileAdapter = fileAdapter;
                        attachFile.tempFolder = Server.MapPath("~/tempFolder/");

                        //如果這裡有workItemOID, 則要將讀取次數加1
                        if (!((string)getSession("WorkItemOID")).Equals(""))
                        {
                            //國昌2009/08/17 群簽時無法建立Session["FlowProcessCount"] & Session["FlowProcessWaiting"]
                            //因此避開群簽(群簽時呼叫讀取次數加1也無意義)
                            if (Request.QueryString["GroupSign"] == null)
                            {
                                checkPoint("OnLoad increaseViewTimesOfWorkAssignment", modeFormLoad);
                                //increaseViewTimesOfWorkAssignment(engine, (string)Session["UserID"], (string)getSession("WorkItemOID"));
                                System.Threading.Thread htIncreaseViewTimesOfWorkAssignment = new System.Threading.Thread(this.increateViewTimesOfWorkAssignmentThreadProcess);
                                htIncreaseViewTimesOfWorkAssignment.Start();
                                checkPoint("OnLoad increaseViewTimesOfWorkAssignment Complete", modeFormLoad);
                            }
                        }

                        DataObject newObject = null;

                        //
                        if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormRollback)))
                        {
                            bool hasInitData = false;
                            string ss = "select SMWYAAA021 from SMWYAAA where SMWYAAA005='" + (string)getSession("FlowGUID") + "'";
                            checkPoint("select SMWYAAA021 from SMWYAAA ", modeFormLoad);
                            DataSet his = engine.getDataSet(ss, "TEMP");
                            checkPoint("select SMWYAAA021 from SMWYAAA Complete", modeFormLoad);
                            if (his.Tables[0].Rows.Count > 0)
                            {
                                if (!his.Tables[0].Rows[0][0].ToString().Equals(""))
                                {
                                    string xmls = his.Tables[0].Rows[0][0].ToString();
                                    currentObject.loadXML(xmls);
                                    checkPoint("currentObject.loadXML Complete ", modeFormLoad);
                                    hasInitData = true;
                                }
                            }
                            //2009/07/13 國昌: 補上歷史資料無法讀取正確問題
                            //2011/07/08 國昌：補上其他原本情境無法讀取正確問題
                            if ((!hasInitData) &&  (currentObject.getData(getObjectGUIDField()).Equals("")))
                            {
                                string xmls = "";
                                ss = "select OBJECTDATA from DATAHISTORY where GUID='" + (string)getSession("ObjectGUID") + "'";
                                checkPoint("OnLoad load OBJECTDATA", modeFormLoad);
                                his = engine.getDataSet(ss, "TEMP");
                                checkPoint("OnLoad load OBJECTDATA Complete", modeFormLoad);
                                if (his.Tables[0].Rows.Count > 0)
                                {
                                    xmls = his.Tables[0].Rows[0][0].ToString();
                                }
                                else
                                {
                                    ss = "select OBJECTDATA from DATAHISTORY where REFGUID='" + (string)getSession("ObjectGUID") + "'";
                                    his = engine.getDataSet(ss, "TEMP");
                                    if (his.Tables[0].Rows.Count > 0)
                                    {
                                        xmls = his.Tables[0].Rows[0][0].ToString();
                                    }
                                    else
                                    {
                                        throw new Exception("DATAHISTORY Data Error");
                                    }
                                }
                                checkPoint("OnLoad Object Load XML", modeFormLoad);
                                currentObject.loadXML(xmls);
                                checkPoint("OnLoad Object Load Complete", modeFormLoad);
                            }
                        }
                        /*
                        if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormRollback)))
                        {
                            if (currentObject.getData(getObjectGUIDField()).Equals(""))
                            {
                                //string ss = "select OBJECTDATA from DATAHISTORY where GUID='" + (string)getSession("ObjectGUID") + "'";
                                //string ss = "select OBJECTDATA from DATAHISTORY where REFGUID='" + (string)getSession("ObjectGUID") + "'";
                                string ss = "select SMWYAAA021 from SMWYAAA where SMWYAAA005='" + (string)getSession("FlowGUID") + "'";
                                DataSet his = engine.getDataSet(ss, "TEMP");
                                string xmls = his.Tables[0].Rows[0][0].ToString();
                                currentObject.loadXML(xmls);
                            }
                        }
                        */
                        checkPoint("OnLoad InitNew", modeFormLoad);
                        if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(GeneralNew)))
                        {
                            //這裡要處理, 如果是ProcessNew, 要檢查是不是因為重辦或者是流程流回來
                            string ss = "select CURGUID from FORMRELATION where FLOWGUID='" + (string)getSession("FlowGUID") + "' and CURPAGETYPE in (select SMWAAAA002 from SMWAAAA where SMWAAAA001='" + (string)getSession("SMWDAAA005") + "')";
                            //writeLog(new Exception(ss));
                            DataSet his = engine.getDataSet(ss, "TEMP");
                            if (his.Tables[0].Rows.Count == 0)
                            {
                                //新增
                                setSession("oriObject", null);
                                setSession("currentObject", currentObject);
                                attachFile.readFile("");
                                setSession("ProcessNewRepeat", false);
                            }
                            else
                            {
                                //已經有資料, 代表為重辦或是流程流回來
                                currentObject = readDB(engine, his.Tables[0].Rows[0][0].ToString(), ProcessModify);
                                setSession("oriObject", null);
                                setSession("currentObject", currentObject);
                                attachFile.readFile(his.Tables[0].Rows[0][0].ToString());
                                setSession("ProcessNewRepeat", true);

                                //重要
                                UIStatus = ProcessModify;
                                setSession("UIStatus", ProcessModify);
                            }
                        }
                        else if ((UIStatus.Equals(ProcessModify)) || (UIStatus.Equals(ProcessDelete)) || (UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FormRollback)))
                        {

                            //流程中修改資料
                            setSession("oriObject", null);
                            setSession("currentObject", currentObject);
                            attachFile.readFile(currentObject.getData(getObjectGUIDField()));
                        }
                        else
                        {
                            //修改刪除
                            setSession("oriObject", currentObject);
                            //newObject = readDB(engine, "#####", (string)getSession("UIStatus"));
                            //2009/07/22 國昌:cloneObject方法改由先讀取兩次，直接改PK以及FK即可
                            newObject = readDB(engine, currentObject.getData(getObjectGUIDField()), (string)getSession("UIStatus"));
                            XMLProcessor xp = new XMLProcessor(agentXML, 1);
                            cloneObject(newObject, xp);
                            setSession("currentObject", newObject);
                            attachFile.readFile(currentObject.getData(getObjectGUIDField()));
                        }
                        checkPoint("OnLoad InitNew Complete", modeFormLoad);
                        //簽核狀況
                        setSession("SIMMODE", Session["SIMMODE"]);

                        //設定附件閃爍
                        if (attachFile.dataSource.getAvailableDataObjectCount() > 0)
                        {
                            AttachButton.ImageUrl = "~/Images/onAttach.gif";
                        }

                        //如果群簽, 進行群簽程序
                        if (Request.QueryString["GroupSign"] != null)
                        {
                            //writeLog(new Exception("GROUPSIGN:" + (string)Session["UserGUID"]));
                            engine.close();
                            groupSignProcedure();
                            return;
                        }

                        //AfterApprove進入
                        if (Request.QueryString["AfterApprove"] != null)
                        {
                            string tmpsignResult = com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(Request.QueryString["signResult"]);

                            //國昌20091217: 最後一關時，確認afterApprove後才能執行afterSign，所以先不要呼叫afterSign，移至afterApprove前呼叫。
                            afterSign(engine, currentObject, tmpsignResult);
                            afterApprove(engine, currentObject, tmpsignResult);
                            //國昌20100423: 因為群簽呼叫時並沒有將engine放進GlobalCache(共用)，所以在群簽中若發生afterApprove呼叫,會自己建立engine。在這裡要關閉
                            if (com.dsc.kernal.global.GlobalCache.getValue((string)getSession("FlowGUID")) == null)
                            {
                                engine.close();
                            }
                            //engine.close();
                            return;
                        }
                        attachFile.updateTable();

                        string sheetno = "";

                        //若為InitNew, InitModify, InitDelete, ProcessNew則需填寫SubmitInfo資訊
                        //其他情況則由原稿資料夾SMWYAAA取得SubmitInfo
                        if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(GeneralNew)))
                        {
                            SubmitInfo si = (SubmitInfo)getSession("SubmitInfo");
                            checkPoint("Init SubmitInfo", modeFormLoad);
                            si = initSubmitInfo(engine, currentObject, si);
                            checkPoint("Init SubmitInfo Complete", modeFormLoad);
                            setSession("SubmitInfo", si);
                        }
                        else if ((UIStatus.Equals(InitModify)) || (UIStatus.Equals(InitDelete)) || (UIStatus.Equals(GeneralModify)) || (UIStatus.Equals(GeneralDelete)))
                        {
                            SubmitInfo si = (SubmitInfo)getSession("SubmitInfo");
                            si = initSubmitInfo(engine, newObject, si);
                            setSession("SubmitInfo", si);
                        }
                        else if ((UIStatus.Equals(ProcessModify)) || (UIStatus.Equals(ProcessDelete)) || (UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FormRollback)))
                        {
                            SubmitInfo si = (SubmitInfo)getSession("SubmitInfo");

                            string sss = "select * from SMWYAAA where SMWYAAA019='" + currentObject.getData(getObjectGUIDField()) + "'";
                            DataSet oss = engine.getDataSet(sss, "TEMP");

                            //因為有可能當初沒有掛流程~所以不一定會有表單資訊
                            if (oss.Tables[0].Rows.Count == 0)
                            {
                                //有可能是ProcessNew的表單下一關便成ProcessModify,此時由GUID查原稿會查不到, 改查DATARELATION
                                //改從FormRelation取得
                                sss = "select * from SMWYAAA where SMWYAAA019 in (select ORIGUID from FORMRELATION where CURGUID='" + currentObject.getData(getObjectGUIDField()) + "')";
                                oss = engine.getDataSet(sss, "TEMP");


                            }
                            if (oss.Tables[0].Rows.Count > 0)
                            {
                                si.fillerID = oss.Tables[0].Rows[0]["SMWYAAA008"].ToString();
                                si.fillerName = oss.Tables[0].Rows[0]["SMWYAAA009"].ToString();
                                si.fillerOrgID = oss.Tables[0].Rows[0]["SMWYAAA010"].ToString();
                                si.fillerOrgName = oss.Tables[0].Rows[0]["SMWYAAA011"].ToString();
                                si.ownerID = oss.Tables[0].Rows[0]["SMWYAAA012"].ToString();
                                si.ownerName = oss.Tables[0].Rows[0]["SMWYAAA013"].ToString();
                                si.ownerOrgID = oss.Tables[0].Rows[0]["SMWYAAA014"].ToString();
                                si.ownerOrgName = oss.Tables[0].Rows[0]["SMWYAAA015"].ToString();
                                si.submitOrgID = oss.Tables[0].Rows[0]["SMWYAAA016"].ToString();
                                si.objectGUID = oss.Tables[0].Rows[0]["SMWYAAA019"].ToString();

                                sheetno = oss.Tables[0].Rows[0]["SMWYAAA002"].ToString();
                            }
                            setSession("SubmitInfo", si);

                        }

                        //將資料由資料物件顯示到畫面
                        if (isNew())
                        {
                            //呼叫繼承方法-initUI
                            checkPoint("initUI", modeFormLoad);
                            initUI(engine, currentObject);
                            checkPoint("initUI Complete", modeFormLoad);
                            
                            //如果複製表單, 那要顯示
                            if (Request.QueryString["IsCopyForm"] != null)
                            {
                                string xmlData = (string)Session["CopyFormDraft"];
                                currentObject.loadXML3(xmlData);

                                //國昌20100622-mantis0017634
                                modifyDraftGUID(currentObject);
                                //currentObject.setData(getObjectGUIDField(), "");
                                checkPoint("showData", modeFormLoad);
                                showData(engine, currentObject);
                                checkPoint("showData Complete", modeFormLoad);
                            }
                        }
                        else
                        {
                            //呼叫繼承方法-initUI
                            initUI(engine, (DataObject)getSession("currentObject"));

                            //showData(engine, currentObject);
                            //2009/07/22 國昌:cloneObject，在修改刪除模式，currentObject變數已經變成舊資料，所以要用getSession取才正確。在saveProcedure也是如此
                            checkPoint("showData", modeFormLoad);
                            showData(engine, (DataObject)getSession("currentObject"));
                            checkPoint("showData Complete", modeFormLoad);
                        }

                        //因為initUI有可能造成畫面連動把某些欄位打開, 所以之後再呼叫setReadOnlyForm一次
                        if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FormNotify)))
                        {
                            checkPoint("setReadOnlyForm", modeFormLoad);
                            setReadOnlyForm(engine, UIStatus);
                            afterSetReadOnlyForm(engine, currentObject, UIStatus);
                            checkPoint("setReadOnlyForm Dome", modeFormLoad);
                        }

                        //設定表單資訊以及簽核意見
                        checkPoint("initFormHeadTail", modeFormLoad);
                        initFormHeadTail(engine, currentObject, UIStatus, (string)getSession("FlowGUID"));
                        checkPoint("initFormHeadTail Done", modeFormLoad);

                        //設定歷史紀錄
                        checkPoint("initHistory", modeFormLoad);
                        initHistory(engine, currentObject, UIStatus);
                        checkPoint("initHistory Done", modeFormLoad);

                        //設定相關表單
                        checkPoint("initRelation", modeFormLoad);
                        initRelation(engine, currentObject, UIStatus);
                        checkPoint("initRelation Dpme", modeFormLoad);

                        /*
                        if (getSession("ProcessNewRepeat") != null)
                        {
                            bool isProcessNewRepeat = (bool)getSession("ProcessNewRepeat");
                            if (isProcessNewRepeat)
                            {
                                UIStatus = ProcessNew;
                                setSession("UIStatus", ProcessNew);
                            }
                        }
                        */

                        //如果列印憑證模式, 呼叫setPrintCertificateCustomizeDisplay, 同時設定列印功能
                        if (Request.QueryString["CertificateMode"] != null)
                        {
                            checkPoint("CertificateMode Start ", modeFormLoad);
                            //判定是否列印條碼
                            string sql = "";
                            bool isPrintBarCode = false;
                            if (!UIStatus.Equals(GeneralModify))
                            {
                                if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormRollback)))
                                {
                                    sql = "select SMWDAAA023 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Origin'";
                                }
                                else
                                {
                                    sql = "select SMWDAAA023 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Display' and SMWDAAA004='" + (string)getSession("ACTName") + "'";
                                }
                                DataSet dsa = engine.getDataSet(sql, "TEMP");

                                //如果dsa.Count=0要改用預設
                                if (dsa.Tables[0].Rows.Count == 0)
                                {
                                    sql = "select SMWDAAA023 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
                                    dsa = engine.getDataSet(sql, "TEMP");
                                    if (dsa.Tables[0].Rows.Count == 0)
                                    {
                                        //throw new Exception("找不到此畫面的設定檔(SMWD)");
                                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError3", "找不到此畫面的設定檔(SMWD)"));
                                    }
                                }

                                if (dsa.Tables[0].Rows[0][0].ToString().Equals("Y"))
                                {
                                    isPrintBarCode = true;
                                }
                            }
                            if (isPrintBarCode)
                            {
                                LiteralControl head = new LiteralControl();
                                head.Text = "<table border=0 width=100% ><thead style=\"display:table-header-group\"><tr><td align=right><img src='" + Page.ResolveClientUrl("~/DSCWebControlRunTime/DSCWebControlUI/BarCode/getBarCode.aspx") + "?BarCodeType=Code39&codes=" + sheetno + "' /></td></tr></thead>";
                                head.Text += "<tbody><tr><td>";

                                this.Controls.AddAt(0, head);
                            }

                            //寫入列印稽核
                            string printTitle = (string)getSession("ProgramName");
                            //由SMWYAAA娶得單號, 若無, 則使用objectGUID
                            sql = "select SMWYAAA002 from SMWYAAA where SMWYAAA019='" + currentObject.getData("GUID") + "'";
                            DataSet printds = engine.getDataSet(sql, "TEMP");
                            if (printds.Tables[0].Rows.Count > 0)
                            {
                                //printTitle += "(單號: " + printds.Tables[0].Rows[0][0].ToString() + ")";
                                printTitle += com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError4", " (單號: ") + printds.Tables[0].Rows[0][0].ToString() + ")";
                            }
                            else
                            {
                                //printTitle += "(物件識別號: " + currentObject.getData("GUID") + ")";
                                printTitle += com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError5", " (物件識別號: ") + currentObject.getData("GUID") + ")";
                            }
                            WebServerProject.Audit au = new Audit(engine);
                            au.writePrintLog(printTitle, Request.RawUrl, (String)Session["UserID"], (string)Session["UserName"], Request.ServerVariables["REMOTE_ADDR"], Request.ServerVariables["HTTP_USER_AGENT"]);

                            setPrintCertificateCustomizeDisplay(engine, currentObject);
                            registerPrintScript(engine);
                            if (isPrintBarCode)
                            {
                                LiteralControl tail = new LiteralControl();
                                tail.Text = "</td></tr></tbody></table>";
                                this.Controls.AddAt(this.Controls.Count, tail);
                            }
                            checkPoint("CertificateMode End", modeFormLoad);
                        }

                        //關閉資料連線物件
                        engine.close();


                    }
                    catch (Exception ue)
                    {
                        processErrorMessage(errorLevel, ue);
                    }
                }
            }
          
            //Jack
            //writeLog(new Exception("OnLoad_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
            //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, "-------------------------", "E", "OnLoad");
            checkPoint("GeneralWebForm OnLoad Complete", modeFormLoad);
        }

        protected override void OnLoadComplete(EventArgs e)
        {
            checkPoint("GeneralWebForm OnLoadComplete Event Start", modeFormLoad);
            base.OnLoadComplete(e);
            if (Request.QueryString["GetSignOpinion"] != null)
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];
                string tmpOpinionType = Request.QueryString["OpinionType"];

                IOFactory factory = new IOFactory();
                AbstractEngine engine = factory.getEngine(engineType, connectString);

                string retS = getSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpOpinionType), (DataRow)getSession("SignOpinionSetting"));
                engine.close();

                Response.Clear();
                Response.Write(retS);

                Response.End();
                checkPoint("END", modeFormLoad);
                return;
            }
            checkPoint("END", modeFormLoad);
        }
        /// <summary>
        /// 按下刪除紐的程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void DeleteButton_Click(object sender, EventArgs e)
        {
            deleteProcedure();
        }

        /// <summary>
        /// 按下重新整理紐的程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void RefreshButton_Click(object sender, EventArgs e)
        {
            AbstractEngine engine = null;

            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                showData(engine, (DataObject)getSession("currentObject"));

                engine.close();
            }
            catch (Exception te)
            {
                processErrorMessage(errorLevel, te);
            }
        }

        /// <summary>
        /// 按下回清單鈕的程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void BackListButton_Click(object sender, EventArgs e)
        {
            closeRefresh();
        }

        /// <summary>
        /// 按下同意紐的程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void AgreeButton_Click(object sender, EventArgs e)
        {
            Session["signProcess"] = "Y";
            Session["tempSignResult"] = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "case1", "同意");
            signProcedure();
        }

        /// <summary>
        /// 按下不同意紐的程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void DisagreeButton_Click(object sender, EventArgs e)
        {
            Session["signProcess"] = "N";
            Session["tempSignResult"] = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "case2", "不同意");
            signProcedure();
        }
        
        /// <summary>
        /// 按下儲存紐的程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void SaveButton_Click(object sender, EventArgs e)
        {            
            saveProcedure();
        }

        /// <summary>
        /// 按下發起紐的程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void SubmitButton_Click(object sender, EventArgs e)
        {
            saveProcedure();
        }

        /// <summary>
        /// 按下簽核鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void SignButton_Click(object sender, EventArgs e)
        {
            signProcedure();
        }
        public void SignButton_BeforeClicks(object sender, EventArgs e)
        {
            beforeSignProcedure();
        }

        /// <summary>
        /// 按下附件鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void AttachButton_Click(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// 按下儲存草稿鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void SaveDraftButton_Click(object sender, EventArgs e)
        {
            saveDraftProcedure();
        }

        /// <summary>
        /// 按下讀取草稿鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void ReadDraftButton_Click(object sender, EventArgs e)
        {
            DraftOpenWin.whereClause = " NUSER='" + (string)Session["UserGUID"] + "' and FORMID='" + ProcessPageID + "'";
            DraftOpenWin.openWin("EFORMDRAFT", "001", false, "0001");
        }

        /// <summary>
        /// 按下檢視相關表單鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void ViewButton_Click(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// 按下流程檢視鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void ViewFlowButton_Click(object sender, EventArgs e)
        {
            viewFlowProcedure();
        }

        /// <summary>
        /// 按下設定流程鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void SetFlowButton_Click(object sender, EventArgs e)
        {
            setFlowProcedure();
        }

        /// <summary>
        /// 按下加簽鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void AddSignButton_Click(object sender, EventArgs e)
        {
            addSignProcedure();
        }

        /// <summary>
        /// 按下撤銷鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void WithDrawButton_Click(object sender, EventArgs e)
        {
            withDrawProcedure();
        }

        /// <summary>
        /// 按下重辦鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void RejectButton_Click(object sender, EventArgs e)
        {
            rejectProcedure();
        }

        /// <summary>
        /// 按下轉寄鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void ForwardButton_Click(object sender, EventArgs e)
        {
            forwardProcedure();
        }

        /// <summary>
        /// 按下發起參考流程鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void DispatchFlowButton_Click(object sender, EventArgs e)
        {
            dispatchFlowProcedure();
        }

        /// <summary>
        /// 按下複製表單鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void CopyFormButton_Click(object sender, EventArgs e)
        {
            copyFormProcedure();
        }

        /// <summary>
        /// 按下歷史紀錄鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void HistoryButton_Click(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// 按下列印憑證鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void PrintCertificateButton_Click(object sender, EventArgs e)
        {
            printCertificateProcedure();
        }

        /// <summary>
        /// 按下轉派鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void RedirectButton_Click(object sender, EventArgs e)
        {
            redirectProcedure();
        }

        /// <summary>
        /// 按下取回重辦鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void ReGetButton_Click(object sender, EventArgs e)
        {
            reGetProcedure();
        }

        /// <summary>
        /// 按下撤簽鈕程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void RollbackButton_Click(object sender, EventArgs e)
        {
            rollbackProcedure();
        }

        /// <summary>
        /// 按下自訂按鈕一程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void UserDefineButton1_Click(object sender, EventArgs e)
        {
            userDefineProcedure1();
        }
        /// <summary>
        /// 按下自訂按鈕二程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void UserDefineButton2_Click(object sender, EventArgs e)
        {
            userDefineProcedure2();
        }
        /// <summary>
        /// 按下自訂按鈕三程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void UserDefineButton3_Click(object sender, EventArgs e)
        {
            userDefineProcedure3();
        }
        /// <summary>
        /// 按下自訂按鈕四程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void UserDefineButton4_Click(object sender, EventArgs e)
        {
            userDefineProcedure4();
        }
        /// <summary>
        /// 按下自訂按鈕五程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void UserDefineButton5_Click(object sender, EventArgs e)
        {
            userDefineProcedure5();
        }

        /// <summary>
        /// "簽核片語" 按鈕事件處理函式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void SignPhraseButton_Click(object sender, EventArgs e)
        {
            SignPhraseOpenWin.PageUniqueID = this.PageUniqueID;
            SignPhraseOpenWin.identityID = "0001";
            SignPhraseOpenWin.paramString = "SMVLAAA002";
            SignPhraseOpenWin.whereClause = "SMVLAAA002='" + (string)Session["UserID"] + "'";
            SignPhraseOpenWin.openWin("SMVLAAA", "001", false, "0001");
        }
        #endregion

        #region 繼承類別可複寫的預設方法
        /// <summary>
        /// 由資料庫讀取資料到資料物件
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="guid">資料物件的GUID欄位值. 若為新增模式, 此欄位傳入零長度字串</param>
        /// <param name="UIStatus">目前畫面的UIStatus</param>
        /// <returns>包含資料的資料物件</returns>
        protected virtual DataObject readDB(AbstractEngine engine, string guid, string UIStatus)
        {
            NLAgent agent = new NLAgent();
            agent.loadSchema(AgentSchema);

            agent.engine = engine;
            if (!agent.query("GUID='" + guid + "'"))
            {
                throw new Exception(engine.errorString);
            }

            DataObject ddo;
            if (agent.defaultData.getAvailableDataObjectCount() > 0)
            {
                ddo = agent.defaultData.getAvailableDataObject(0);
            }
            else
            {
                ddo = agent.defaultData.create();
            }
            if (!agent.defaultData.errorString.Equals(""))
            {
                throw new Exception(agent.defaultData.errorString);
            }
            agentXML = agent.DefinitionXML; //2009/07/22 國昌:cloneObject使用
            return ddo;
        }

        /// <summary>
        /// 將資料由資料物件儲存到資料庫
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">要處理的資料物件</param>
        /// <param name="oriObjects">原始的資料物件</param>
        /// <param name="UIStatus">此筆資料狀態</param>
        protected virtual void saveDB(AbstractEngine engine, DataObject objects, DataObject oriObjects, string UIStatus)
        {
            NLAgent agent = new NLAgent();
            agent.loadSchema(AgentSchema);

            agent.engine = engine;
            agent.query("(1=2)");

            agent.defaultData.add(objects);
            if (oriObjects != null)
            {
                agent.defaultData.add(oriObjects);
            }

            bool res = agent.update();
            if (!res)
            {
                throw new Exception(engine.errorString);
            }
        }

        /// <summary>
        /// 刪除基本程序
        /// </summary>
        protected virtual void deleteProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);
                engine.startTransaction(IsolationLevel.ReadCommitted);

                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("oriObject");
                if (!currentObject.getData("IS_LOCK").Equals("N"))
                {
                    //throw new Exception("此筆資料已經在異動中");
                    throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError6", "此筆資料已經在異動中"));
                }

                currentObject.setData("IS_LOCK", "D");

                string uistatus = "";
                uistatus = (string)getSession("UIStatus");
                if (uistatus.Equals(InitModify))
                {
                    uistatus = InitDelete;
                }
                else
                {
                    uistatus = GeneralDelete;
                }

                //國昌20090304:移動到後面, 避免GP處理狀況太久導致table lock
                //saveDB(engine, currentObject, null, uistatus);

                string afterSendMode = "0"; //送單後模式
                bool isShowFlow = false; //是否顯示流程圖

                //送單程序
                string flowOID = (string)getSession("FlowGUID"); //流程實例序號
                string flowid = (string)getSession("PDID"); //流程定義代號
                string flowname = ""; //流程定義名稱
                string sheetno = ""; //單號

                if (flowOID.Equals(""))
                {
                    flowOID = com.dsc.kernal.utility.IDProcessor.getID("");
                }

                string UIStatus = (string)getSession("UIStatus");
                if (UIStatus.Equals(InitModify))
                {
                    UIStatus = InitDelete;
                }
                else if (UIStatus.Equals(GeneralModify))
                {
                    UIStatus = GeneralDelete;
                }
                setSession("UIStatus", UIStatus);

                if (UIStatus.Equals(InitDelete))
                {
                    //要送單, 會取得flowOID以及flowid
                    //要送單, 會取得流程序號以及流程代號
                    //取得流程定義代號
                    string sql = "select SMWBAAA003, SMWDAAA001, SMWDAAA011,SMWDAAA012,SMWBAAA004, SMWAAAA001,SMWDAAA018, SMWBAAA001, SMWDAAA024 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Init'";
                    DataSet ds = engine.getDataSet(sql, "TEMP");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        //throw new Exception("找不到此作業畫面所要發起的流程定義");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError7", "找不到此作業畫面所要發起的流程定義"));
                    }
                    flowid = ds.Tables[0].Rows[0][0].ToString();
                    setSession("PDID", flowid);

                    string wd001 = ds.Tables[0].Rows[0][1].ToString();
                    flowname = ds.Tables[0].Rows[0][4].ToString();
                    string wa001 = ds.Tables[0].Rows[0][5].ToString();
                    if (ds.Tables[0].Rows[0]["SMWDAAA024"].ToString().Equals("Y"))
                    {
                        isShowFlow = true;
                    }
                    else
                    {
                        isShowFlow = false;
                    }

                    //取得主旨
                    string subjectTemp = ds.Tables[0].Rows[0][2].ToString();
                    string subject = getSubject(engine, subjectTemp, UIStatus);

                    //取得單號
                    sheetno = "";
                    sheetno = getSheetNoProcedure(engine, ds.Tables[0].Rows[0][3].ToString());

                    //取得發起流程資訊
                    com.dsc.flow.data.SubmitInfo info = (SubmitInfo)getSession("SubmitInfo");
                    info = getSubmitInfo(engine, currentObject, info);

                    //取得流程預設參數
                    Hashtable param = getProcessParameter(engine, ds.Tables[0].Rows[0][7].ToString());

                    //取得流程參數
                    string firstParam = setFlowVariables(engine, param, currentObject);

                    //取得表單參數
                    //string formXML = setFormVariables(engine, currentObject);

                    //發起流程--這裡要改掉
                    string setFlowXml = "";
                    string IsSetFlow = (string)getSession("IsSetFlow");
                    if (IsSetFlow.Equals("Y"))
                    {
                        setFlowXml = getSetFlowXml();

                        //簽核前呼叫: 可以在此新增或修改加簽的資料等等
                        setFlowXml = beforeSetFlow(engine, setFlowXml);

                    }

                    //流程送出前呼叫
                    beforeSend(engine, currentObject);

                    if ((firstParam == null) || (firstParam.Equals("")))
                    {
                        //沒有設定任何參數
                        //要判斷是否有加簽
                        if (IsSetFlow.Equals("Y"))
                        {
                            flowOID = invokeProcessByFormParameterAndAddCusAct(engine, info, flowid, "", "", subject, setFlowXml);
                        }
                        else
                        {
                            flowOID = invokeProcess(engine, info, flowid, subject);
                        }
                    }
                    else
                    {
                        //有參數, 要判定是否為表單參數
                        bool isFormParam = false;
                        string formOID = "";
                        sql = "select SMWBAAB007, SMWBAAB008 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 inner join SMWBAAB on SMWBAAB002=SMWBAAA001 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Init' and SMWBAAB003='" + firstParam + "'";
                        DataSet dtest = engine.getDataSet(sql, "TEMP");
                        if (dtest.Tables[0].Rows.Count > 0)
                        {
                            if (dtest.Tables[0].Rows[0][0].ToString().Equals("Y"))
                            {
                                isFormParam = true;
                                formOID = dtest.Tables[0].Rows[0][1].ToString();
                            }
                        }
                        if (isFormParam)
                        {
                            //判斷是否有加簽
                            if (IsSetFlow.Equals("Y"))
                            {
                                string paramValue = (string)param[firstParam];
                                flowOID = invokeProcessByFormParameterAndAddCusAct(engine, info, flowid, formOID, paramValue, subject, setFlowXml);
                            }
                            else
                            {
                                string paramValue = (string)param[firstParam];
                                flowOID = invokeProcessByFormParameter(engine, info, flowid, formOID, paramValue, subject);
                            }
                        }
                        else
                        {
                            //判斷是否有加簽
                            if (IsSetFlow.Equals("Y"))
                            {
                                //throw new Exception("發起流程時若有設定流程且送出參數, 不可為流程變數");
                                throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError8", "發起流程時若有設定流程且送出參數, 不可為流程變數"));
                            }
                            else
                            {
                                string paramValue = (string)param[firstParam];
                                flowOID = invokeProcessByParameter(engine, info, flowid, firstParam, paramValue, subject);
                            }
                        }
                    }

                    setSession("FlowGUID", flowOID);

                    //流程送出後呼叫
                    //afterSend(engine, currentObject);

                    //送單後模式
                    afterSendMode = ds.Tables[0].Rows[0][6].ToString();

                    //MessageBox("取得流程實例序號:" + flowOID);
                    //寫入原稿資料夾
                    Hashtable hs = new Hashtable();
                    sql = "select * from SMWGAAA";
                    DataSet oriFormVar = engine.getDataSet(sql, "TEMP");
                    for (int i = 0; i < oriFormVar.Tables[0].Rows.Count; i++)
                    {
                        hs.Add(oriFormVar.Tables[0].Rows[i]["SMWGAAA003"].ToString(), "");
                    }
                    getOriginalFormVariables(engine, currentObject, hs);

                    sql = "select * from SMWYAAA where (1=2)";
                    DataSet oriy = engine.getDataSet(sql, "TEMP");
                    DataRow dr = oriy.Tables[0].NewRow();
                    dr["SMWYAAA001"] = IDProcessor.getID("");
                    dr["SMWYAAA002"] = sheetno;
                    dr["SMWYAAA003"] = flowid;
                    dr["SMWYAAA004"] = flowname;
                    dr["SMWYAAA005"] = flowOID;
                    dr["SMWYAAA006"] = subject;
                    dr["SMWYAAA007"] = info.important;
                    dr["SMWYAAA008"] = info.fillerID;
                    dr["SMWYAAA009"] = info.fillerName;
                    dr["SMWYAAA010"] = info.fillerOrgID;
                    dr["SMWYAAA011"] = info.fillerOrgName;
                    dr["SMWYAAA012"] = info.ownerID;
                    dr["SMWYAAA013"] = info.ownerName;
                    dr["SMWYAAA014"] = info.ownerOrgID;
                    dr["SMWYAAA015"] = info.ownerOrgName;
                    dr["SMWYAAA016"] = info.submitOrgID;
                    dr["SMWYAAA017"] = DateTimeUtility.getSystemTime2(null);
                    dr["SMWYAAA018"] = wa001;
                    dr["SMWYAAA019"] = info.objectGUID;
                    dr["SMWYAAA020"] = "I";
                    dr["SMWYAAA022"] = "N";

                    for (int i = 1; i <= 20; i++)
                    {
                        string tag = "SMWYAAA1" + string.Format("{0:00}", i);
                        string varName = "";
                        bool hasFound = false;
                        for (int j = 0; j < oriFormVar.Tables[0].Rows.Count; j++)
                        {
                            if (oriFormVar.Tables[0].Rows[j]["SMWGAAA002"].ToString().Equals(tag))
                            {
                                hasFound = true;
                                varName = oriFormVar.Tables[0].Rows[j]["SMWGAAA003"].ToString();
                                break;
                            }
                        }
                        if (hasFound)
                        {
                            string vle = "";
                            IDictionaryEnumerator ie = hs.GetEnumerator();
                            while (ie.MoveNext())
                            {
                                string key = (string)ie.Key;
                                string vl = (string)ie.Value;
                                if (key.Equals(varName))
                                {
                                    vle = vl;
                                    break;
                                }
                            }
                            dr[tag] = vle;
                        }
                        else
                        {
                            dr[tag] = "";
                        }
                    }
                    dr["D_INSERTUSER"] = (string)Session["UserGUID"];
                    dr["D_INSERTTIME"] = DateTimeUtility.getSystemTime2(null);
                    dr["D_MODIFYUSER"] = "";
                    dr["D_MODIFYTIME"] = "";

                    oriy.Tables[0].Rows.Add(dr);
                    if (!engine.updateDataSet(oriy))
                    {
                        throw new Exception(engine.errorString.Replace("\n", "\\n"));
                    }
                    //處理附件
                    attachFile.engine = engine;
                    attachFile.setJobID(currentObject.getData(getObjectGUIDField()));
                    attachFile.confirmSave(ProcessPageID, sheetno);
                    attachFile.saveFile();
                }

                //國昌20090304:移動至此
                saveDB(engine, currentObject, null, uistatus);

                //處理DATARELATION
                if (true)
                {

                    string sql = "select SMWAAAA001, SMWAAAA030 from SMWAAAA where SMWAAAA002='" + ProcessPageID + "'";
                    DataSet ds = engine.getDataSet(sql, "TEMP");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        //throw new Exception("找不到此作業畫面設定檔");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError9", "找不到此作業畫面設定檔"));
                    }

                    string processGUID = ds.Tables[0].Rows[0][0].ToString();
                    if (UIStatus.Equals(GeneralDelete))
                    {
                        afterSendMode = ds.Tables[0].Rows[0][1].ToString();

                    }
                    if (true)
                    {
                        //刪除
                        sql = "insert into DATARELATION(GUID, LASTGUID, CURRENTGUID, PROCESSGUID, FLOWGUID, FLOWID, AGENTSCHEMA, DATA_STATUS, UPDATEUSER, UPDATETIME) values(";
                        sql += "'" + IDProcessor.getID("") + "',";
                        sql += "'',";
                        sql += "'" + currentObject.getData("GUID") + "',";
                        sql += "'" + processGUID + "',";
                        sql += "'" + flowOID + "',";
                        sql += "'" + flowid + "',";
                        sql += "'" + AgentSchema + "',";
                        sql += "'D',";
                        sql += "'" + (string)Session["UserGUID"] + "',";
                        sql += "'" + DateTimeUtility.getSystemTime2(null) + "')";
                        if (!engine.executeSQL(sql))
                        {
                            throw new Exception(engine.errorString);
                        }
                    }
                }

                //2009/07/07 Edward: GeneralDelete開放afterSend
                if((UIStatus.Equals(InitDelete)) || (UIStatus.Equals(GeneralDelete)))
                //if (UIStatus.Equals(InitDelete))
                {
                    //流程送出後呼叫
                    afterSend(engine, currentObject);
                }

                //若非送流程, 呼叫公用物件更新資料並且備份
                if (UIStatus.Equals(GeneralDelete))
                {
                    DataOperate dot = new DataOperate(engine);
                    dot.process(flowOID, "Y", Request.ApplicationPath, Server);
                }
                engine.commit();
                engine.close();

                //儲存成功
                if (UIStatus.Equals(GeneralDelete))
                {
                    //Response.Write("alert('" + DeleteSuccessMsg + "');");
                    MessageBox(DeleteSuccessMsg);
                }
                else
                {
                    //Response.Write("alert('" + ProcessDeleteSuccessMsg + "');");
                    MessageBox(ProcessDeleteSuccessMsg);
                }

                if (((string)getSession("ParentPanelID")).Equals(""))
                {
                    if (afterSendMode.Equals("0"))
                    {
                        closeSilence();
                    }
                    else if (afterSendMode.Equals("1"))
                    {
                        string imageURL = "";

                        engine = factory.getEngine(engineType, connectString);
                        if (isShowFlow)
                        {

                            string filename = IDProcessor.getID("") + ".jpg";
                            string localFilePath = Server.MapPath("~/tempFolder/" + filename);

                            fetchFlowDiagram(engine, (string)getSession("FlowGUID"), localFilePath);

                            imageURL = Server.UrlEncode(Request.ApplicationPath + "/tempFolder/" + filename);


                        }
                        else
                        {
                            imageURL = "";
                        }
                        string opinionHTML = getSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), SignOpinion.SHOW_ALL, (DataRow)getSession("SignOpinionSetting"));
                        engine.close();
                        setSession("OpinionHTML", opinionHTML);


                        string urls = Page.ResolveUrl("~/Program/DSCGPFlowService/Public/ViewOpinion.aspx?ImageURL=" + imageURL + "&processSerialNumber=" + flowOID + "&opinionType=SHOW_ALL&SourceURL=" + Request.ServerVariables["PATH_INFO"] + "&PGID=" + this.PageUniqueID);
                        //base.showPanelWindow(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError17", "流程圖"), urls, 0, 0, "", true, true);                        
                        Response.Write("window.location.href='" + urls + "';");
                    }
                    else if (afterSendMode.Equals("2"))
                    {
                        Response.Write("window.location.reload();");
                    }
                    else if (afterSendMode.Equals("3") || afterSendMode.Equals("4"))
                    {
                        if (UIStatus.Equals(GeneralNew))
                        {
                            Response.Write("document.getElementById('FTB').style.display='none';");
                        }
                        else
                        {
                            string urls = Request.ServerVariables["PATH_INFO"];
                            urls += "?";
                            urls += "ParentPanelID=" + (string)getSession("ParentPanelID");
                            urls += "&DataListID=" + (string)getSession("DataListID");
                            urls += "&UIType=Process";
                            urls += "&ObjectGUID=" + currentObject.getData("GUID");
                            urls += "&HistoryGUID=";
                            urls += "&FlowGUID=" + (string)getSession("FlowGUID");
                            urls += "&ACTID=";
                            urls += "&PDID=" + (string)getSession("PDID");
                            urls += "&PDVer=&ACTName=";
                            urls += "&UIStatus=3&WorkItemOID=&TargetWorkItemOID=&workAssignmentOID=&assignmentType=&reassignmentType=&manualReassignType=&IsAllowWithDraw=true&IsMaintain=N";
                            urls = com.dsc.kernal.utility.Utility.URLParameterEncode(urls);                            
                            Response.Write("window.location.href='" + urls + "';");
                        }
                    }
                }
                else
                {
                    if (afterSendMode.Equals("0"))
                    {
                        closeRefresh();
                    }
                    else if (afterSendMode.Equals("1"))
                    {
                        string imageURL = "";

                        engine = factory.getEngine(engineType, connectString);
                        if (isShowFlow)
                        {

                            string filename = IDProcessor.getID("") + ".jpg";
                            string localFilePath = Server.MapPath("~/tempFolder/" + filename);

                            fetchFlowDiagram(engine, (string)getSession("FlowGUID"), localFilePath);

                            imageURL = Server.UrlEncode(Request.ApplicationPath + "/tempFolder/" + filename);


                        }
                        else
                        {
                            imageURL = "";
                        }

                        string opinionHTML = getSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), SignOpinion.SHOW_ALL, (DataRow)getSession("SignOpinionSetting"));
                        engine.close();
                        setSession("OpinionHTML", opinionHTML);

                        string urls = Page.ResolveUrl("~/Program/DSCGPFlowService/Public/ViewOpinion.aspx?ImageURL=" + imageURL + "&processSerialNumber=" + flowOID + "&opinionType=SHOW_ALL&SourceURL=" + Request.ServerVariables["PATH_INFO"] + "&PGID=" + this.PageUniqueID);
                        //base.showPanelWindow("流程圖", Request.ApplicationPath + "/tempFolder/" + filename, 0, 0, "", true, true);                        
                        Response.Write("window.location.href='" + urls + "';");
                    }
                    else if (afterSendMode.Equals("2"))
                    {
                        closeRefresh();
                    }
                    else if (afterSendMode.Equals("3") || afterSendMode.Equals("4"))
                    {
                        if (UIStatus.Equals(GeneralDelete))
                        {
                            refreshDataList();
                            Response.Write("document.getElementById('FTB').style.display='none';");
                        }
                        else
                        {
                            closeRefresh();
                            string urls = Request.ServerVariables["PATH_INFO"];
                            urls += "?";
                            urls += "ParentPanelID=" + (string)getSession("ParentPanelID");
                            urls += "&DataListID=" + (string)getSession("DataListID");
                            urls += "&UIType=Process";
                            urls += "&ObjectGUID=" + currentObject.getData("GUID");
                            urls += "&HistoryGUID=";
                            urls += "&FlowGUID=" + (string)getSession("FlowGUID");
                            urls += "&ACTID=";
                            urls += "&PDID=" + (string)getSession("PDID");
                            urls += "&PDVer=&ACTName=";
                            urls += "&UIStatus=3&WorkItemOID=&TargetWorkItemOID=&workAssignmentOID=&assignmentType=&reassignmentType=&manualReassignType=&IsAllowWithDraw=true&IsMaintain=N";
                            base.showPanelWindow(flowname + "(" + sheetno + ")", urls, 0, 0, "", true, true);
                        }
                    }

                }
            }
            catch (Exception ze)
            {
                try
                {
                    engine.rollback();
                }
                catch { };
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ze);
                return;
            }
        }

        /// <summary>
        /// 取得單號程序
        /// </summary>
        /// <param name="autoCodeGUID">自動編號識別碼(SMVIAAA.GUID)</param>
        /// <returns>單號</returns>
        protected virtual string getSheetNoProcedure(AbstractEngine engine, string autoCodeGUID)
        {
            //國昌20090812: engine另開新的，避免LOCK太久
            string connectString = (string)Session["connectString"];
            string engineType = (string)Session["engineType"];

            IOFactory factory = new IOFactory();
            AbstractEngine sheetengine = null;
            
            try
            {
                sheetengine = factory.getEngine(engineType, connectString);

                if ((autoCodeGUID == null) || (autoCodeGUID.Equals("")))
                {
                    string so = getCustomizeSheetNo(sheetengine);
                    if (so.Equals(""))
                    {
                        //throw new Exception("並未設定此流程單號!");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError10", "並未設定此流程單號!"));
                    }
                    sheetengine.close();
                    return so;
                }
                else
                {
                    string sql = "select SMVIAAA002 from SMVIAAA where SMVIAAA001='" + autoCodeGUID + "'";
                    DataSet ds = sheetengine.getDataSet(sql, "TEMP");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        string customizeSheetNo = getCustomizeSheetNo(sheetengine);
                        sheetengine.close();
                        return customizeSheetNo;
                    }
                    string autoCodeID = ds.Tables[0].Rows[0][0].ToString();

                    Hashtable hs = getSheetNoParam(sheetengine, autoCodeID);

                    WebServerProject.AutoCode ac = new AutoCode();
                    ac.engine = sheetengine;
                    string systemSheetNo = ac.getAutoCode(autoCodeID, hs);
                    sheetengine.close();
                    return systemSheetNo;
                }
            }
            catch (Exception ue)
            {
                try
                {
                    sheetengine.close();
                }
                catch { };
                throw (ue);
            }
        }

        /// <summary>
        /// 儲存, 送單基本程序
        /// </summary>
        protected virtual void saveProcedure()
        {
            //Jack
            //writeLog(new Exception("saveProcedure_Star/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
            //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, "-------------------------", "S", "saveProcedure");
            
            checkPoint("saveProcedure Start", modeInvoke);
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);
                engine.startTransaction(IsolationLevel.ReadCommitted);

                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("currentObject");
                com.dsc.kernal.databean.DataObject oriObject = (com.dsc.kernal.databean.DataObject)getSession("oriObject");

                string UIStatus = (string)getSession("UIStatus");

                if ((UIStatus.Equals(GeneralModify)) || (UIStatus.Equals(InitModify)))
                {
                    if (!oriObject.getData("IS_LOCK").Equals("N"))
                    {
                        //throw new Exception("此筆資料已經在異動中");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError11", "此筆資料已經在異動中"));
                    }
                }
                
                errMsg = new ArrayList();
                
                bool ans = checkFieldData(engine, currentObject);
                checkPoint("checkFieldData Complete" , modeInvoke);
                //Jack
                //writeLog(new Exception("saveProcedure_checkFieldData_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
                //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, "-------------------------", "E", "saveProcedure_checkFieldData");

                
                if (!ans)
                {
                    throw new Exception(showErrorMessage());
                }
                
                saveData(engine, currentObject);
                checkPoint("Save Data Done" , modeInvoke);
                //Jack
                //writeLog(new Exception("saveProcedure_saveData_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
                //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, "-------------------------", "E", "saveProcedure_saveData");


                if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(GeneralNew)))
                {
                    currentObject.INSERTUSER = (string)Session["UserGUID"];
                    currentObject.INSERTTIME = com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null);
                    currentObject.setData("IS_LOCK", "A");
                }
                else if (UIStatus.Equals(ProcessModify))
                {
                    //這裡直接修改內容, 不用改狀態
                }
                else if ((UIStatus.Equals(InitModify)) || (UIStatus.Equals(GeneralModify)))
                {
                    currentObject.MODIFYUSER = (string)Session["UserGUID"];
                    currentObject.MODIFYTIME = com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null);
                    currentObject.setData("IS_LOCK", "A");

                    oriObject.setData("IS_LOCK", "M");
                }
                string returnValue = currentObject.checkData();

                if (!returnValue.Equals(""))
                {
                    throw new Exception(returnValue);
                }


                //國昌20090304:程序移至後面
                //saveDB(engine, currentObject, oriObject, UIStatus);

                //送單程序
                string afterSendMode = "0"; //送單後模式
                bool isShowFlow = false; //是否顯示流程圖
                string flowOID = (string)getSession("FlowGUID"); //流程實例序號
                string flowid = (string)getSession("PDID"); //流程定義代號
                string flowname = ""; //流程定義名稱
                string sheetno = ""; //單號

                if (flowOID.Equals(""))
                {
                    flowOID = com.dsc.kernal.utility.IDProcessor.getID("");
                    setSession("FlowGUID", flowOID);
                }

                if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(InitModify)))
                {

                    //要送單, 會取得流程序號以及流程代號
                    //取得流程定義代號
                    string sql = "select SMWBAAA003, SMWDAAA001, SMWDAAA011,SMWDAAA012,SMWBAAA004, SMWAAAA001,SMWDAAA018, SMWBAAA001, SMWDAAA024 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Init'";
                    DataSet ds = engine.getDataSet(sql, "TEMP");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        //throw new Exception("找不到此作業畫面所要發起的流程定義");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError12", "找不到此作業畫面所要發起的流程定義"));
                    }
                    flowid = ds.Tables[0].Rows[0][0].ToString();
                    setSession("PDID", flowid);

                    string wd001 = ds.Tables[0].Rows[0][1].ToString();
                    flowname = ds.Tables[0].Rows[0][4].ToString();
                    string wa001 = ds.Tables[0].Rows[0][5].ToString();
                    if (ds.Tables[0].Rows[0]["SMWDAAA024"].ToString().Equals("Y"))
                    {
                        isShowFlow = true;
                    }
                    else
                    {
                        isShowFlow = false;
                    }

                    //取得主旨
                    string subjectTemp = ds.Tables[0].Rows[0][2].ToString();
                    string subject = getSubject(engine, subjectTemp, UIStatus);

                    //取得發起流程資訊
                    com.dsc.flow.data.SubmitInfo info = (SubmitInfo)getSession("SubmitInfo");                    
                    info = getSubmitInfo(engine, currentObject, info);

                    //取得流程預設參數
                    Hashtable param = getProcessParameter(engine, ds.Tables[0].Rows[0][7].ToString());

                    //取得流程參數
                    checkPoint("Start SetFlowVariables", modeInvoke);
                    string firstParam = setFlowVariables(engine, param, currentObject);

                    //取得表單參數
                    //string formXML = setFormVariables(engine, currentObject);

                    //發起流程--這裡要改掉
                    string setFlowXml = "";
                    string IsSetFlow = (string)getSession("IsSetFlow");
                    if (IsSetFlow.Equals("Y"))
                    {
                        setFlowXml = getSetFlowXml();

                        //簽核前呼叫: 可以在此新增或修改加簽的資料等等
                        setFlowXml = beforeSetFlow(engine, setFlowXml);

                    }

                    //流程送出前呼叫
                    checkPoint("Set flow Done" , modeInvoke);
                    beforeSend(engine, currentObject);
                    //Jack
                    //writeLog(new Exception("saveProcedure_beforeSend_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
                    //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, "-------------------------", "E", "saveProcedure_beforeSend");


                    if ((firstParam == null) || (firstParam.Equals("")))
                    {
                        //沒有設定任何參數
                        //要判斷是否有加簽
                        if (IsSetFlow.Equals("Y"))
                        {
                            //checkPoint("invokeProcessByFormParameterAndAddCusAct", modeInvoke);
                            flowOID = invokeProcessByFormParameterAndAddCusAct(engine, info, flowid, "", "", subject, setFlowXml);
                        }
                        else
                        {
                            //checkPoint("invokeProcess", modeInvoke);
                            flowOID = invokeProcess(engine, info, flowid, subject);
                        }
                    }
                    else
                    {
                        //有參數, 要判定是否為表單參數
                        bool isFormParam = false;
                        string formOID = "";
                        sql = "select SMWBAAB007, SMWBAAB008 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 inner join SMWBAAB on SMWBAAB002=SMWBAAA001 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Init' and SMWBAAB003='" + firstParam + "'";
                        DataSet dtest = engine.getDataSet(sql, "TEMP");
                        if (dtest.Tables[0].Rows.Count > 0)
                        {
                            if (dtest.Tables[0].Rows[0][0].ToString().Equals("Y"))
                            {
                                isFormParam = true;
                                formOID = dtest.Tables[0].Rows[0][1].ToString();
                            }
                        }
                        if (isFormParam)
                        {
                            //判斷是否有加簽
                            if (IsSetFlow.Equals("Y"))
                            {
                                string paramValue = (string)param[firstParam];
                                //checkPoint("invokeProcessByFormParameterAndAddCusAct", modeInvoke);
                                flowOID = invokeProcessByFormParameterAndAddCusAct(engine, info, flowid, formOID, paramValue, subject, setFlowXml);
                            }
                            else
                            {
                                string paramValue = (string)param[firstParam];
                                //checkPoint("invokeProcessByFormParameter", modeInvoke);
                                flowOID = invokeProcessByFormParameter(engine, info, flowid, formOID, paramValue, subject);
                            }
                        }
                        else
                        {
                            //判斷是否有加簽
                            if (IsSetFlow.Equals("Y"))
                            {
                                //throw new Exception("發起流程時若有設定流程且送出參數, 不可為流程變數");
                                throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError8", "發起流程時若有設定流程且送出參數, 不可為流程變數"));
                            }
                            else
                            {
                                string paramValue = (string)param[firstParam];                                
                                //checkPoint("invokeProcessByFormParameter", modeInvoke);
                                flowOID = invokeProcessByParameter(engine, info, flowid, firstParam, paramValue, subject);
                            }
                        }
                    }
                    //Jack
                    //writeLog(new Exception("saveProcedure_invokeProcess(All)_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + flowOID + "/" + (string)Session["UserID"]));
                    //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, flowOID, "E", "saveProcedure_invokeProcess(All)");
                    

                    setSession("FlowGUID", flowOID);

                    //流程送出後呼叫
                    //afterSend(engine, currentObject);

                    //送單後模式
                    afterSendMode = ds.Tables[0].Rows[0][6].ToString();

                    //MessageBox("取得流程實例序號:" + flowOID);
                    //取得單號
                    sheetno = "";
                    sheetno = getSheetNoProcedure(engine, ds.Tables[0].Rows[0][3].ToString());
                    //Jack
                    //writeLog(new Exception("saveProcedure_getSheetNoProcedure_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + flowOID + "/" + (string)Session["UserID"]));
                    //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, flowOID, "E", "saveProcedure_getSheetNoProcedure");



                    //寫入原稿資料夾
                    Hashtable hs = new Hashtable();
                    sql = "select * from SMWGAAA";
                    DataSet oriFormVar = engine.getDataSet(sql, "TEMP");
                    for (int i = 0; i < oriFormVar.Tables[0].Rows.Count; i++)
                    {
                        hs.Add(oriFormVar.Tables[0].Rows[i]["SMWGAAA003"].ToString(), "");
                    }
                    getOriginalFormVariables(engine, currentObject, hs);

                    sql = "select * from SMWYAAA where (1=2)";
                    DataSet oriy = engine.getDataSet(sql, "TEMP");
                    DataRow dr = oriy.Tables[0].NewRow();
                    dr["SMWYAAA001"] = IDProcessor.getID("");
                    dr["SMWYAAA002"] = sheetno;
                    dr["SMWYAAA003"] = flowid;
                    dr["SMWYAAA004"] = flowname;
                    dr["SMWYAAA005"] = flowOID;
                    dr["SMWYAAA006"] = subject;
                    dr["SMWYAAA007"] = info.important;
                    dr["SMWYAAA008"] = info.fillerID;
                    dr["SMWYAAA009"] = info.fillerName;
                    dr["SMWYAAA010"] = info.fillerOrgID;
                    dr["SMWYAAA011"] = info.fillerOrgName;
                    dr["SMWYAAA012"] = info.ownerID;
                    dr["SMWYAAA013"] = info.ownerName;
                    dr["SMWYAAA014"] = info.ownerOrgID;
                    dr["SMWYAAA015"] = info.ownerOrgName;
                    dr["SMWYAAA016"] = info.submitOrgID;
                    dr["SMWYAAA017"] = DateTimeUtility.getSystemTime2(null);
                    dr["SMWYAAA018"] = wa001;
                    dr["SMWYAAA019"] = info.objectGUID;
                    dr["SMWYAAA020"] = "I";
                    dr["SMWYAAA022"] = "N";

                    for (int i = 1; i <= 20; i++)
                    {
                        string tag = "SMWYAAA1" + string.Format("{0:00}", i);
                        string varName = "";
                        bool hasFound = false;
                        for (int j = 0; j < oriFormVar.Tables[0].Rows.Count; j++)
                        {
                            if (oriFormVar.Tables[0].Rows[j]["SMWGAAA002"].ToString().Equals(tag))
                            {
                                hasFound = true;
                                varName = oriFormVar.Tables[0].Rows[j]["SMWGAAA003"].ToString();
                                break;
                            }
                        }
                        if (hasFound)
                        {
                            string vle = "";
                            IDictionaryEnumerator ie = hs.GetEnumerator();
                            while (ie.MoveNext())
                            {
                                string key = (string)ie.Key;
                                string vl = (string)ie.Value;
                                if (key.Equals(varName))
                                {
                                    vle = vl;
                                    break;
                                }
                            }
                            dr[tag] = vle;
                        }
                        else
                        {
                            dr[tag] = "";
                        }
                    }
                    dr["D_INSERTUSER"] = (string)Session["UserGUID"];
                    dr["D_INSERTTIME"] = DateTimeUtility.getSystemTime2(null);
                    dr["D_MODIFYUSER"] = "";
                    dr["D_MODIFYTIME"] = "";

                    oriy.Tables[0].Rows.Add(dr);
                    if (!engine.updateDataSet(oriy))
                    {
                        throw new Exception(engine.errorString.Replace("\n", "\\n"));
                    }

                    //處理附件
                    attachFile.engine = engine;
                    attachFile.setJobID(currentObject.getData(getObjectGUIDField()));
                    attachFile.confirmSave(ProcessPageID, sheetno);
                    attachFile.saveFile();
                }

                //國昌20090304移至此, 避免GP處理時間過久造成所寫入table被lock太久
                checkPoint("ECP Start Save Form Data to DB",modeInvoke);
                saveDB(engine, currentObject, oriObject, UIStatus);
                //Jack
                //writeLog(new Exception("saveProcedure_saveDB_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + flowOID + "/" + (string)Session["UserID"]));
                //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, flowOID, "E", "saveProcedure_saveDB");

                checkPoint("ECP  Save DB Done , Start process DATARELATION" , modeInvoke);
                //處理DATARELATION
                if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(InitModify)) || (UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(GeneralNew)) || (UIStatus.Equals(GeneralModify)))
                {

                    string sql = "select SMWAAAA001, SMWAAAA030 from SMWAAAA where SMWAAAA002='" + ProcessPageID + "'";
                    DataSet ds = engine.getDataSet(sql, "TEMP");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        //throw new Exception("找不到此作業畫面設定檔");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError13", "找不到此作業畫面設定檔"));
                    }

                    string processGUID = ds.Tables[0].Rows[0][0].ToString();
                    if ((UIStatus.Equals(GeneralNew)) || (UIStatus.Equals(GeneralModify)))
                    {
                        afterSendMode = ds.Tables[0].Rows[0][1].ToString();
                    }

                    if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(GeneralNew)))
                    {
                        //新增
                        sql = "insert into DATARELATION(GUID, LASTGUID, CURRENTGUID, PROCESSGUID, FLOWGUID, FLOWID, AGENTSCHEMA, DATA_STATUS, UPDATEUSER, UPDATETIME) values(";
                        sql += "'" + IDProcessor.getID("") + "',";
                        sql += "'',";
                        sql += "'" + currentObject.getData("GUID") + "',";
                        sql += "'" + processGUID + "',";
                        sql += "'" + flowOID + "',";
                        sql += "'" + flowid + "',";
                        sql += "'" + AgentSchema + "',";
                        string isMaintain = (string)getSession("IsMaintain");
                        if (isMaintain.Equals("Y"))
                        {
                            sql += "'A',";
                        }
                        else
                        {
                            sql += "'R',";
                        }
                        sql += "'" + (string)Session["UserGUID"] + "',";
                        sql += "'" + DateTimeUtility.getSystemTime2(null) + "')";
                        if (!engine.executeSQL(sql))
                        {
                            throw new Exception(engine.errorString);
                        }
                    }
                    else if ((UIStatus.Equals(InitModify)) || (UIStatus.Equals(GeneralModify)))
                    {
                        //修改(不包含流程中修改)

                        sql = "insert into DATARELATION(GUID, LASTGUID, CURRENTGUID, PROCESSGUID, FLOWGUID, FLOWID, AGENTSCHEMA, DATA_STATUS, UPDATEUSER, UPDATETIME) values(";
                        sql += "'" + IDProcessor.getID("") + "',";
                        sql += "'" + oriObject.getData("GUID") + "',";
                        sql += "'" + currentObject.getData("GUID") + "',";
                        sql += "'" + processGUID + "',";
                        sql += "'" + flowOID + "',";
                        sql += "'" + flowid + "',";
                        sql += "'" + AgentSchema + "',";
                        sql += "'M',";
                        sql += "'" + (string)Session["UserGUID"] + "',";
                        sql += "'" + DateTimeUtility.getSystemTime2(null) + "')";
                        if (!engine.executeSQL(sql))
                        {
                            throw new Exception(engine.errorString);
                        }

                    }
                }

                //2009/07/07 Edward: GeneralNew, GeneralModify開放afterSend
                if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(InitModify)) || (UIStatus.Equals(GeneralNew)) || (UIStatus.Equals(GeneralModify)))
                //if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(InitModify)))
                {
                    //流程送出後呼叫
                    afterSend(engine, currentObject);
                }
                //Jack
                //writeLog(new Exception("saveProcedure_afterSend_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + flowOID + "/" + (string)Session["UserID"]));
                //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, flowOID, "E", "saveProcedure_afterSend");


                //2009/07/15 Edward: 送出時是否刪除草稿
                string isDeleteDraft = (string)getSession("IsDeleteDraft");
                if ((isDeleteDraft!=null) && (isDeleteDraft.Equals("Y")))
                {
                    string draftguid = (string)getSession("READDRAFTGUID");
                    if ((draftguid != null) && (!draftguid.Equals("")))
                    {
                        string sql = "delete from EFORMDRAFT where GUID='" + draftguid + "'";
                        if (!engine.executeSQL(sql))
                        {
                            throw new Exception(engine.errorString);
                        }
                    }
                }
                engine.commit();
                engine.close();
                checkPoint("ECP Engine Commit , Start After Send Form Process" , modeInvoke);
                //若非送流程, 呼叫公用物件更新資料並且備份
                if ((UIStatus.Equals(GeneralNew)) || (UIStatus.Equals(GeneralModify)))
                {
                    engine = factory.getEngine(engineType, connectString);
                    DataOperate dot = new DataOperate(engine);
                    dot.process(flowOID, "Y", Request.ApplicationPath, Server);
                    engine.close();
                    //afterApprove(engine, currentObject, "Y");
                }

                //儲存成功
                if (UIStatus.Equals(GeneralNew))
                {
                    //Response.Write("alert('"+NewSuccessMsg+"');");
                    MessageBox(NewSuccessMsg);
                }
                else if (UIStatus.Equals(GeneralModify))
                {
                    //Response.Write("alert('" + ModifySuccessMsg + "');");
                    MessageBox(ModifySuccessMsg);
                }
                else if (UIStatus.Equals(InitNew))
                {
                    //Response.Write("alert('" + ProcessNewSuccessMsg + "');");
                    MessageBox(ProcessNewSuccessMsg);
                }
                else if (UIStatus.Equals(InitModify))
                {
                    //Response.Write("alert('" + ProcessModifySuccessMsg + "');");
                    MessageBox(ProcessModifySuccessMsg);
                }
                else
                {
                    //Response.Write("alert('" + DataProcessSuccessMsg + "');");
                    MessageBox(DataProcessSuccessMsg);
                }

                if (((string)getSession("ParentPanelID")).Equals(""))
                {
                    if (afterSendMode.Equals("0"))
                    {
                        closeSilence();
                    }
                    else if (afterSendMode.Equals("1"))
                    {
                        string imageURL = "";

                        engine = factory.getEngine(engineType, connectString);
                        if (isShowFlow)
                        {

                            string filename = IDProcessor.getID("") + ".jpg";
                            string localFilePath = Server.MapPath("~/tempFolder/" + filename);
                            checkPoint("Start fetchFlowDiagram",modeInvoke);
                            fetchFlowDiagram(engine, (string)getSession("FlowGUID"), localFilePath);
                            checkPoint("Start fetchFlowDiagram Done", modeInvoke);
                            imageURL = Server.UrlEncode(Request.ApplicationPath + "/tempFolder/" + filename);
                        }
                        else
                        {
                            imageURL = "";
                        }
                        checkPoint("Start getSignOpinion", modeInvoke);
                        string opinionHTML = getSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), SignOpinion.SHOW_ALL, (DataRow)getSession("SignOpinionSetting"));
                        checkPoint("Start getSignOpinion Done", modeInvoke);
                        engine.close();
                        setSession("OpinionHTML", opinionHTML);


                        string urls = Page.ResolveUrl("~/Program/DSCGPFlowService/Public/ViewOpinion.aspx?ImageURL=" + imageURL + "&processSerialNumber=" + flowOID + "&opinionType=SHOW_ALL&SourceURL=" + Request.ServerVariables["PATH_INFO"] + "&PGID=" + this.PageUniqueID);
                        //base.showPanelWindow("流程圖", Request.ApplicationPath + "/tempFolder/" + filename, 0, 0, "", true, true);                        
                        Response.Write("window.location.href='" + urls + "';");
                    }
                    else if (afterSendMode.Equals("2"))
                    {
                        Response.Write("window.location.reload();");
                    }
                    else if (afterSendMode.Equals("3"))
                    {
                        if ((UIStatus.Equals(GeneralNew)) || (UIStatus.Equals(GeneralModify)))
                        {
                            Response.Write("document.getElementById('FTB').style.display='none';");
                        }
                        else
                        {
                            string urls = Request.ServerVariables["PATH_INFO"];
                            urls += "?";
                            urls += "ParentPanelID=" + (string)getSession("ParentPanelID");
                            urls += "&CurPanelID=" + (string)getSession("CurPanelID");
                            urls += "&DataListID=" + (string)getSession("DataListID");
                            urls += "&UIType=Process";
                            urls += "&ObjectGUID=" + currentObject.getData("GUID");
                            urls += "&HistoryGUID=";
                            urls += "&FlowGUID=" + (string)getSession("FlowGUID");
                            urls += "&ACTID=";
                            urls += "&PDID=" + (string)getSession("PDID");
                            urls += "&PDVer=&ACTName=";
                            urls += "&UIStatus=3&WorkItemOID=&TargetWorkItemOID=&workAssignmentOID=&assignmentType=&reassignmentType=&manualReassignType=&IsAllowWithDraw=true&IsMaintain=N";
                            urls = com.dsc.kernal.utility.Utility.URLParameterEncode(urls);
                            Response.Write("window.location.href='" + urls + "';");
                        }
                    }
                    else if (afterSendMode.Equals("4"))
                    {
                        setSession("UIStatus", GeneralModify);
                        setSession("FlowGUID", "");
                        //新增狀態Session("ObjectGUID")為空值 GUID重新產生
                        if ((string)getSession("ObjectGUID") != "")
                        {
                            currentObject.setData("GUID", (string)getSession("ObjectGUID"));
                        }
                        else
                        {
                            setSession("ObjectGUID", currentObject.getData("GUID"));
                        }
                        currentObject.timeStamp = com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null);
                        currentObject.setData("IS_LOCK", "N");
                        setSession("oriObject", currentObject);

                        DataObject newObject = null;
                        IOFactory myfactory = new IOFactory();
                        engine = myfactory.getEngine((string)Session["engineType"], (string)Session["connectString"]);
                        try
                        {
                            checkPoint("afterSendMode 4 Process", modeInvoke);
                            newObject = readDB(engine, currentObject.getData(getObjectGUIDField()), (string)getSession("UIStatus"));
                            XMLProcessor xp = new XMLProcessor(agentXML, 1);
                            cloneObject(newObject, xp);
                            showData(engine, newObject);
                            setSession("currentObject", newObject);
                            initHistory(engine, newObject, (string)getSession("UIStatus"));
                            engine.close();
                            checkPoint("afterSendMode 4 Process Done", modeInvoke);
                        }
                        catch (Exception ue)
                        {
                            if (engine != null) { engine.close(); }
                        }
                    }
                }
                else
                {
                    if (afterSendMode.Equals("0"))
                    {
                        closeRefresh();
                    }
                    else if (afterSendMode.Equals("1"))
                    {
                        string imageURL = "";

                        engine = factory.getEngine(engineType, connectString);
                        if (isShowFlow)
                        {

                            string filename = IDProcessor.getID("") + ".jpg";
                            string localFilePath = Server.MapPath("~/tempFolder/" + filename);
                            checkPoint("Start fetchFlowDiagram", modeInvoke);
                            fetchFlowDiagram(engine, (string)getSession("FlowGUID"), localFilePath);
                            checkPoint("Start fetchFlowDiagram Done", modeInvoke);
                            imageURL = Server.UrlEncode(Request.ApplicationPath + "/tempFolder/" + filename);


                        }
                        else
                        {
                            imageURL = "";
                        }

                        string opinionHTML = getSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), SignOpinion.SHOW_ALL, (DataRow)getSession("SignOpinionSetting"));
                        engine.close();
                        setSession("OpinionHTML", opinionHTML);

                        string urls = Page.ResolveUrl("~/Program/DSCGPFlowService/Public/ViewOpinion.aspx?ImageURL=" + imageURL + "&processSerialNumber=" + flowOID + "&opinionType=SHOW_ALL&SourceURL=" + Request.ServerVariables["PATH_INFO"] + "&PGID=" + this.PageUniqueID);
                        urls = com.dsc.kernal.utility.Utility.URLParameterEncode(urls);
                        //base.showPanelWindow("流程圖", Request.ApplicationPath + "/tempFolder/" + filename, 0, 0, "", true, true);
                        Response.Write("window.location.href='" + urls + "';");
                    }
                    else if (afterSendMode.Equals("2"))
                    {
                        Response.Write("window.location.reload();");
                    }
                    else if (afterSendMode.Equals("3"))
                    {
                        if ((UIStatus.Equals(GeneralNew)) || (UIStatus.Equals(GeneralModify)))
                        {
                            refreshDataList();
                            Response.Write("document.getElementById('FTB').style.display='none';");
                        }
                        else
                        {
                            closeRefresh();
                            string urls = Request.ServerVariables["PATH_INFO"];
                            urls += "?";
                            urls += "ParentPanelID=" + (string)getSession("ParentPanelID");
                            urls += "&CurPanelID=" + (string)getSession("CurPanelID");
                            urls += "&DataListID=" + (string)getSession("DataListID");
                            urls += "&UIType=Process";
                            urls += "&ObjectGUID=" + currentObject.getData("GUID");
                            urls += "&HistoryGUID=";
                            urls += "&FlowGUID=" + (string)getSession("FlowGUID");
                            urls += "&ACTID=";
                            urls += "&PDID=" + (string)getSession("PDID");
                            urls += "&PDVer=&ACTName=";
                            urls += "&UIStatus=3&WorkItemOID=&TargetWorkItemOID=&workAssignmentOID=&assignmentType=&reassignmentType=&manualReassignType=&IsAllowWithDraw=true&IsMaintain=N";
                            base.showPanelWindow(flowname + "(" + sheetno + ")", urls, 0, 0, "", true, true);
                        }
                    }
                    else if (afterSendMode.Equals("4")) 
                    {
                        setSession("UIStatus", GeneralModify);
                        setSession("FlowGUID", "");
                        //新增狀態Session("ObjectGUID")為空值 GUID重新產生
                        if ((string)getSession("ObjectGUID") != "")
                        {
                            currentObject.setData("GUID", (string)getSession("ObjectGUID"));
                        }
                        else
                        {
                            setSession("ObjectGUID", currentObject.getData("GUID"));
                        }
                        currentObject.timeStamp = com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null);
                        currentObject.setData("IS_LOCK", "N");
                        setSession("oriObject", currentObject);

                        DataObject newObject = null;
                        IOFactory myfactory = new IOFactory();
                        engine = myfactory.getEngine((string)Session["engineType"], (string)Session["connectString"]);
                        try
                        {
                            newObject = readDB(engine, currentObject.getData(getObjectGUIDField()), (string)getSession("UIStatus"));
                            XMLProcessor xp = new XMLProcessor(agentXML, 1);
                            cloneObject(newObject, xp);
                            showData(engine, newObject);
                            setSession("currentObject", newObject);
                            initHistory(engine, newObject, (string)getSession("UIStatus"));
                            engine.close();
                        }
                        catch (Exception ue)
                        {
                            if (engine != null) { engine.close(); }
                        }
                    }
                }
                checkPoint("END", modeInvoke);
            }
            catch (Exception ue)
            {
                try
                {
                    engine.rollback();
                }
                catch { };
                try
                {
                    engine.close();
                }
                catch { };
                //if (ue.Message.Equals("畫面欄位填寫錯誤"))
                if (ue.Message.Equals(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError14", "畫面欄位填寫錯誤")))
                {
                    processErrorMessage(0, ue);
                }
                else
                {
                    processErrorMessage(errorLevel, ue);
                }
            }
            //Jack
            //writeLog(new Exception("saveProcedure_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
            //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, "-------------------------", "E", "saveProcedure");

        }

        /// <summary>
        /// 簽核處理程序
        /// </summary>
        protected virtual void signProcedure()
        {
            //Jack
            //writeLog(new Exception("signProcedure_Star/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
            //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, (string)getSession("FlowGUID"), "S", "signProcedure");
            checkPoint("SignProcedure Start" , modeSignProc);
            AbstractEngine engine = null;
            string flowOID = (string)getSession("FlowGUID"); //流程實例序號
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);
                setSession("progressEngine", engine);
                engine.startTransaction(IsolationLevel.ReadCommitted);

                com.dsc.kernal.global.GlobalCache.setValue(flowOID, engine);

                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("currentObject");
                com.dsc.kernal.databean.DataObject oriObject = (com.dsc.kernal.databean.DataObject)getSession("oriObject");

                string UIStatus = (string)getSession("UIStatus");

                //start: 模擬EasyFlow 05/26 edward
                string simMode = (string)getSession("SIMMODE");
                if (simMode.Equals("1"))
                {
                    string tempSignType = (string)getSession("tempSignType");
                    if (tempSignType.Equals("0"))
                    {
                        if (SignResultField.ValueText.Split(new char[] { ';' })[0].Equals("Y"))
                        {
                            Session["signProcess"] = "Y";
                        }
                        else
                        {
                            Session["signProcess"] = "N";
                        }
                    }
                    else
                    {
                        Session["signProcess"] = "Y";
                    }

                    Session["tempSignResult"] = SignResultField.ReadOnlyText;
                    Session["tempSignOpinion"] = SignOpinionField.ValueText;

                    bool signCheckResult = (bool)Session["signCheckResult"];
                    if (!signCheckResult)
                    {
                        return;
                    }
                }
                else if (simMode.Equals("2"))
                {
                    Session["tempSignOpinion"] = SignOpinionField.ValueText;
                }
                //end: 模擬EasyFlow 05/26 edward

                string signProcessResult = (string)Session["signProcess"];

                //送單程序

                string afterSendMode = (string)getSession("AfterSignProcess"); //送簽後動作
                string flowid = (string)getSession("PDID"); //流程定義代號
                string flowname = ""; //流程定義名稱

                if (signProcessResult.Equals("Y"))
                {
                    errMsg = new ArrayList();
                    //bool ans = checkFieldData(engine, currentObject);

                    //if (!ans)
                    //{
                    //    throw new Exception(showErrorMessage());
                    //}

                    saveData(engine, currentObject);
                    checkPoint("Save Data Done", modeSignProc);
                    //Jack
                    //writeLog(new Exception("signProcedure_saveData_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
                    //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, (string)getSession("FlowGUID"), "E", "signProcedure_saveData");

                    if (UIStatus.Equals(ProcessNew))
                    {
                        bool isProcessNewRepeat = (bool)getSession("ProcessNewRepeat");
                        if (!isProcessNewRepeat)
                        {
                            currentObject.INSERTUSER = (string)Session["UserGUID"];
                            currentObject.INSERTTIME = com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null);
                            currentObject.setData("IS_LOCK", "A");
                        }
                    }
                    else if ((UIStatus.Equals(ProcessModify)) || (UIStatus.Equals(ProcessDelete)))
                    {
                        //這裡直接修改內容, 不用改狀態
                    }
                    string returnValue = currentObject.checkData();

                    if (!returnValue.Equals(""))
                    {
                        throw new Exception(returnValue);
                    }

                    saveDB(engine, currentObject, oriObject, UIStatus);
                    checkPoint("Save DB Done", modeSignProc);
                    //Jack
                    //writeLog(new Exception("signProcedure_saveDB_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
                    //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, (string)getSession("FlowGUID"), "E", "signProcedure_saveDB");



                    //這裡要檢查此關卡是否設定所有參考流程結束
                    string checkWaitForReference = (string)getSession("WaitForReference");
                    if (checkWaitForReference.Equals("Y"))
                    {
                        //檢查是否有參考流程
                        string sch = "select FORMRELATION.GUID from FORMRELATION left outer join DATARELATION on CURGUID=CURRENTGUID where ORIGUID='" + currentObject.getData(getObjectGUIDField()) + "' and RELATIONTYPE='1' and isnull(DATA_STATUS,'N')<>'Y'";
                        DataSet che = engine.getDataSet(sch, "TEMP");
                        if (che.Tables[0].Rows.Count > 0)
                        {
                            //throw new Exception("所發起的參考流程尚未全部簽核完畢");
                            throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError15", "所發起的參考流程尚未全部簽核完畢"));
                        }
                    }

                    //處理附件
                    //要注意如果找不到對應的資料物件, 那就在FORMRELATION中找
                    string ssf = "select SMWYAAA002 from SMWYAAA where SMWYAAA005='" + (string)getSession("FlowGUID") + "'";
                    DataSet atf = engine.getDataSet(ssf, "TEMP");

                    attachFile.engine = engine;
                    attachFile.setJobID(currentObject.getData(getObjectGUIDField()));
                    //若atf有資料, 代表為一般流程, 若無資料, 代表為參考流程, 無單號, 直接以流程實力序號
                    if (atf.Tables[0].Rows.Count > 0)
                    {
                        attachFile.confirmSave(ProcessPageID, atf.Tables[0].Rows[0][0].ToString());
                    }
                    else
                    {
                        attachFile.confirmSave(ProcessPageID, (string)getSession("FlowGUID"));
                    }
                    attachFile.saveFile();

                    string sql = "";
                    DataSet ds = null;

                    //處理DATARELATION
                    if (UIStatus.Equals(ProcessNew))
                    {
                        bool isProcessNewRepeat = (bool)getSession("ProcessNewRepeat");
                        if (!isProcessNewRepeat)
                        {
                            sql = "select SMWAAAA001 from SMWAAAA where SMWAAAA002='" + ProcessPageID + "'";
                            ds = engine.getDataSet(sql, "TEMP");
                            if (ds.Tables[0].Rows.Count == 0)
                            {
                                //throw new Exception("找不到此作業畫面設定檔");
                                throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError13", "找不到此作業畫面設定檔"));
                            }

                            string processGUID = ds.Tables[0].Rows[0][0].ToString();

                            //新增
                            sql = "insert into DATARELATION(GUID, LASTGUID, CURRENTGUID, PROCESSGUID, FLOWGUID, FLOWID, AGENTSCHEMA, DATA_STATUS, UPDATEUSER, UPDATETIME) values(";
                            sql += "'" + IDProcessor.getID("") + "',";
                            sql += "'',";
                            sql += "'" + currentObject.getData("GUID") + "',";
                            sql += "'" + processGUID + "',";
                            sql += "'" + flowOID + "',";
                            sql += "'" + flowid + "',";
                            sql += "'" + AgentSchema + "',";
                            sql += "'A',";
                            sql += "'" + (string)Session["UserGUID"] + "',";
                            sql += "'" + DateTimeUtility.getSystemTime2(null) + "')";
                            if (!engine.executeSQL(sql))
                            {
                                throw new Exception(engine.errorString);
                            }

                            //寫到FORMRELATION
                            sql = "select SMWYAAA019, SMWAAAA003, SMWAAAA002 from SMWYAAA inner join SMWAAAA on SMWYAAA018=SMWAAAA001 where SMWYAAA005='" + (string)getSession("FlowGUID") + "'";
                            DataSet gst = engine.getDataSet(sql, "TEMP");

                            sql = "select SMWAAAA003 from SMWAAAA where SMWAAAA002='" + ProcessPageID + "'";
                            DataSet curset = engine.getDataSet(sql, "TEMP");

                            //若gst有資料, 代表為正常流程的ProcessNew, 否則為發起參考流程後的ProcessNew
                            if (gst.Tables[0].Rows.Count > 0)
                            {
                                sql = "insert into FORMRELATION(GUID, ORIGUID, CURGUID, FLOWGUID, RELATIONTYPE, ORIFORMNAME, CURFORMNAME, CREATETIME, ORIPAGETYPE, CURPAGETYPE, FLOWID) values(";
                                sql += "'" + IDProcessor.getID("") + "',";
                                sql += "'" + gst.Tables[0].Rows[0][0].ToString() + "',";
                                sql += "'" + currentObject.getData(getObjectGUIDField()) + "',";
                                sql += "'" + (string)getSession("FlowGUID") + "',";
                                sql += "'0',";
                                sql += "'" + gst.Tables[0].Rows[0][1].ToString() + "',";
                                sql += "'" + curset.Tables[0].Rows[0][0].ToString() + "',";
                                sql += "'" + DateTimeUtility.getSystemTime2(null) + "',";
                                sql += "'" + gst.Tables[0].Rows[0][2].ToString() + "',";
                                sql += "'" + ProcessPageID + "',";
                                sql += "'" + (string)getSession("PDID") + "')";
                                if (!engine.executeSQL(sql))
                                {
                                    throw new Exception(engine.errorString);
                                }
                            }
                            else
                            {
                                sql = "select * from FORMRELATION where FLOWGUID='" + (string)getSession("FlowGUID") + "' and CURGUID=''";
                                DataSet dsr = engine.getDataSet(sql, "TEMP");
                                if (dsr.Tables[0].Rows.Count > 0)
                                {
                                    dsr.Tables[0].Rows[0]["CURGUID"] = currentObject.getData(getObjectGUIDField());
                                    dsr.Tables[0].Rows[0]["CURFORMNAME"] = curset.Tables[0].Rows[0][0].ToString();
                                    dsr.Tables[0].Rows[0]["CURPAGETYPE"] = ProcessPageID;
                                    if (!engine.updateDataSet(dsr))
                                    {
                                        throw new Exception(engine.errorString);
                                    }
                                }
                                else
                                {
                                    //throw new Exception("並未找到發起參考流程的資料");
                                    throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError16", "並未找到發起參考流程的資料"));
                                }
                            }
                        }
                    }

                    //代理轉派動作
                    reassignmentSubstitute(engine);
                    checkPoint("reassignmentSubstitute", modeSignProc);
                    string addSignXml = "";
                    string IsAddSign = (string)getSession("IsAddSign");
                    if (IsAddSign.Equals("AFTER"))
                    {
                        addSignXml = getAddSignXml();

                        //簽核前呼叫: 可以在此新增或修改加簽的資料等等
                        addSignXml = beforeSign(engine, true, addSignXml);

                        //加簽
                        if (addSignXml.Length > 0)
                        {
                            addCustomActivity(engine, (string)getSession("WorkItemOID"), true, addSignXml, "", "");
                        }
                    }

                    //取得流程定義代號, 要注意ProcessNew
                    sql = "select SMWBAAA001, SMWYAAA001 from SMWBAAA inner join SMWYAAA on SMWBAAA003=SMWYAAA003 where SMWYAAA005='" + (string)getSession("FlowGUID") + "'";
                    ds = engine.getDataSet(sql, "TEMP");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        //有可能是發起參考流程, 此時會有PDID
                        sql = "select SMWBAAA001 from SMWBAAA where SMWBAAA003='" + (string)getSession("PDID") + "'";
                        ds = engine.getDataSet(sql, "TEMP");
                        if (ds.Tables[0].Rows.Count == 0)
                        {
                            //throw new Exception("找不到此作業畫面所要發起的流程定義");
                            throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError12", "找不到此作業畫面所要發起的流程定義"));
                        }
                    }

                    //取得流程預設參數
                    Hashtable param = getProcessParameter(engine, ds.Tables[0].Rows[0][0].ToString());

                    //取得流程參數
                    string firstParam = setFlowVariables(engine, param, currentObject);

                    //取得表單參數--直接使用流程參數方式設定表單變數
                    //string formXML = setFormVariables(engine, currentObject);

                    //發起流程
                    if (!firstParam.Equals(""))
                    {
                        IDictionaryEnumerator ie = param.GetEnumerator();
                        while (ie.MoveNext())
                        {
                            string pID = (string)ie.Key;
                            string pValue = (string)ie.Value;
                            if (!pID.Equals("processSerialNumber"))
                            {
                                assignRelevantDataBySerialNo(engine, flowOID, pID, pValue);
                                checkPoint("assignRelevantDataBySerialNo", modeSignProc);
                            }
                        }
                    }
                }
                else
                {
                    //代理轉派動作
                    reassignmentSubstitute(engine);
                    checkPoint("reassignmentSubstitute", modeSignProc);                    
                }
                /*--直接使用流程參數方式設定表單變數
                if (!formXML.Equals(""))
                {
                    XMLProcessor xmlp = new XMLProcessor(formXML, 1);
                    string formID = xmlp.doc.ChildNodes[0].Name;
                    assignRelevantDataBySerialNo(engine, flowOID, formID, formXML);
                }
                */
                //engine.close();

                //簽核程序
                //engine = factory.getEngine(engineType, connectString);

                //國昌20091217: 先將目前使用者儲存到GlobalCache中，這樣在afterApprove時才可以取得使用者代號
                com.dsc.kernal.global.GlobalCache.setValue(flowOID+"USERID", base.systemInfo.UserID);

                string signProcess = (string)Session["signProcess"];
                string signResult = (string)Session["tempSignResult"];
                string signOpinion = (string)Session["tempSignOpinion"];
                checkPoint("Call EFGP ", modeSignProc);
                try
                {
                    if (signProcess.Equals("Y"))
                    {                        
                        completeWorkItem(engine, (string)getSession("WorkItemOID"), signResult, signOpinion);
                    }
                    else
                    {                        
                        terminateProcess(engine, flowOID, signResult, signOpinion);
                    }
                    //Jack
                    //writeLog(new Exception("signProcedure_C/T_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
                    //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, (string)getSession("FlowGUID"), "E", "signProcedure_C/T");
                    checkPoint("Call EFGP Done ", modeSignProc);
                }
                catch (Exception gpe)
                {
                    processErrorMessage(errorLevel, gpe, true);
                    throw new Exception("GPError");
                }

                //國昌20091217: 最後一關時，確認afterApprove後才能執行afterSign，所以先不要呼叫afterSign，移至afterApprove前呼叫。

                string sqsl = "select SMWYAAA020 from SMWYAAA where SMWYAAA005='" + flowOID + "'";
                DataSet dsaf = engine.getDataSet(sqsl, "TEMP");
                if (dsaf.Tables[0].Rows.Count > 0) //國昌20100402 mantis 0016688
                {
                    if (dsaf.Tables[0].Rows[0][0].ToString().Equals("I"))
                    {
                        //簽核後呼叫
                        afterSign(engine, currentObject, signResult);
                        checkPoint("afterSign Done ", modeSignProc);
                    }
                }
                //Jack
                //writeLog(new Exception("signProcedure_afterSign_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
                //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, (string)getSession("FlowGUID"), "E", "signProcedure_afterSign");


                engine.commit();
                engine.close();
                com.dsc.kernal.global.GlobalCache.setValue(flowOID, null);
                checkPoint("Engine Commit and Close ", modeSignProc);


                //儲存成功
                //Response.Write("alert('" + SignSuccessMsg + "');");

                string isShowFlowChart = (string)getSession("IsShowFlowChart");
                bool isShowFlow = false;
                if (isShowFlowChart.Equals("Y"))
                {
                    isShowFlow = true;
                }
                else
                {
                    isShowFlow = false;
                }

                //參數化決定是否顯示SignSuccessMsg Jack
                bool showSignSuccessMsg = true;
                SysParam sp = new SysParam(engine);
                try
                {
                    if (Convert.ToString(sp.getParam("showSignSuccessMsg")).ToUpper().Equals("FALSE"))
                    {
                        showSignSuccessMsg = false;
                    }
                }catch{}

                if (afterSendMode.Equals("1"))
                {
                    //要顯示流程圖
                    string imageURL = "";

                    engine = factory.getEngine(engineType, connectString);
                    if (isShowFlow)
                    {

                        string filename = IDProcessor.getID("") + ".jpg";
                        string localFilePath = Server.MapPath("~/tempFolder/" + filename);

                        fetchFlowDiagram(engine, (string)getSession("FlowGUID"), localFilePath);

                        imageURL = Server.UrlEncode(Request.ApplicationPath + "/tempFolder/" + filename);


                    }
                    else
                    {
                        imageURL = "";
                    }

                    DataRow opSetting = (DataRow)getSession("SignOpinionSetting");
                    string opinionHTML = "";
                    if (opSetting["SMWDAAA017"].ToString().Equals("Y"))
                    {
                        opinionHTML = getSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), SignOpinion.SHOW_ALL, (DataRow)getSession("SignOpinionSetting"));
                    }
                    engine.close();
                    setSession("OpinionHTML", opinionHTML);

                    string urls = Page.ResolveUrl("~/Program/DSCGPFlowService/Public/ViewOpinion.aspx?ImageURL=" + imageURL + "&processSerialNumber=" + flowOID + "&opinionType=SHOW_ALL&SourceURL=" + Request.ServerVariables["PATH_INFO"] + "&PGID=" + this.PageUniqueID);
                    base.showPanelWindow(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError17", "流程圖"), urls, 0, 0, "", true, true);
                    //base.showOpenWindow(urls, "流程圖", "", "", "", "", "", "1", "1", "", "", "", "", "", "", true);
                    //base.showOpenWindow(urls, com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError17", "流程圖"), "", "", "", "", "", "1", "1", "", "", "", "", "", "", true);
                    //Response.Write("window.location.href='" + urls + "';");

                }
                else if (afterSendMode.Equals("0"))
                {
                    if (showSignSuccessMsg)
                    {
                        MessageBox(SignSuccessMsg);
                    }
                }

                string ParentPanelID = (string)getSession("ParentPanelID");
                if (ParentPanelID.Equals(""))
                {
                    closeSilence();
                    //Edit by Jack 20110420 Mantis-0018996 
                    if (afterSendMode.Equals("2"))
                    {
                        if (showSignSuccessMsg)
                        {
                            MessageBox(SignSuccessMsg);
                        }
                    }
                }
                else
                {
                    if (afterSendMode.Equals("2"))
                    {
                        if (showSignSuccessMsg)
                        {
                            MessageBox(SignSuccessMsg);
                        }
                        //自動帶下一張簽核表單
                        closeRefreshClick();
                        checkPoint("closeRefreshClick", modeSignProc);

                    }
                    else
                    {
                        closeRefresh();
                    }
                }
                checkPoint("END", modeSignProc);
            }
            catch (Exception ue)
            {
                try
                {
                    engine.rollback();
                }
                catch { };
                try
                {
                    engine.close();
                    com.dsc.kernal.global.GlobalCache.setValue(flowOID, null);
                }
                catch { };
                if (!ue.Message.Equals("GPError"))
                {
                    processErrorMessage(0, ue);
                }
            }
            //Jack
            //writeLog(new Exception("signProcedure_End/" + com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null) + "/" + (string)Session["UserID"]));
            //Timestep(DateTimeUtility.getSystemTime2(null), (string)Session["UserID"], this.PageUniqueID, (string)getSession("FlowGUID"), "E", "signProcedure");

        }

        /// <summary>
        /// 簽核前處理程序
        /// </summary>
        protected virtual void beforeSignProcedure()
        {
            AbstractEngine engine = null;

            try
            {
                Session["signCheckResult"] = true;
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("currentObject");
                com.dsc.kernal.databean.DataObject oriObject = (com.dsc.kernal.databean.DataObject)getSession("oriObject");

                errMsg = new ArrayList();
                bool ans = checkFieldData(engine, currentObject);

                engine.close();

                if (!ans)
                {
                    Session["signCheckResult"] = false;
                    throw new Exception(showErrorMessage());
                }

            }
            catch (Exception ue)
            {
               Session["signCheckResult"] = false;
               try
                {
                    engine.close();
                }
                catch { };
                if (!ue.Message.Equals("GPError"))
                {
                    processErrorMessage(0, ue);
                }
            }
        }

        /// <summary>
        /// 群簽處理程序
        /// </summary>
        protected virtual void groupSignProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);


                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("currentObject");
                com.dsc.kernal.databean.DataObject oriObject = (com.dsc.kernal.databean.DataObject)getSession("oriObject");

                string UIStatus = (string)getSession("UIStatus");

                //這裡要檢查此關卡是否設定所有參考流程結束
                string checkWaitForReference = (string)getSession("WaitForReference");
                if (checkWaitForReference.Equals("Y"))
                {
                    //檢查是否有參考流程
                    string sch = "select FORMRELATION.GUID from FORMRELATION left outer join DATARELATION on CURGUID=CURRENTGUID where ORIGUID='" + currentObject.getData(getObjectGUIDField()) + "' and RELATIONTYPE='1' and isnull(DATA_STATUS,'N')<>'Y'";
                    DataSet che = engine.getDataSet(sch, "TEMP");
                    if (che.Tables[0].Rows.Count > 0)
                    {
                        //throw new Exception("所發起的參考流程尚未全部簽核完畢");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError15", "所發起的參考流程尚未全部簽核完畢"));
                    }
                }

                //送單程序

                string flowOID = (string)getSession("FlowGUID"); //流程實例序號
                string flowid = (string)getSession("PDID"); //流程定義代號
                string flowname = ""; //流程定義名稱

                //代理轉派動作
                reassignmentSubstitute(engine);

                //簽核程序
                string[] signResult = com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(Request.QueryString["signResult"]).Split(new string[] { "||" }, StringSplitOptions.None);
                string signOpinion = com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(Request.QueryString["signOpinion"]);

                if (signResult[0].Equals("Y"))
                {
                    completeWorkItem(engine, (string)getSession("WorkItemOID"), signResult[1], signOpinion);
                }
                else
                {
                    terminateProcess(engine, flowOID, signResult[1], signOpinion);
                }
                engine.close();

            }
            catch (Exception ue)
            {
                try
                {
                    //engine.rollback();
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }
        }

        /// <summary>
        /// 設定主旨
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="subjectTemplate">主旨範本格式</param>
        /// <returns>傳回的主旨</returns>
        protected virtual string getSubject(AbstractEngine engine, string subjectTemplate, string UIStatus)
        {
            //取代表單欄位
            DataObject ddo = (DataObject)getSession("currentObject");
            for (int i = 0; i < ddo.dataField.Length; i++)
            {
                string tag = "#" + ddo.dataField[i] + "#";
                string vle = ddo.getData(ddo.dataField[i]);
                subjectTemplate = subjectTemplate.Replace(tag, vle);
            }

            //取代特殊
            string status = "";
            if (UIStatus.Equals(InitNew))
            {
                //status = "新增";
                status = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError18", "新增");
            }
            else if (UIStatus.Equals(InitModify))
            {
                //status = "修改";
                status = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError19", "修改");
            }
            else if (UIStatus.Equals(InitDelete))
            {
                //status = "刪除";
                status = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError20", "刪除");
            }
            subjectTemplate = subjectTemplate.Replace("%UIStatus%", status);
            subjectTemplate = subjectTemplate.Replace("%UID%", (string)Session["UserID"]);
            subjectTemplate = subjectTemplate.Replace("%UNAME%", (string)Session["UserName"]);

            //取代畫面欄位
            for (int i = 0; i < this.Controls.Count; i++)
            {
                subjectTemplate = substituteSubjectForm(this.Controls[i], engine, subjectTemplate, UIStatus);
            }

            return subjectTemplate;
        }

        /// <summary>
        /// 讀取草稿程序
        /// </summary>
        /// <param name="draftGUID">草稿EFORMDRAFT.GUID</param>
        protected virtual void readDraftProcedure(string draftGUID)
        {
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                string sql = "select CONTENT from EFORMDRAFT where GUID='" + draftGUID + "'";
                DataSet ds = engine.getDataSet(sql, "TEMP");
                string content = ds.Tables[0].Rows[0][0].ToString();

                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("currentObject");

                currentObject.loadXML3(content);

                attachFile.engine = engine;
                attachFile.tempFolder = Server.MapPath("~/tempFolder/");
                attachFile.readFile(currentObject.getData(getObjectGUIDField()));
                attachFile.updateTable();

                beforeModifiedDraftDataObjectGUID(engine, currentObject);

                //這裡要將單頭開始的GUID改掉
                modifyDraftGUID(currentObject);

                afterReadDraft(engine, currentObject);

                showData(engine, currentObject);


                setSession("currentObject", currentObject);

                //20090715 國昌:有讀取草稿，將草稿的GUID紀錄以便送單時刪除
                setSession("READDRAFTGUID", draftGUID);

                engine.close();

                //Response.Write("alert('" + DraftReadSuccessMsg + "');");
                MessageBox(DraftReadSuccessMsg);
            }
            catch (Exception te)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, te);
            }
        }

        /// <summary>
        /// 儲存草稿程序
        /// </summary>
        protected virtual string saveDraftProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string UIStatus = (string)getSession("UIStatus");

                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);
                engine.startTransaction(IsolationLevel.ReadCommitted);

                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("currentObject");

                saveData(engine, currentObject);

                string sql = "";

                //注意ProcessNew的狀態
                if (UIStatus.Equals(ProcessNew))
                {
                    sql = "select SMWBAAA003, SMWDAAA001, SMWDAAA011,SMWDAAA012,SMWBAAA004, SMWAAAA001 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='New' and SMWDAAA004='" + (string)getSession("ACTName") + "'";
                }
                else
                {
                    sql = "select SMWBAAA003, SMWDAAA001, SMWDAAA011,SMWDAAA012,SMWBAAA004, SMWAAAA001 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Init'";
                }
                DataSet ds = engine.getDataSet(sql, "TEMP");
                if (ds.Tables[0].Rows.Count == 0)
                {
                    //throw new Exception("找不到此作業畫面所要發起的流程定義");
                    throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError12", "找不到此作業畫面所要發起的流程定義"));
                }

                //取得主旨格式
                string subjectTemp = ds.Tables[0].Rows[0][2].ToString();

                string draftSubject = "";
                try
                {
                    draftSubject = getSubject(engine, subjectTemp, "");
                }
                catch { };
                if (draftSubject.Equals(""))
                {
                    draftSubject = getDraftSubject(engine, currentObject);
                }

                //判定草稿筆數限制
                decimal draftCount = decimal.Parse((string)getSession("DraftCount"));

                if (draftCount != 0)
                {
                    sql = "select count(*) from EFORMDRAFT where FORMID='" + ProcessPageID + "' and NUSER='" + (string)Session["UserGUID"] + "'";
                    ds = engine.getDataSet(sql, "TEMP");
                    decimal curCount = decimal.Parse(ds.Tables[0].Rows[0][0].ToString());

                    if (curCount >= draftCount)
                    {
                        sql = "select GUID from EFORMDRAFT where FORMID='" + ProcessPageID + "' and NUSER='" + (string)Session["UserGUID"] + "' order by NTIME asc";
                        ds = engine.getDataSet(sql, "TEMP");
                        string tGUID = ds.Tables[0].Rows[0][0].ToString();

                        sql = "delete from EFORMDRAFT where GUID='" + tGUID + "'";
                        engine.executeSQL(sql);
                    }
                }

                string draftGUID = IDProcessor.getID("");

                sql = "select * from EFORMDRAFT where (1=2)";
                ds = engine.getDataSet(sql, "TEMP");
                DataRow dr = ds.Tables[0].NewRow();
                dr["GUID"] = draftGUID;
                dr["FORMID"] = ProcessPageID;
                dr["FORMNAME"] = getSMWAName(engine, ProcessPageID);
                dr["DESCRIPTION"] = draftSubject;
                dr["NTIME"] = DateTimeUtility.getSystemTime2(null);
                dr["NUSER"] = (string)Session["UserGUID"];
                dr["CONTENT"] = currentObject.saveXML3();
                dr["D_INSERTUSER"] = (string)Session["UserGUID"];
                dr["D_INSERTTIME"] = DateTimeUtility.getSystemTime2(null);
                dr["D_MODIFYUSER"] = "";
                dr["D_MODIFYTIME"] = "";
                ds.Tables[0].Rows.Add(dr);

                if (!engine.updateDataSet(ds))
                {
                    throw new Exception(engine.errorString);
                }

                attachFile.engine = engine;
                attachFile.setJobID(currentObject.getData(getObjectGUIDField()));
                //attachFile.confirmSave("DRAFT",currentObject.getData(getObjectGUIDField()));
                attachFile.saveFile();

                engine.commit();
                engine.close();

                //Response.Write("alert('" + DraftSaveSuccessMsg + "');");
                MessageBox(DraftSaveSuccessMsg);
                return draftGUID;
            }
            catch (Exception te)
            {
                try
                {
                    engine.rollback();
                }
                catch { };
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, te);
                return "";
            }
        }

        /// <summary>
        /// 檢視流程程序
        /// </summary>
        protected virtual void viewFlowProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string imageURL = "";

                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                //這裡要判斷是否顯示流程圖

                bool isShowFlowChart = false;
                string sql = "";
                string UIStatus = (string)getSession("UIStatus");
                if (!UIStatus.Equals(GeneralModify))
                {
                    if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormRollback)))
                    {
                        sql = "select SMWDAAA024 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Origin'";
                    }
                    else
                    {
                        sql = "select SMWDAAA024 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Display' and SMWDAAA004='" + (string)getSession("ACTName") + "'";
                    }
                    DataSet dsa = engine.getDataSet(sql, "TEMP");

                    //如果dsa.Count=0要改用預設
                    if (dsa.Tables[0].Rows.Count == 0)
                    {
                        sql = "select SMWDAAA024 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
                        dsa = engine.getDataSet(sql, "TEMP");
                        if (dsa.Tables[0].Rows.Count == 0)
                        {
                            //throw new Exception("找不到此畫面的設定檔(SMWD)");
                            throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError3", "找不到此畫面的設定檔(SMWD)"));
                        }
                    }

                    if (dsa.Tables[0].Rows[0][0].ToString().Equals("Y"))
                    {
                        isShowFlowChart = true;
                    }
                }
                string isUseHTML="N";

                if (isShowFlowChart)
                {
                    string filename = IDProcessor.getID("") + ".jpg";
                    string localFilePath = Server.MapPath("~/tempFolder/" + filename);

                    try
                    {
                        fetchFlowDiagram(engine, (string)getSession("FlowGUID"), localFilePath);

                        imageURL = Server.UrlEncode(Request.ApplicationPath + "/tempFolder/" + filename);
                    }
                    catch (Exception te)
                    {
                        imageURL = "";
                        string oldGraphHtml = getHtmlStyleGraph(engine, (string)getSession("OpinionXML"),(ArrayList)getSession("PerformDetailArray"), localFilePath);
                        if (!oldGraphHtml.Equals(""))
                        {
                            setSession("GraphHTML", oldGraphHtml);

                            isUseHTML = "Y";
                        }
                    }
                }
                else
                {
                    imageURL = "";
                }
                engine.close();

                string processSerialNumber = (string)getSession("FlowGUID");
                string opinionType = SignOpinion.SHOW_ALL;

                //base.showPanelWindow("流程簽核意見", Page.ResolveUrl("~/Program/DSCGPFlowService/Public/ViewOpinion.aspx?ImageURL="+imageURL+"&processSerialNumber="+processSerialNumber+"&opinionType="+opinionType+"&SourceURL="+Request.ServerVariables["PATH_INFO"]+"&PGID="+this.PageUniqueID) , 0, 0, "", true, true);
                base.showPanelWindow(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError21", "流程簽核意見"), Page.ResolveUrl("~/Program/DSCGPFlowService/Public/ViewOpinion.aspx?ImageURL=" + imageURL + "&processSerialNumber=" + processSerialNumber + "&opinionType=" + opinionType + "&SourceURL=" + Request.ServerVariables["PATH_INFO"] + "&PGID=" + this.PageUniqueID + "&isUseHTML=" + isUseHTML), 0, 0, "", true, true);                
                //base.showPanelWindow("流程圖", Request.ApplicationPath + "/tempFolder/" + filename, 0, 0, "", true, true);
            }
            catch (Exception te)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, te);
            }

        }

        /// <summary>
        /// 列印憑證按鈕程序
        /// </summary>
        protected virtual void printCertificateProcedure()
        {
            string url = Request.RawUrl;
            url += "&CertificateMode=1&IsAutoPrint=1";
            showOpenWindow(url, "Certificate", "0", "600", "0", "0", "0", "1", "1", "0", "0", "0", "0", "800", "0", true);
        }

        /// <summary>
        /// 撤銷流程程序
        /// </summary>
        protected virtual void withDrawProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();

                //送單程序

                string flowOID = (string)getSession("FlowGUID"); //流程實例序號


                //簽核程序
                engine = factory.getEngine(engineType, connectString);

                //由FormRelation取得目前流程所發起的參考流程
                ArrayList ary = new ArrayList();
                ArrayList tempAry = new ArrayList();

                string obGUID = (string)getSession("ObjectGUID");
                tempAry.Add(obGUID);

                while (true)
                {
                    string tempGUID = "";
                    for (int i = 0; i < tempAry.Count; i++)
                    {
                        tempGUID += "'" + (string)tempAry[i] + "',";
                    }
                    if (tempGUID.Length > 0)
                    {
                        tempGUID = tempGUID.Substring(0, tempGUID.Length - 1);
                    }
                    tempAry.Clear();

                    string sql = "select FLOWGUID, CURGUID from FORMRELATION where ORIGUID in (" + tempGUID + ")";
                    DataSet ds = engine.getDataSet(sql, "TEMP");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        break;
                    }
                    else
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            tempAry.Add(ds.Tables[0].Rows[i][1].ToString());
                            ary.Add(ds.Tables[0].Rows[i][0].ToString());
                        }
                    }

                }
                string signOpinion = (string)Session["tempSignOpinion"];

                abortProcessForSerialNo(engine, flowOID, signOpinion);

                for (int i = 0; i < ary.Count; i++)
                {
                    abortProcessForSerialNo(engine, (string)ary[i], signOpinion);
                }

                com.dsc.kernal.databean.DataObject currentObject = (com.dsc.kernal.databean.DataObject)getSession("currentObject");

                afterWithDraw(engine, currentObject);

                engine.close();

                //儲存成功
                //Response.Write("alert('" + WithDrawSuccessMsg + "');");
                MessageBox(WithDrawSuccessMsg);

                closeRefresh();
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }
        }

        /// <summary>
        /// 轉派程序, 包含代理人以及工作轉派
        /// </summary>
        protected virtual void redirectProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                //送單程序

                string flowOID = (string)getSession("FlowGUID"); //流程實例序號
                string WorkItemOID = (string)getSession("WorkItemOID");//工作項目識別號
                string WorkAssignmentOID = (string)getSession("workAssignmentOID"); //工作指派識別號

                //簽核程序
                engine = factory.getEngine(engineType, connectString);

                string assignOpinion = (string)Session["tempAssignOpinion"];
                string toUserGUID = (string)Session["tempToUserGUID"];
                string toUserID = (string)Session["tempToUserID"];
                string assignmentType = (string)Session["tempAssignmentType"];

                if (assignmentType.Equals("0"))
                {
                    //代理人轉派
                    reassignWorkItem(engine, (string)Session["UserGUID"], toUserGUID, WorkItemOID, assignOpinion);
                    //reassignWorkItemWithAssignmentType(engine, (string)Session["UserID"], toUserGUID, WorkItemOID, WorkAssignmentOID, assignOpinion, "0");
                }
                else
                {
                    //工作轉派
                    changeWorkItemOwner(engine, (string)Session["UserID"], toUserID, WorkItemOID, assignOpinion);
                }
                //reassignWorkItemWithAssignmentType(engine, (string)Session["UserID"], toUserGUID, WorkItemOID, WorkAssignmentOID, assignOpinion, assignmentType);

                engine.close();

                //儲存成功
                //Response.Write("alert('" + RedirectSuccessMsg + "');");
                MessageBox(RedirectSuccessMsg);

                closeRefresh();
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }
        }

        /// <summary>
        /// 退回重辦程序
        /// </summary>
        protected virtual void rejectProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                //代理轉派動作
                reassignmentSubstitute(engine);

                //送單程序

                string flowOID = (string)getSession("FlowGUID"); //流程實例序號
                string WorkItemOID = (string)getSession("WorkItemOID");//工作項目識別號


                string ACTID = fetchActivityIDFromWorkItemOID(engine, WorkItemOID, (string)getSession("PDID"), (string)Session["UserID"]);

                //簽核程序
                engine = factory.getEngine(engineType, connectString);

                string backActID = (string)Session["tempBackActID"];
                string backOpinion = (string)Session["tempBackOpinion"];
                string backType = (string)Session["tempBackType"];


                reexecuteActivity(engine, (string)Session["UserID"], flowOID, WorkItemOID, ACTID, backActID, backOpinion, backType);

                engine.close();

                //儲存成功
                //Response.Write("alert('" + RejectSuccessMsg + "');");
                MessageBox(RejectSuccessMsg);

                closeRefresh();
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }
        }

        /// <summary>
        /// 取回重辦程序
        /// </summary>
        protected virtual void reGetProcedure()
        {
            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                //送單程序

                string flowOID = (string)getSession("FlowGUID"); //流程實例序號
                //這裡是要取到對方的OID
                string targetWorkItemOID = (string)getSession("TargetWorkItemOID"); //轉派後工作項目識別號

                //簽核程序
                engine = factory.getEngine(engineType, connectString);

                string signOpinion = (string)Session["tempSignOpinion"];

                retrieveWorkAssignment(engine, (string)Session["UserID"], targetWorkItemOID, signOpinion);

                engine.close();

                //儲存成功
                //Response.Write("alert('" + ReGetSuccessMsg + "');");
                MessageBox(ReGetSuccessMsg);

                closeRefresh();
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }
        }

        /// <summary>
        /// 撤簽程序
        /// </summary>
        protected virtual void rollbackProcedure()
        {

            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                //送單程序

                string flowOID = (string)getSession("FlowGUID"); //流程實例序號
                //這裡是要取到可撤簽的OID
                string targetWorkItemOID = (string)getSession("RollbackableWorkItemOID"); //可撤簽工作項目識別號

                //簽核程序
                engine = factory.getEngine(engineType, connectString);

                rollbackActivity(engine, (string)Session["UserID"], targetWorkItemOID);

                engine.close();

                //儲存成功
                //Response.Write("alert('" + ReGetSuccessMsg + "');");
                MessageBox(RollbackSuccessMsg);

                closeRefresh();
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }

        }

        /// <summary>
        /// 轉寄程序
        /// </summary>
        protected virtual void forwardProcedure()
        {

            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                //送單程序
                
                string workItemOID = (string)getSession("WorkItemOID"); //工作項目識別號

                //程序
                engine = factory.getEngine(engineType, connectString);

                string[] acceptorOID = (string[])Session["tempAcceptorOID"];
                string noticeType = (string)Session["tempNoticeType"];

                if (!workItemOID.Equals(""))
                {
                    forwardWorkItem(engine, (string)Session["UserID"], workItemOID, acceptorOID, noticeType);
                }
                else
                {
                    //國昌20100614:自訂的通知（原稿發起）打開
                    DataRow dsr=null;
                    string sql = "select * from CUSTOMENOTICE where (1=2)";
                    DataSet tsd = engine.getDataSet(sql, "TEMP");

                    sql="select * from SMWYAAA where SMWYAAA005='"+(string)getSession("FlowGUID")+"'";
                    DataSet usd=engine.getDataSet(sql, "TEMP");
                    string flowname=usd.Tables[0].Rows[0]["SMWYAAA004"].ToString();
                    string subject=usd.Tables[0].Rows[0]["SMWYAAA006"].ToString();
                    dsr=usd.Tables[0].Rows[0];

                    for (int i = 0; i < acceptorOID.Length; i++)
                    {
                        DataRow dr = tsd.Tables[0].NewRow();
                        dr["GUID"] = IDProcessor.getID("");
                        dr["OBJECTGUID"] = (string)getSession("ObjectGUID");
                        dr["PDID"] = (string)getSession("PDID");
                        dr["PROCESSSERIALNUMBER"] = (string)getSession("FlowGUID");
                        dr["VIEWTIMES"] = "U";
                        dr["SENDERID"] = (string)Session["UserID"];
                        dr["SENDERNAME"] = (string)Session["UserName"];
                        dr["SENDTIME"] = com.dsc.kernal.utility.DateTimeUtility.getSystemTime2(null);
                        dr["RECEIVERID"] = acceptorOID[i];
                        dr["PROCESSNAME"] = flowname;
                        dr["SUBJECT"] = subject;
                        dr["PROCESSTYPE"] = "INFO";
                        dr["RELATEDSTATE"] = "";

                        tsd.Tables[0].Rows.Add(dr);
                    }

                    if (!engine.updateDataSet(tsd))
                    {
                        throw new Exception(engine.errorString);
                    }

                    customAfterForward(engine, dsr, acceptorOID);
                }
                engine.close();

                //儲存成功
                //Response.Write("alert('" + ForwardSuccessMsg + "');");
                MessageBox(ForwardSuccessMsg);

                closeRefresh();
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }

        }

        /// <summary>
        /// 發起參考流程程序
        /// </summary>
        protected virtual void dispatchFlowProcedure()
        {

            AbstractEngine engine = null;
            try
            {
                string connectString = (string)Session["connectString"];
                string engineType = (string)Session["engineType"];

                IOFactory factory = new IOFactory();
                engine = factory.getEngine(engineType, connectString);

                //送單程序

                string workItemOID = (string)getSession("WorkItemOID"); //工作項目識別號

                //程序
                engine = factory.getEngine(engineType, connectString);

                string[] acceptorOID = (string[])Session["tempSenderOID"];
                string subject = (string)Session["tempSubject"];
                string flowid = (string)Session["tempFlowID"];
                string importance = (string)Session["tempImportance"];

                string sql = "select SMWAAAA003 from SMWAAAA where SMWAAAA002='" + ProcessPageID + "'";
                DataSet curset = engine.getDataSet(sql, "TEMP");

                for (int i = 0; i < acceptorOID.Length; i++)
                {
                    string[] tag = acceptorOID[i].Split(new char[] { ';' });
                    SubmitInfo si = new SubmitInfo();
                    si.fillerID = tag[0];
                    si.fillerName = tag[1];
                    si.fillerOrgID = tag[2];
                    si.fillerOrgName = tag[3];
                    si.important = importance;
                    si.objectGUID = "";
                    si.ownerID = tag[0];
                    si.ownerName = tag[1];
                    si.ownerOrgID = tag[2];
                    si.ownerOrgName = tag[3];
                    si.submitOrgID = tag[2];

                    string flowOID = invokeProcess(engine, si, flowid, subject);

                    //若gst有資料, 代表為正常流程的ProcessNew, 否則為發起參考流程後的ProcessNew
                    sql = "insert into FORMRELATION(GUID, ORIGUID, CURGUID, FLOWGUID, RELATIONTYPE, ORIFORMNAME, CURFORMNAME, CREATETIME, ORIPAGETYPE, CURPAGETYPE, FLOWID) values(";
                    sql += "'" + IDProcessor.getID("") + "',";
                    sql += "'" + (string)getSession("ObjectGUID") + "',";
                    sql += "'',";
                    sql += "'" + flowOID + "',";
                    sql += "'1',";
                    sql += "'" + curset.Tables[0].Rows[0][0].ToString() + "',";
                    sql += "'',";
                    sql += "'" + DateTimeUtility.getSystemTime2(null) + "',";
                    sql += "'" + ProcessPageID + "',";
                    sql += "'',";
                    sql += "'" + flowid + "')";
                    if (!engine.executeSQL(sql))
                    {
                        throw new Exception(engine.errorString);
                    }

                }


                engine.close();

                //儲存成功
                //Response.Write("alert('" + ForwardSuccessMsg + "');");
                MessageBox(DispatchFlowSuccessMsg);

                //closeRefresh();
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }

        }

        /// <summary>
        /// 加簽程序
        /// </summary>
        protected virtual void addSignProcedure()
        {
            AbstractEngine engine = null;
            try
            {

                string IsAddSign = (String)Session["IsAddSign"];
                if (IsAddSign.Equals("BEFORE"))
                {
                    string connectString = (string)Session["connectString"];
                    string engineType = (string)Session["engineType"];

                    IOFactory factory = new IOFactory();
                    engine = factory.getEngine(engineType, connectString);

                    string addSignXml = getAddSignXml();

                    addSignXml = beforeSign(engine, false, addSignXml);

                    //往前加簽程序
                    string results = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "BeforeAddSign1", "往前加簽處理");
                    string comments = (string)Session["Comments"]; //加簽意見
                    if (comments == null)
                    {
                        comments = "";
                    }
                    string workItemOID = (string)getSession("WorkItemOID"); //工作項目識別號

                    if (addSignXml.Length > 0)
                    {
                        addCustomActivity(engine, workItemOID, false, addSignXml, results, comments);
                    }

                    engine.close();
                    //儲存成功
                    //Response.Write("alert('" + AddSignSuccessMsg + "');");
                    MessageBox(AddSignSuccessMsg);

                    closeRefresh();
                }
                else
                {
                    setSession("IsAddSign", (string)Session["IsAddSign"]);
                }
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }
        }

        /// <summary>
        /// 設定流程程序
        /// </summary>
        protected virtual void setFlowProcedure()
        {
            AbstractEngine engine = null;
            try
            {

                string IsSetFlow = (String)Session["IsSetFlow"];
                setSession("IsSetFlow", (string)Session["IsSetFlow"]);
            }
            catch (Exception ue)
            {
                try
                {
                    engine.close();
                }
                catch { };
                processErrorMessage(errorLevel, ue);
            }
        }

        /// <summary>
        /// 複製表單程序
        /// </summary>
        protected virtual void copyFormProcedure()
        {
            DataObject ddo = (DataObject)getSession("currentObject");
            Session["CopyFormDraft"] = ddo.saveXML3();

            string path = Request.Path + "?UIStatus=0&UIType=Process&CurPanelID=" + (string)getSession("CurPanelID") + "&IsCopyForm=1";
            path = com.dsc.kernal.utility.Utility.URLParameterEncode(path);
            Response.Write("window.location.href='" + path + "';");
        }

        /// <summary>
        /// 自訂按鈕一按下後程序
        /// </summary>
        protected virtual void userDefineProcedure1()
        {
        }

        /// <summary>
        /// 以HTML方式製作新的流程圖。預設行為是當graphPath檔案不存在，則以預設的HTML方式顯示流程圖。
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="opinionXML">目前簽核意見XML</param>
        /// <param name="performDetailArray">由簽核意見opinionXML所解析出的PerformDetail物件ArrayList</param>
        /// <param name="graphPath">GP流程圖檔路徑</param>
        /// <returns>顯示簽核流程圖的HTML。若回傳零長度字串，則該流程圖不會顯示</returns>
        protected virtual string getHtmlStyleGraph(AbstractEngine engine, string opinionXML, ArrayList performDetailArray, string graphPath)
        {
            if (!System.IO.File.Exists(graphPath))
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder();

                string FormID = (string)getSession("PDID");
                string SheetNo = (string)getSession("FlowGUID");

                //MessageBox(FormID);
                try
                {
                    string sql = "select SMWBAAA004 from SMWBAAA where SMWBAAA003='" + FormID + "'";
                    string formName = (string)engine.executeScalar(sql);
                    //測試用
                    //string formName = "測試表單";

                    sb.Append("<table border=0 cellspacing=0 cellpadding=0 width=100%  style=\"font-size:9pt\">");
                    //標題區
                    sb.Append("<tr>");
                    sb.Append(" <td colspan=3 align=center>");
                    sb.Append("<u>單據: " + FormID + " " + formName + " (" + SheetNo + ")</u>");
                    sb.Append(" </td>");
                    sb.Append("</tr>");

                    //流程圖區
                    //填表人
                    sb.Append("<tr>");
                    sb.Append(" <td width=16px><img src='" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/man.gif") + "'></td>");
                    sb.Append(" <td colspan=2 align=left width=100% ><b>填表人</b></td>");
                    sb.Append("</tr>");

                    string curflowno = "";
                    int curIndex = 1;

                    for (int i = 0; i < performDetailArray.Count; i++)
                    {
                        PerformDetail pd = (PerformDetail)performDetailArray[i];
                        string[] temp = pd.activityName.Split(new string[] { "支號:" }, StringSplitOptions.None);
                        string flowno = "";
                        string branchno = "";
                        string flowcontent = "";
                        string serialno = "";
                        string pfName="";

                        if (temp.Length == 1)
                        {
                            flowno = temp[0];
                        }
                        else
                        {
                            flowno = temp[0];
                            if (temp[1].Length > 4)
                            {
                                branchno = temp[1].Substring(0, 4);
                                flowcontent = temp[1].Substring(4, temp[1].Length - 4);
                            }
                        }
                        if (pd.performerName.IndexOf(":") ==4)
                        {
                            string[] zz = pd.performerName.Split(new char[] { ':' });
                            serialno = zz[0];
                            pfName = zz[1];
                        }
                        else
                        {
                            serialno = "";
                            pfName = pd.performerName;
                        }

                        if (flowno != curflowno)
                        {
                            sb.Append("<tr>");
                            sb.Append(" <td width=16px style=\"background-image:url(" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/line.gif") + ")\">&nbsp;</td>");
                            sb.Append(" <td colspan=2 align=left width=100% ><br></td>");
                            sb.Append("</tr>");

                            sb.Append("<tr>");
                            sb.Append(" <td width=16px style=\"background-image:url(" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/line.gif") + ")\"><img src='" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/minus.gif") + "'></td>");
                            sb.Append(" <td colspan=2 align=left width=100% ><b>第 " + curIndex.ToString() + " 關 (" + flowno + ")</b></td>");
                            sb.Append("</tr>");

                            curIndex++;
                            curflowno = flowno;
                        }
                        sb.Append("<tr>");
                        sb.Append(" <td width=16px style=\"background-image:url(" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/line.gif") + ")\">&nbsp;</td>");
                        sb.Append(" <td align=left width=32px nowrap=true valign=top>");
                        if (pd.performType.Equals("NORMAL"))
                        {
                            sb.Append("<img src='" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/Approve.gif") + "'>");
                        }
                        else
                        {
                            sb.Append("<img src='" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/Notify.gif") + "'>");
                        }
                        sb.Append("<img src='" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/man.gif") + "'>");
                        sb.Append(" </td>");
                        sb.Append(" <td align=left width=100% >");
                        sb.Append("(支號: " + branchno + ")" + flowcontent);
                        sb.Append(" </td>");
                        sb.Append("</tr>");

                        //如果沒有reassignWorkItem紀錄，則直接顯示PerformDetail內容。若有表示代哩，顯示最後一筆reassignWorkItem
                        sb.Append("<tr>");
                        sb.Append(" <td width=16px style=\"background-image:url(" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/line.gif") + ")\">&nbsp;</td>");
                        sb.Append(" <td width=32px>&nbsp;</td>");
                        sb.Append(" <td width=100% >(流水號: " + serialno + ")");
                        if (pd.performType.Equals("NORMAL"))
                        {
                            sb.Append("(已簽核)");
                        }
                        else
                        {
                            sb.Append("(已通知)");
                        }
                        if (pd.record.Length == 0)
                        {
                            sb.Append(pfName);
                        }
                        else
                        {
                            sb.Append(pd.record[pd.record.Length - 1].reassignToUserId + "_" + pd.record[pd.record.Length - 1].reassignToUserName);
                        }
                        sb.Append(" </td>");
                        sb.Append("</tr>");


                    }
                    //結案
                    sb.Append("<tr>");
                    sb.Append(" <td width=16px style=\"background-image:url(" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/line.gif") + ")\">&nbsp;</td>");
                    sb.Append(" <td colspan=2 align=left width=100% ><br></td>");
                    sb.Append("</tr>");
                    sb.Append("<tr>");
                    sb.Append(" <td width=16px><img src='" + Page.ResolveUrl("~/Program/DSCGPFlowService/Public/Image/close.gif") + "'></td>");
                    sb.Append(" <td colspan=2 align=left width=100% ><b>結束</b></td>");
                    sb.Append("</tr>");

                    sb.Append("</table>");
                }
                catch (Exception te)
                {

                    return "顯示流程圖時錯誤，錯誤訊息為:" + te.Message;
                }

                return sb.ToString();
            }
            else
            {
                return "";
            }
        }

        /// <summary>
        /// 自訂按鈕二按下後程序
        /// </summary>
        protected virtual void userDefineProcedure2()
        {
        }

        /// <summary>
        /// 自訂按鈕三按下後程序
        /// </summary>
        protected virtual void userDefineProcedure3()
        {
        }

        /// <summary>
        /// 自訂按鈕四按下後程序
        /// </summary>
        protected virtual void userDefineProcedure4()
        {
        }

        /// <summary>
        /// 自訂按鈕五按下後程序
        /// </summary>
        protected virtual void userDefineProcedure5()
        {
        }

        #endregion

        #region 私有實作方法
        /// <summary>
        /// 註冊頁面公用Client Script
        /// </summary>
        private void registerScript()
        {
            string simMode = (string)Session["SIMMODE"];

            string str = "";
            str += "<script language=javascript>";
            str += "function closeRefreshSilence(){";
            str += "try{";
            //國昌:先不要往上帶, 否則萬一此時有人點其他的功能, 畫面會被蓋掉
            //str += "window.parent.setZIndex('" + (string)getSession("ParentPanelID") + "');"; //這行可以把指定的panelID帶到最前端
            str += "wobj=window.parent.getPanelWindowObject('" + (string)getSession("ParentPanelID") + "');"; //這行可以取得該panelID的PanelWindow中代表內容的window HTML物件
            str += "wobj.refreshDataList('" + (string)getSession("DataListID") + "');"; //這行可以呼叫該視窗的refreshDataList方法, 此方法為WebFormBasePage提供            
            str += "}catch(e){};";
            //Parent Panel可能不存在 ;因此須區分開來
            str += "try{";            
            str += "window.parent.Panel_Close_Silence('" + (string)getSession("CurPanelID") + "');"; //這行可以直接關閉目前視窗            
            str += "}catch(e){};";
            str += "}";

            str += "function closeSilence(){";
            str += "try{";
            str += "window.parent.Panel_Close_Silence('" + (string)getSession("CurPanelID") + "');"; //這行可以直接關閉目前視窗
            str += "}catch(e){};";
            str += "}";

            str += "function refreshClickSilence(){";
            str += "try{";
            //國昌:先不要往上帶, 否則萬一此時有人點其他的功能, 畫面會被蓋掉
            //str += "window.parent.setZIndex('" + (string)getSession("ParentPanelID") + "');"; //這行可以把指定的panelID帶到最前端
            str += "wobj=window.parent.getPanelWindowObject('" + (string)getSession("ParentPanelID") + "');"; //這行可以取得該panelID的PanelWindow中代表內容的window HTML物件
            str += "wobj.refreshDataList('" + (string)getSession("DataListID") + "');"; //這行可以呼叫該視窗的refreshDataList方法, 此方法為WebFormBasePage提供
            str += "}catch(e){};";
            str += "}";

            str += "function closeRefreshClickSilence(){";
            str += "try{";
            str += "    window.parent.setZIndex('" + (string)getSession("ParentPanelID") + "');"; //這行可以把指定的panelID帶到最前端
            str += "    wobj=window.parent.getPanelWindowObject('" + (string)getSession("ParentPanelID") + "');"; //這行可以取得該panelID的PanelWindow中代表內容的window HTML物件
            str += "    wobj.refreshDataList('" + (string)getSession("DataListID") + "');"; //這行可以呼叫該視窗的refreshDataList方法, 此方法為WebFormBasePage提供
            str += "    wobj.clickDataList('" + (string)getSession("DataListID") + "', 1);"; //這行可以呼叫該視窗的clickDataList方法, 此方法為WebFormBasePage提供      
            
            str += "}catch(e){";                        
            str += "    alert('已經無下一張可以簽核的表單'+e.message);";            
            str += "};";
            //Parent Panel可能不存在 ;因此須區分開來
            str += "    try {";            
            str += "        window.parent.Panel_Close_Silence('" + (string)getSession("CurPanelID") + "');"; //這行可以直接關閉目前視窗            
            str += "    }catch(e){};";            
            str += "}";
            //這裡是表單單頭資訊的切換
            str += "function toggleFormHeadArea(){";
            str += "wobj=document.getElementById('FormHeadAreaToggle');";
            str += "if(wobj.toggleMode=='m'){";
            str += "  wobj.toggleMode='p';";
            str += "  wobj.src='" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlImages/c.gif") + "';";
            str += "  document.getElementById('FormHeadTable').style.display='none';";
            str += "}else{";
            str += "  wobj.toggleMode='m';";
            str += "  wobj.src='" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlImages/o.gif") + "';";
            str += "  document.getElementById('FormHeadTable').style.display='inline';";
            str += "}";
            str += "}";
            //這裡要註冊有關設定流程鈕的程序
            str += "function SetFlowButton_Before_Click(){";
            str += "  return SetFlowShow();";
            str += "}";
            //這裡要註冊有關模擬SP8模式時，檢查後端CheckFieldData結果的程序
            str += "function AgreeDisagreeCheckResult(){";
            str += "    return checkCheckFieldDataResult();";
            str += "}";
            //這裡要註冊有關簽核鈕的程序
            str += "function SignButton_Before_Click(){";
            str += "  return SignShow();";
            str += "}";
            //這裡要註冊有關模擬EasyFlow簽核鈕的程序
            str += "function SimSignButton_Before_Click(){";
            str += "  return SimSignShow();";
            str += "}";
            //這裡要註冊有關加簽鈕的程序
            str += "function AddSignButton_Before_Click(){";
            str += "  return AddSignShow();";
            str += "}";
            //這裡要註冊有關撤銷鈕的程序
            str += "function WithDrawButton_Before_Click(){";
            str += "  return WithDrawShow();";
            str += "}";
            //這裡要註冊有關重辦紐的程序
            str += "function RejectButton_Before_Click(){";
            str += "    return RejectShow();";
            str += "}";
            //這裡要註冊有關轉派紐的程序
            str += "function RedirectButton_Before_Click(){";
            str += "    return RedirectShow();";
            str += "}";
            //這裡要註冊有關取回重辦鈕的程序
            str += "function ReGetButton_Before_Click(){";
            str += "  return ReGetShow();";
            str += "}";
            //這裡要註冊有關撤簽鈕的程序
            str += "function RollbackButton_Before_Click(){";
            str += "  return RollbackShow();";
            str += "}";
            //這裡要註冊有關轉寄鈕的程序
            str += "function ForwardButton_Before_Click(){";
            str += "  return ForwardShow();";
            str += "}";
            //這裡要註冊有關發起參考流程的程序
            str += "function DispatchFlowButton_Before_Click(){";
            str += "  return DispatchFlowShow();";
            str += "}";
            //這裡要註冊有關附件鈕的程序
            str += "function AttachButton_Before_Click(){";
            str += "    obj=document.getElementById('attachFileDiv');";
            str += "    if(obj.style.display=='none'){";
            //str += "        obj.style.left=event.clientX;";
            str += "        obj.style.left=0;";
            str += "        var i = 0;";
            if (simMode.Equals("0"))
            {
                //str += "        obj.style.top='25px';";
                str += "        i=parseInt(document.getElementById('FTB').style.top.replace('px',''))+25;";
                str += "        obj.style.top=i+'px'; ";
            }
            else
            {
                //str += "        obj.style.top='50px';";//erichsu 
                str += "        i=parseInt(document.getElementById('FTB').style.top.replace('px',''))+50;";
                str += "        obj.style.top=i+'px'; ";
            }
            str += "        obj.style.display='inline';";
            str += "    }else{";
            str += "        obj.style.display='none';";
            str += "    }";
            str += "    return false;";
            str += "}";
            //這裡要註冊有關歷史紀錄鈕的程序
            str += "function HistoryButton_Before_Click(){";
            str += "    obj=document.getElementById('HistoryDiv');";
            str += "    if(obj.style.display=='none'){";
            //str += "        obj.style.left=event.clientX;";
            str += "        obj.style.left=0;";
            if (simMode.Equals("0"))
            {
                str += "        obj.style.top='25px';";
            }
            else
            {
                str += "        obj.style.top='50px';";
            }
            str += "        obj.style.display='inline';";
            str += "    }else{";
            str += "        obj.style.display='none';";
            str += "    }";
            str += "    return false;";
            str += "}";
            //這裡要註冊有關相關表單鈕的程序
            str += "function ViewButton_Before_Click(){";
            str += "    obj=document.getElementById('RelationDiv');";
            str += "    if(obj.style.display=='none'){";
            //str += "        obj.style.left=event.clientX;";
            str += "        obj.style.left=0;";
            if (simMode.Equals("0"))
            {
                str += "        obj.style.top='25px';";
            }
            else
            {
                str += "        obj.style.top='50px';";
            }
            str += "        obj.style.display='inline';";
            str += "    }else{";
            str += "        obj.style.display='none';";
            str += "    }";
            str += "    return false;";
            str += "}";
            //這裡要註冊有關自訂按鈕一鈕的程序
            str += "function UserDefineButton1_Before_Click(){";
            str += "  return UserDefined1Show();";
            str += "}";
            //這裡要註冊有關自訂按鈕二鈕的程序
            str += "function UserDefineButton2_Before_Click(){";
            str += "  return UserDefined2Show();";
            str += "}";
            //這裡要註冊有關自訂按鈕三鈕的程序
            str += "function UserDefineButton3_Before_Click(){";
            str += "  return UserDefined3Show();";
            str += "}";
            //這裡要註冊有關自訂按鈕四鈕的程序
            str += "function UserDefineButton4_Before_Click(){";
            str += "  return UserDefined4Show();";
            str += "}";
            //這裡要註冊有關自訂按鈕五鈕的程序
            str += "function UserDefineButton5_Before_Click(){";
            str += "  return UserDefined5Show();";
            str += "}";
            //這裡要註冊有關按下歷史清單的程序
            str += "function clickHistory(guid){";
            str += "  parent.window.openWindowGeneral('歷史紀錄','" + Page.ResolveUrl("~/DSCWebControlRunTime/HistoryRedirect.aspx") + "?GUID='+guid+'&PageURL='+escape(\"" + Request.Path + "\"),'','','',true,true);";
            str += "}";
            //這裡要註冊有關按下相關表單的程序
            str += "function clickRelation(guid, pageType){";
            str += "  parent.window.openWindowGeneral('相關表單','" + Page.ResolveUrl("~/DSCWebControlRunTime/RelationRedirect.aspx") + "?GUID='+guid+'&PAGETYPE='+pageType+'&PageURL='+escape(\"" + Request.Path + "\"),'','','',true,true);";
            str += "}";

            str += "function scrollToolBar(){";            
            str += "    var FTB = document.getElementById('FTB');";
            str += "    if(FTB != null) { FTB.style.top=document.body.scrollTop; }; ";
            str += "    var ATB = document.getElementById('ATB');";
            str += "    if(ATB != null) { ATB.style.top=document.body.scrollTop+25; }"; 
            str += "    var attachFileDiv = document.getElementById('attachFileDiv');";
            str += "    if(attachFileDiv != null) { attachFileDiv.style.top=document.body.scrollTop+25; }; ";
            
            str += "}";
            //str += "window.attachEvent('onscroll',scrollToolBar);";
            str += "window.onscroll = scrollToolBar; ";                        
            str += "window.onresize = scrollToolBar; ";            
             
            str += "</script>";

            Type ctype = this.GetType();
            ClientScriptManager cm = Page.ClientScript;

            if (!cm.IsStartupScriptRegistered(ctype, "GeneralWebFormScript"))
            {
                cm.RegisterStartupScript(ctype, "GeneralWebFormScript", str);
            }


        }

        /// <summary>
        /// 在頁面上設定列印功能
        /// </summary>
        private void registerPrintScript(AbstractEngine engine)
        {
            string sql = "select SMVPAAA010, SMVPAAA011, SMVPAAA012, SMVPAAA013 from SMVPAAA";
            DataSet ds = engine.getDataSet(sql, "TEMP");

            string pageHeader = ds.Tables[0].Rows[0][2].ToString();
            string pageFooter = ds.Tables[0].Rows[0][3].ToString();

            pageHeader = pageHeader.Replace("%USERID%", (String)Session["UserID"]);
            pageHeader = pageHeader.Replace("%USERNAME%", (String)Session["UserName"]);
            pageHeader = pageHeader.Replace("%PRINTTIME%", DateTimeUtility.getSystemTime2(null));
            pageHeader = pageHeader.Replace("%LOGINIP%", Request.ServerVariables["REMOTE_ADDR"]);
            pageFooter = pageFooter.Replace("%USERID%", (String)Session["UserID"]);
            pageFooter = pageFooter.Replace("%USERNAME%", (String)Session["UserName"]);
            pageFooter = pageFooter.Replace("%PRINTTIME%", DateTimeUtility.getSystemTime2(null));
            pageFooter = pageFooter.Replace("%LOGINIP%", Request.ServerVariables["REMOTE_ADDR"]);
            string str = "";
            com.dsc.kernal.utility.BrowserProcessor.BrowserType resultType = com.dsc.kernal.utility.BrowserProcessor.detectBrowser(this.Page);
            switch (resultType)
            {
                default:
                    #region IE
                    str += "<script language=javascript>";
                    /*
                    str += "function clickPrint(){";
                    str += "if(confirm('請確認畫面已經初始化完畢後, 按下確認才開始列印')){";
                    str += "    fnPrint();";
                    str += "}";
                    str += "}";
                    str += "document.body.attachEvent('onclick',clickPrint);";
                    str += "alert('請等待畫面初始化完畢後, 在頁面按下滑鼠左鍵開始列印');";
                    str += "function afterEventProcess(){";
                    str += "    fnPrint();";
                    str += "}";
                                */

                    str += "// 列印\r\n";
                    str += "function fnPrint() {\r\n";
                    str += "    try    {\r\n";
                    str += "        // 儲存原本頁首頁尾的設定，然後設定空白\r\n";
                    str += "        var ret = saveAndClearSetting();\r\n";
                    str += "        // 列印\r\n";
                    str += "        window.print();\r\n";
                    //str += "alert('print');";
                    str += "        // 回存原本頁首頁尾的設定\r\n";
                    str += "        if ( ret ) restoreSetting();\r\n";
                    str += "    } catch (e) { alert(\"err=\"+e.description); }\r\n";
                    str += "}\r\n";
                    str += "var hkey_path = \"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\PageSetup\\\\\";\r\n";
                    str += "var hkey_key_header = hkey_path+\"header\"; // 頁首\r\n";
                    str += "var hkey_key_footer = hkey_path+\"footer\"; // 頁尾\r\n";
                    str += "var hkey_key_margin_bottom = hkey_path+\"margin_bottom\"; // 邊界（下）\r\n";
                    str += "var hkey_key_margin_left = hkey_path+\"margin_left\"; // 邊界（左）\r\n";
                    str += "var hkey_key_margin_right = hkey_path+\"margin_right\"; // 邊界（右）\r\n";
                    str += "var hkey_key_margin_top = hkey_path+\"margin_top\"; // 邊界（上）\r\n";
                    str += "var old_header = \"&w&b第 &p 頁，共 &P 頁\";\r\n";
                    str += "var old_footer = \"&u&b&d\";\r\n";
                    str += "var old_margin_left='';";
                    str += "// 儲存原本頁首頁尾的設定，然後設定空白\r\n";
                    str += "function saveAndClearSetting() {\r\n";                    
                    str += "  try {\r\n";
                    str += "    var RegWsh = new ActiveXObject(\"WScript.Shell\");\r\n";
                    str += "    old_header = RegWsh.RegRead(hkey_key_header);\r\n";
                    str += "    old_footer = RegWsh.RegRead(hkey_key_footer);\r\n";
                    str += "    old_margin_left = RegWsh.RegRead(hkey_key_margin_left);\r\n";
                    //str += "    alert(old_footer);";
                    if (ds.Tables[0].Rows[0][0].ToString().Equals("N"))
                    {
                        str += "    RegWsh.RegWrite(hkey_key_header,\"\");\r\n";
                        str += "    RegWsh.RegWrite(hkey_key_footer,\"\");\r\n";
                    }
                    else
                    {
                        str += "    RegWsh.RegWrite(hkey_key_header, \"" + pageHeader + "\");\r\n";
                        str += "    RegWsh.RegWrite(hkey_key_footer,\"" + pageFooter + "\");\r\n";
                    }
                    str += "    RegWsh.RegWrite(hkey_key_margin_left,\"" + ds.Tables[0].Rows[0][1].ToString() + "\");\r\n";
                    str += "    return true;\r\n";
                    str += "  } catch (e) { \r\n";
                    str += "    if ( e.description.indexOf(\"伺服程式無法產生物件\") != -1 ) {\r\n";
                    str += "        alert(\"請調整IE瀏覽器的安全性\\n網際網路選項＼安全性＼自訂層級\\n「起始不標示為安全的ActiveX控制項」設定為啟用或提示。\"); \r\n";
                    str += "    } // if\r\n";
                    str += "    else {\r\n";
                    str += "        alert(\"ERR=\"+e.description); \r\n";
                    str += "    } // else\r\n";
                    str += "  } // catch\r\n";
                    str += "    return false;\r\n";
                    str += "}\r\n";
                    str += "// 回存原本頁首頁尾的設定\r\n";
                    str += "function restoreSetting() {\r\n";
                    str += "  try {\r\n";
                    //str += "alert(old_header);";
                    str += "    var RegWsh = new ActiveXObject(\"WScript.Shell\");\r\n";
                    str += "    RegWsh.RegWrite(hkey_key_header,old_header);\r\n";
                    str += "    RegWsh.RegWrite(hkey_key_footer,old_footer);\r\n";
                    str += "    RegWsh.RegWrite(hkey_key_margin_left,old_margin_left);\r\n";
                    str += "  } catch (e) {\r\n";
                    str += "    if ( e.description.indexOf(\"伺服程式無法產生物件\") != -1 ) {\r\n";
                    str += "        alert(\"請調整IE瀏覽器的安全性\\n網際網路選項＼安全性＼自訂層級\\n「起始不標示為安全的ActiveX控制項」設定為啟用或提示。\"); \r\n";
                    str += "    } // if\r\n";
                    str += "    else {\r\n";
                    str += "        alert(\"ERR=\"+e.description); \r\n";
                    str += "    } // else\r\n";
                    str += "  } // catch\r\n";
                    str += "}\r\n";

                    str += "window.attachEvent('onbeforeunload', restoreSetting);";
                    //str += "window.attachEvent('onloadcomplete',fnPrint);";

                    str += "</script>";
                    #endregion
                    break;
                case com.dsc.kernal.utility.BrowserProcessor.BrowserType.FireFox:
                    #region FireFox                    
                    str += "<script language=javascript>";               
                    //非IE瀏覽器 列印參數的實作得依靠第各瀏覽器PlugIn完成, 暫不實作
                    str += "// 列印\r\n";
                    str += "function fnPrint() {\r\n";
                    str += "    try    {\r\n";
                    str += "        // 儲存原本頁首頁尾的設定，然後設定空白\r\n";
                    //str += "        var ret = saveAndClearSetting();\r\n";
                    str += "        // 列印\r\n";
                    str += "        window.print();\r\n";
                    //str += "alert('print');";
                    str += "        // 回存原本頁首頁尾的設定\r\n";
                    //str += "        if ( ret ) restoreSetting();\r\n";
                    str += "    } catch (e) { alert(\"err=\"+e.description); }\r\n";
                    str += "}\r\n";
                    //str += "window.attachEvent('onbeforeunload', restoreSetting);";
                    //str += "window.onbeforeunload = restoreSetting; ";
                    //str += "window.attachEvent('onloadcomplete',fnPrint);";

                    str += "</script>";                    
                    #endregion
                    break;
                case com.dsc.kernal.utility.BrowserProcessor.BrowserType.Chrome:
                    #region Chrome
                    str += "<script language=javascript>";               
                    //非IE瀏覽器 列印參數的實作得依靠第各瀏覽器PlugIn完成, 暫不實作
                    str += "// 列印\r\n";
                    str += "function fnPrint() {\r\n";
                    str += "    try    {\r\n";
                    str += "        // 儲存原本頁首頁尾的設定，然後設定空白\r\n";
                    //str += "        var ret = saveAndClearSetting();\r\n";
                    str += "        // 列印\r\n";
                    str += "        window.print();\r\n";
                    //str += "alert('print');";
                    str += "        // 回存原本頁首頁尾的設定\r\n";
                    //str += "        if ( ret ) restoreSetting();\r\n";
                    str += "    } catch (e) { alert(\"err=\"+e.description); }\r\n";
                    str += "}\r\n";
                    //str += "window.attachEvent('onbeforeunload', restoreSetting);";
                    //str += "window.onbeforeunload = restoreSetting; ";
                    //str += "window.attachEvent('onloadcomplete',fnPrint);";

                    str += "</script>";                    
                    #endregion
                    break;
                case com.dsc.kernal.utility.BrowserProcessor.BrowserType.Safari:
                    #region Safari
                    str += "<script language=javascript>";               
                    //非IE瀏覽器 列印參數的實作得依靠第各瀏覽器PlugIn完成, 暫不實作
                    str += "// 列印\r\n";
                    str += "function fnPrint() {\r\n";
                    str += "    try    {\r\n";
                    str += "        // 儲存原本頁首頁尾的設定，然後設定空白\r\n";
                    //str += "        var ret = saveAndClearSetting();\r\n";
                    str += "        // 列印\r\n";
                    str += "        window.print();\r\n";
                    //str += "alert('print');";
                    str += "        // 回存原本頁首頁尾的設定\r\n";
                    //str += "        if ( ret ) restoreSetting();\r\n";
                    str += "    } catch (e) { alert(\"err=\"+e.description); }\r\n";
                    str += "}\r\n";
                    //str += "window.attachEvent('onbeforeunload', restoreSetting);";
                    //str += "window.onbeforeunload = restoreSetting; ";
                    //str += "window.attachEvent('onloadcomplete',fnPrint);";

                    str += "</script>";                    
                    #endregion
                    break;
            }
            

            Type ctype = this.GetType();
            ClientScriptManager cm = Page.ClientScript;

            if (!cm.IsStartupScriptRegistered(ctype, "GeneralWebFormPrintScript"))
            {
                cm.RegisterStartupScript(ctype, "GeneralWebFormPrintScript", str);
            }

        }

        /// <summary>
        /// 設定表單資訊區域以及簽核意見
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前資料物件</param>
        /// <param name="UIStatus">頁面狀態</param>
        private void initFormHeadTail(AbstractEngine engine, DataObject currentObject, string UIStatus, string FlowOID)
        {
            //切換表單基本資訊區是否顯示
            if ((UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(ProcessDelete)) || (UIStatus.Equals(ProcessModify)) || (UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FormRollback)))
            {
                bool isShowHead = false;
                bool tempF = false;
                bool tempF2 = false;
                string sql = "select SMWBAAA006 from SMWBAAA where SMWBAAA003='" + (string)getSession("PDID") + "'";
                DataSet tsp = engine.getDataSet(sql, "TEMP");
                if (tsp.Tables[0].Rows.Count > 0)
                {
                    if (tsp.Tables[0].Rows[0][0].ToString().Equals("Y"))
                    {
                        tempF = true;
                    }
                }
                else
                {
                    tempF = true;
                }

                if (UIStatus.Equals(ProcessNew))
                {
                    sql = "select SMWDAAA032, SMWDAAA313 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='New'";
                }
                else if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FormRollback)))
                {
                    sql = "select SMWDAAA032, SMWDAAA313 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Origin'";
                }
                else
                {
                    sql = "select SMWDAAA032, SMWDAAA313 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Display' and SMWDAAA004='" + (string)getSession("ACTName") + "'";
                }
                DataSet dsa = engine.getDataSet(sql, "TEMP");

                //如果dsa.Count=0要改用預設
                if (dsa.Tables[0].Rows.Count == 0)
                {
                    sql = "select SMWDAAA032, SMWDAAA313 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
                    dsa = engine.getDataSet(sql, "TEMP");
                    if (dsa.Tables[0].Rows.Count == 0)
                    {
                        //throw new Exception("找不到此畫面的設定檔(SMWD)");
                        throw new Exception(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError3", "找不到此畫面的設定檔(SMWD)"));
                    }
                }
                if (dsa.Tables[0].Rows[0][0].ToString().Equals("Y"))
                {
                    tempF2 = true;
                }

                if (tempF && tempF2)
                {
                    isShowHead = true;
                }
                else
                {
                    isShowHead = false;
                }

                bool isOpenHead = false;
                if (dsa.Tables[0].Rows[0][1].ToString().Equals("Y"))
                {
                    isOpenHead = true;
                }

                //雖然FormReadOnly, 但並非每個都有流程實例序號
                if (isShowHead && (!getSession("FlowGUID").Equals("")))
                {
                }
                else
                {
                    isShowHead = false;
                }

                if (isShowHead)
                {
                    bool isCont = customizeFormHead(engine, currentObject.getData(getObjectGUIDField()), FlowOID);
                    if (!isCont)
                    {
                        //建立表單基本資訊區蘭未
                        string header = getFormHead(engine, currentObject.getData(getObjectGUIDField()), FlowOID);
                        //FormHeadArea2.Text = header;
                        LiteralControl lct = new LiteralControl();
                        lct.Text = header;
                        FormHeadGroup.Controls.Add(lct);

                        //因為不一定會有單頭資訊
                        if (header.Length > 0)
                        {
                            //FormHeadArea.Visible = true;
                            //FormHeadArea2.Visible = true;
                            //FormHeadArea3.Visible = true;
                            FormHeadGroupSpace.Visible = true;
                            FormHeadGroup.Visible = true;
                            if (isOpenHead)
                            {
                                FormHeadGroup.ShowPanel = true;
                            }
                            else
                            {
                                FormHeadGroup.ShowPanel = false;
                            }
                            //Response.Write("OP" + isOpenHead.ToString());
                        }
                        else
                        {
                            //FormHeadArea.Visible = false;
                            //FormHeadArea2.Visible = false;
                            //FormHeadArea3.Visible = false;
                            FormHeadGroupSpace.Visible = false;
                            FormHeadGroup.Display = false;
                        }
                    }
                    else
                    {
                        //FormHeadArea.Visible = false;
                        //FormHeadArea2.Visible = false;
                        //FormHeadArea3.Visible = false;
                        FormHeadGroupSpace.Visible = false;
                        FormHeadGroup.Display = false;
                    }
                }
                else
                {
                    //FormHeadArea.Visible = false;
                    //FormHeadArea2.Visible = false;
                    //FormHeadArea3.Visible = false;
                    FormHeadGroupSpace.Visible = false;
                    FormHeadGroup.Display = false;
                }
            }
            else
            {
                //FormHeadArea.Visible = false;
                //FormHeadArea2.Visible = false;
                //FormHeadArea3.Visible = false;
                FormHeadGroupSpace.Visible = false;
                FormHeadGroup.Display = false;
            }

            //如果為憑證列印模式, 要再將工具列隱藏
            if (IsCertificateMode)
            {
                hideAllToolBar();
            }

            //判斷是否顯示簽核意見
            if ((UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(ProcessDelete)) || (UIStatus.Equals(ProcessModify)) || (UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FormRollback)))
            {
                bool isShowOpinion = false;
                bool isOpenOpinion = true;

                if ((Request.QueryString["IsShowOpinion"] != null) || (Request.Form["IsShowOpinion"] != null))
                {
                    isShowOpinion = true;
                }
                else
                {
                    bool tempF = false;
                    bool tempF2 = false;
                    string sql = "select SMWBAAA005 from SMWBAAA where SMWBAAA003='" + (string)getSession("PDID") + "'";
                    DataSet tsp = engine.getDataSet(sql, "TEMP");
                    if (tsp.Tables[0].Rows.Count > 0)
                    {
                        if (tsp.Tables[0].Rows[0][0].ToString().Equals("Y"))
                        {
                            tempF = true;
                        }
                    }
                    else
                    {
                        tempF = true;
                    }
                    if (UIStatus.Equals(ProcessNew))
                    {
                        sql = "select SMWDAAA017, SMWDAAA314 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='New'";
                    }
                    else if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FormRollback)))
                    {
                        sql = "select SMWDAAA017, SMWDAAA314 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Origin'";
                    }
                    else
                    {
                        sql = "select SMWDAAA017, SMWDAAA314 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Display' and SMWDAAA004='" + (string)getSession("ACTName") + "'";
                    }
                    DataSet dsa = engine.getDataSet(sql, "TEMP");

                    //如果dsa.Count=0要改用預設
                    if (dsa.Tables[0].Rows.Count == 0)
                    {
                        sql = "select SMWDAAA017, SMWDAAA314 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
                        dsa = engine.getDataSet(sql, "TEMP");
                        if (dsa.Tables[0].Rows.Count == 0)
                        {
                            throw new Exception("找不到此畫面的設定檔(SMWD)");
                        }
                    }
                    if (dsa.Tables[0].Rows[0][0].ToString().Equals("Y"))
                    {
                        tempF2 = true;
                    }

                    if (tempF && tempF2)
                    {
                        isShowOpinion = true;
                    }
                    else
                    {
                        isShowOpinion = false;
                    }

                    if (dsa.Tables[0].Rows[0][1].ToString().Equals("Y"))
                    {
                        isOpenOpinion = true;
                    }
                    else
                    {
                        isOpenOpinion = false;
                    }

                }
                string opinionHTML = "";
                checkPoint("getSignOpinion", modeFormLoad);
                if (!getSession("FlowGUID").Equals(""))
                {
                    opinionHTML = getSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), SignOpinion.SHOW_ALL, (DataRow)getSession("SignOpinionSetting"));
                }
                checkPoint("getSignOpinion Done", modeFormLoad);
                //雖然FormReadOnly, 但並非每個都有流程實例序號
                if (isShowOpinion && (!getSession("FlowGUID").Equals("")))
                {
                    if (!customizeSignOpinion(Page.Server, debugPage, engine, (string)getSession("FlowGUID"), SignOpinion.SHOW_ALL, (DataRow)getSession("SignOpinionSetting")))
                    {
                        string html = opinionHTML;
                        if (html.Length > 0)
                        {
                            LiteralControl lc = new LiteralControl();
                            lc.Text = html;

                            LiteralControl opSpace = new LiteralControl();
                            opSpace.Text = "&nbsp;";

                            DSCWebControl.DSCGroupBox opinionGroup = new DSCWebControl.DSCGroupBox();
                            opinionGroup.PageUniqueID = this.PageUniqueID;
                            opinionGroup.ID = "opinionGroup";
                            opinionGroup.ShowToggle = true;
                            //opinionGroup.Text = "簽核意見";
                            opinionGroup.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError22", "簽核意見");
                            opinionGroup.Controls.Add(lc);
                            opinionGroup.Width = new System.Web.UI.WebControls.Unit("666px");

                            if (isOpenOpinion)
                            {
                                opinionGroup.ShowPanel = true;
                            }
                            else
                            {
                                opinionGroup.ShowPanel = false;
                            }
                            this.Controls.AddAt(this.Controls.Count, opSpace);
                            this.Controls.AddAt(this.Controls.Count, opinionGroup);
                        }
                    }
                }
                //儲存起來, 給顯示意見開窗使用
                setSession("OpinionHTML", opinionHTML);
            }

        }

        /// <summary>
        /// 設定歷史紀錄區資訊
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前資料物件</param>
        /// <param name="UIStatus">目前畫面狀態</param>
        private void initHistory(AbstractEngine engine, DataObject currentObject, string UIStatus)
        {
            if (HistoryButton.Display == true) 
            {
                if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(GeneralNew)))
                {
                    HistoryArea2.Text = "<table border0 width=100% height=100%><tr><td valign=middle align=center style=\"font-size:10pt\">無任何歷史紀錄</td></tr></table>";
                }
                else
                {
                    HistoryArea2.Text = getHistoryData(engine, currentObject.getData(getObjectGUIDField()));
                }
            }
        }

        /// <summary>
        /// 設定相關表單區資訊
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前資料物件</param>
        /// <param name="UIStatus">目前畫面狀態</param>
        private void initRelation(AbstractEngine engine, DataObject currentObject, string UIStatus)
        {
            if (ViewButton.Display == true) 
            {
                if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(GeneralNew)))
                {
                    RelationArea2.Text = "<table border0 width=100% height=100%><tr><td valign=middle align=center style=\"font-size:10pt\">無任何相關表單</td></tr></table>";
                }
                else
                {
                    RelationArea2.Text = getRelationData(engine, currentObject.getData(getObjectGUIDField()));
                }            
            }
        }

        /// <summary>
        /// 根據維護作業設定設定此畫面的UI呈現方式
        /// </summary>
        private void initializeUI(AbstractEngine engine)
        {
            //國昌20100614:自訂的通知（原稿發起）打開, FormRollBack開啟第15個參數0->1
            //先由預設設定(可參考 作業畫面各項參數.xls)
            int[,] buttons = new int[,]{
                {0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1}, //InitNew:0
                {0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1}, //InitModify:1
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1}, //InitDelete:2
                {0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,1}, //FormReadOnly:3
                {0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1}, //ProcessNew:4
                {0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1}, //ProcessModify:5
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1}, //ProcessDelete:6
                {1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0}, //GeneralNew:7
                {1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0}, //GeneralModify:8
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},  //GeneralDelete:9
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1},  //FromRedirect:10
                {0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,1,1},  //FormNotify:11
                {0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1}  //FormRollback:12
            };

            string UIStatus = (string)getSession("UIStatus");
            int us = int.Parse(UIStatus);

            for (int i = 0; i < buttons.GetLength(1); i++)
            {
                bool vs = false;
                if (buttons[us, i] == 1)
                {
                    vs = true;
                }
                else
                {
                    vs = false;
                }
                ((DSCWebControl.GlassButton)this.Controls[i + 3]).Display = vs; //國昌20090821因為前方加了兩個Agree以及Disagree按鈕，所以原本+1變成+3
            }

            //2010/03/18 Fish 暫時關閉通知、原稿、全檢視狀態下的轉寄按鈕
            //國昌20100614:自訂的通知（原稿發起）打開
            
            //if (UIStatus == GeneralWebForm.FormReadOnly || UIStatus == GeneralWebForm.FormNotify)
            //if(UIStatus==GeneralWebForm.FormNotify)
            //{
            //    ForwardButton.Display = false;
            //}

            //預設工具列按鈕名稱
            //SaveButton.Text = "儲存";
            //DeleteButton.Text = "刪除";
            //SubmitButton.Text = "發起";
            //SignButton.Text = "簽核";
            //AttachButton.Text = "附件";
            //SaveDraftButton.Text = "儲存草稿";
            //ReadDraftButton.Text = "讀取草稿";
            //ViewButton.Text = "檢視相關表單";
            //RefreshButton.Text = "重新整理";
            //ViewFlowButton.Text = "檢視流程";
            //SetFlowButton.Text = "設定流程";
            //AddSignButton.Text = "加簽";
            //WithDrawButton.Text = "撤銷";
            //RejectButton.Text = "重辦";
            //ForwardButton.Text = "轉寄";
            //DispatchFlowButton.Text = "發起參考流程";
            //CopyFormButton.Text = "複製表單";
            //HistoryButton.Text = "歷史紀錄";
            //PrintCertificateButton.Text = "列印憑證";
            //BackListButton.Text = "回清單";
            //RedirectButton.Text = "轉派";
            //ReGetButton.Text = "取回";
            //RollbackButton.Text = "撤簽";
            SaveButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button1", "儲存");
            DeleteButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button2", "刪除");
            SubmitButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button3", "發起");
            SignButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button4", "簽核");
            AttachButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button5", "附件");
            SaveDraftButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button6", "儲存草稿");
            ReadDraftButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button7", "讀取草稿");
            ViewButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button8", "檢視相關表單");
            RefreshButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button9", "重新整理");
            ViewFlowButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button10", "檢視流程");
            SetFlowButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button11", "設定流程");
            AddSignButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button12", "加簽");
            WithDrawButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button13", "撤銷");
            RejectButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button14", "重辦");
            ForwardButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button15", "轉寄");
            DispatchFlowButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button16", "發起參考流程");
            CopyFormButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button17", "複製表單");
            HistoryButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button18", "歷史紀錄");
            PrintCertificateButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button19", "列印憑證");
            BackListButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button20", "回清單");
            RedirectButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button21", "轉派");
            ReGetButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button22", "取回");
            RollbackButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "Button23", "撤簽");
            UserDefineButton1.Text = "";
            UserDefineButton2.Text = "";
            UserDefineButton3.Text = "";
            UserDefineButton4.Text = "";
            UserDefineButton5.Text = "";            
            
            //檢查一般狀態
            if ((UIStatus.Equals(GeneralNew)) || (UIStatus.Equals(GeneralModify)))
            {
                if (UIStatus.Equals(GeneralNew))
                {
                    setGeneralForm(engine, true);
                }
                else
                {
                    setGeneralForm(engine, false);
                }
            }

            //檢查流程角色關聯
            if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(InitModify)) || (UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(ProcessModify)) || (UIStatus.Equals(ProcessDelete)) || (UIStatus.Equals(FromRedirect)) || (UIStatus.Equals(FormNotify)) || (UIStatus.Equals(FormRollback)))
            {                
                setProcessForm(engine, UIStatus);                
            }

            //唯讀模式, 要將畫面欄位全部ReadOnly
            if ((UIStatus.Equals(FormReadOnly)) || (UIStatus.Equals(FormNotify)))
            {
                setReadOnlyForm(engine, UIStatus);
            }

            //沒有傳入ParentPanelID & DataListID, 要將回清單鈕disable
            string ppid = (string)getSession("ParentPanelID");
            string did = (string)getSession("DataListID");
            if ((ppid.Equals("")) || (did.Equals("")))
            {
                BackListButton.Display = false;
            }

            //20090702 Modfiy Eric : If no buttons on toolBar need to display ; then hide toolbar Background
            bool needToShowToolBar = false;
            for (int i = 3; i < 31; i++) //國昌20090821:原本1~29, 但是前方加了兩個按鈕，所以變成3~31
            {
                if (((DSCWebControl.GlassButton)this.Controls[i]).Display == true)
                {
                    needToShowToolBar = true;
                }
                else
                {
                    //20121221 Modfied by Eric Hsu : if the control will not be displayed ;no need to load images
                    DSCWebControl.GlassButton gb =((DSCWebControl.GlassButton)this.Controls[i]);
                    gb.ImageUrl = "";
                    gb.BackImageUrl = "";
                    if (gb.ID.Equals("HistoryButton"))
                    {
                        HistoryArea.Text = "";
                        HistoryArea2.Text = "";
                        HistoryArea3.Text = "";
                    }
                    if (gb.ID.Equals("ViewButton"))
                    {
                        RelationArea.Text = "";
                        RelationArea2.Text = "";
                        RelationArea3.Text = "";
                    }
                    if (gb.ID.Equals("AttachButton"))
                    {
                        AttachArea.Text = "";
                        AttachArea2.Text = "";
                        attachFile.Display = false;
                    }
                    
                }
            }
            if (needToShowToolBar == false)
            {
                FloatingToolBar.Text = "";
            }
        }

        private DSCWebControl.DSCWebControlBase findControlRec(Control c, string conID)
        {
            DSCWebControl.DSCWebControlBase ele = null;
            try
            {
                ele = (DSCWebControl.DSCWebControlBase)c.FindControl(conID);
            }
            catch
            {
            }
            if (ele != null)
            {
                return ele;
            }
            for (int i = 0; i < c.Controls.Count; i++)
            {
                ele = findControlRec(c.Controls[i], conID);
                if (ele != null)
                {
                    return ele;
                }
            }
            return null;
        }
        /// <summary>
        /// 根據流程作業畫面關聯設定決定畫面各元件的狀態
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="UIStatus">目前頁面狀態</param>
        private void setProcessForm(AbstractEngine engine, string UIStatus)
        {            
            Hashtable hs = new Hashtable();

            string sql = "";
            if ((UIStatus.Equals(InitNew)) || (UIStatus.Equals(InitModify)))
            {
                sql = "select SMWDAAA.*, SMWBAAA007 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Init'";
            }
            else if (UIStatus.Equals(ProcessNew))
            {
                sql = "select SMWDAAA.*, SMWBAAA007 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='New'";
            }
            //=====================20100118念新 修改通知資料夾改採用origin設定
            //20110317hjlin 修改「已轉派工作清單、相關表單查詢」改採用origin設定 mantis 18815 
            else if (UIStatus.Equals(FormReadOnly) || UIStatus.Equals(FormNotify) || (UIStatus.Equals(FromRedirect)) || UIStatus.Equals(FormRollback))
            {
                sql = "select SMWDAAA.*, SMWBAAA007 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Origin'";
            }
            //else if (UIStatus.Equals(FormNotify))
            //{
            //    sql = "select SMWDAAA.*, SMWBAAA007 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
            //}
            //==========================================================
            else
            {
                sql = "select SMWDAAA.*, SMWBAAA007 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Display' and SMWDAAA004='" + (string)getSession("ACTName") + "'";
            }
            DataSet dsa = engine.getDataSet(sql, "TEMP");

            //如果dsa.Count=0要改用預設
            if (dsa.Tables[0].Rows.Count == 0)
            {
                sql = "select SMWDAAA.*, SMWBAAA007 from SMWDAAA inner join SMWAAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
                dsa = engine.getDataSet(sql, "TEMP");
                if (dsa.Tables[0].Rows.Count == 0)
                {
                    throw new Exception("找不到此畫面的設定檔(SMWD)");
                }
            }

            sql = "select * from SMWDAAB where SMWDAAB002='" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "'";
            DataSet dsb = engine.getDataSet(sql, "TEMP");

            //SMWDAAB005~SMWDAAB008
            for (int i = 0; i < dsb.Tables[0].Rows.Count; i++)
            {
                DSCWebControl.DSCWebControlBase ele = null;
                try
                {
                    ele = (DSCWebControl.DSCWebControlBase)this.FindControl(dsb.Tables[0].Rows[i]["SMWDAAB003"].ToString());
                }
                catch (Exception ze)
                {
                    continue;
                }
                if (ele == null)
                {
                    for (int x = 0; x < this.Form.Controls.Count; x++)
                    {
                        ele = findControlRec(this.Form.Controls[x], dsb.Tables[0].Rows[i]["SMWDAAB003"].ToString());
                        if (ele != null)
                        {
                            break;
                        }
                    }
                    if (ele == null)
                    {
                        continue;
                    }
                }
                if (dsb.Tables[0].Rows[i]["SMWDAAB005"].ToString().Equals("Y"))
                {
                    ele.Display = true;
                }
                else
                {
                    ele.Display = false;
                }
                try
                {
                    DSCWebControl.DSCLabel lb = (DSCWebControl.DSCLabel)ele;
                    if (dsb.Tables[0].Rows[i]["SMWDAAB006"].ToString().Equals("Y"))
                    {
                        lb.IsNecessary = true;
                    }
                    else
                    {
                        lb.IsNecessary = false;
                    }
                }
                catch { };

                string ctype = dsb.Tables[0].Rows[i]["SMWDAAB004"].ToString().ToUpper();
                bool isR = false;
                if (dsb.Tables[0].Rows[i]["SMWDAAB007"].ToString().Equals("Y"))
                {
                    isR = true;
                }
                else
                {
                    isR = false;
                }
                if (ctype.Equals("SINGLEFIELD"))
                {
                    DSCWebControl.SingleField v = (DSCWebControl.SingleField)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("SINGLEDATETIMEFIELD"))
                {
                    DSCWebControl.SingleDateTimeField v = (DSCWebControl.SingleDateTimeField)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("GLASSBUTTON"))
                {
                    DSCWebControl.GlassButton v = (DSCWebControl.GlassButton)ele;
                    v.Enabled = !isR;
                }
                else if (ctype.Equals("SINGLEDROPDOWNLIST"))
                {
                    DSCWebControl.SingleDropDownList v = (DSCWebControl.SingleDropDownList)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("MULTIDROPDOWNLIST"))
                {
                    DSCWebControl.MultiDropDownList v = (DSCWebControl.MultiDropDownList)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("DSCCHECKBOX"))
                {
                    DSCWebControl.DSCCheckBox v = (DSCWebControl.DSCCheckBox)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("DSCRADIOBUTTON"))
                {
                    DSCWebControl.DSCRadioButton v = (DSCWebControl.DSCRadioButton)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("DATALIST"))
                {
                    DSCWebControl.DataList v = (DSCWebControl.DataList)ele;
                    v.ReadOnly = isR;
                    //writeLog(new Exception(v.ID + ":" + isR.ToString()));
                }
                else if (ctype.Equals("OUTDATALIST"))
                {
                    DSCWebControl.OutDataList v = (DSCWebControl.OutDataList)ele;
                    v.ReadOnly = isR;
                    //writeLog(new Exception(v.ID + ":" + isR.ToString()));
                }
                else if (ctype.Equals("SINGLEOPENWINDOWFIELD"))
                {
                    DSCWebControl.SingleOpenWindowField v = (DSCWebControl.SingleOpenWindowField)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("FILEUPLOAD"))
                {
                    DSCWebControl.FileUpload v = (DSCWebControl.FileUpload)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("GRAPHFILEUPLOAD"))
                {
                    DSCWebControl.GraphFileUpload v = (DSCWebControl.GraphFileUpload)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("DSCRICHEDIT"))
                {
                    DSCWebControl.DSCRichEdit v = (DSCWebControl.DSCRichEdit)ele;
                    v.ReadOnly = isR;
                }
                hs.Add(dsb.Tables[0].Rows[i]["SMWDAAB003"].ToString(), dsb.Tables[0].Rows[i]["SMWDAAB008"].ToString());
            }

            setSession("FormAudit", hs);

            //將目前作業畫面GUID儲存
            setSession("SMWDAAA005", dsa.Tables[0].Rows[0]["SMWDAAA005"].ToString());

            //將參考流程處理模式儲存
            setSession("WaitForReference", dsa.Tables[0].Rows[0]["SMWDAAA030"].ToString());

            //將簽核後處理模式儲存
            setSession("AfterSignProcess", dsa.Tables[0].Rows[0]["SMWDAAA031"].ToString());

            //是否顯示流程圖
            setSession("IsShowFlowChart", dsa.Tables[0].Rows[0]["SMWDAAA024"].ToString());

            //草稿筆數儲存
            setSession("DraftCount", dsa.Tables[0].Rows[0]["SMWDAAA033"].ToString());

            //是否刪除草稿來源 2009/07/15 國昌
            setSession("IsDeleteDraft", dsa.Tables[0].Rows[0]["SMWDAAA034"].ToString());

            //簽核意見處理儲存
            setSession("SignOpinionSetting", dsa.Tables[0].Rows[0]);

            //處理工具列顯示以及名稱
            setToolBar(dsa);

            //國昌20090821特別處理AgreeButton & DisagreeButton
            AgreeButton.Display = false;
            DisagreeButton.Display = false;
            if ((UIStatus.Equals(ProcessNew)) || (UIStatus.Equals(ProcessModify)))
            {
                string simmode=(String)Session["SIMMODE"];
                if (simmode.Equals("2"))
                {
                    SignButton.Display = false;
                    AgreeButton.Display = true;
                    DisagreeButton.Display = true;
                }
            }

            //附件特別處理, 2009/07/15國昌加入附件上傳資訊
            if (dsa.Tables[0].Rows[0]["SMWDAAA008"].ToString().Equals("0"))
            {
                AttachButton.Display = false;
            }
            else if (dsa.Tables[0].Rows[0]["SMWDAAA008"].ToString().Equals("1"))
            {
                attachFile.NoAdd = true;
                attachFile.NoDelete = true;
            }
            else
            {
                attachFile.NoAdd = false;
                attachFile.NoDelete = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWBAAA007"].ToString().Equals("Y"))
            {
                attachFile.uploadUser = (string)Session["UserName"];
                attachFile.displayUploadTime = true;
                attachFile.displayUploadUser = true;
            }
            else
            {
                attachFile.displayUploadTime = false;
                attachFile.displayUploadUser = false;
            }
            //取回重辦特別處理
            if (!UIStatus.Equals(FromRedirect))
            {
                ReGetButton.Display = false;
            }
            //轉派特別處理
            string manualReassignType = (string)getSession("manualReassignType");
            if (manualReassignType.Equals("0"))
            {
                RedirectButton.Display = false;
            }

            //撤簽特別處理
            if (!UIStatus.Equals(FormRollback))
            {
                RollbackButton.Display = false;
            }
            else
            {
                //要判斷是否可以撤簽
                string flowOID = (string)getSession("FlowGUID");
                string wOID = fetchRollbackableWorkItemOID(engine, (string)Session["UserID"], flowOID);
                if (wOID.Equals(""))
                {
                    RollbackButton.Display = false;
                }
                else
                {
                    //將可撤簽的工作項目識別號儲存起來
                    setSession("RollbackableWorkItemOID", wOID);
                }
            }

            //EasyFlow simulate

            setSession("tempSignType", dsa.Tables[0].Rows[0]["SMWDAAA009"].ToString());

            sql = "select SMWHAAB005, SMWHAAB004 from SMWHAAB where SMWHAAB002='" + Utility.filter(dsa.Tables[0].Rows[0]["SMWDAAA010"].ToString()) + "'";
            DataSet ds = engine.getDataSet(sql, "TEMP");
            string[,] ids = new string[ds.Tables[0].Rows.Count, 2];
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                ids[i, 0] = ds.Tables[0].Rows[i][0].ToString() + ";" + i.ToString();
                ids[i, 1] = ds.Tables[0].Rows[i][1].ToString();
            }
            SignResultField.setListItem(ids);

            //這裡要設定SignShow的ClientScript, 根據SMWDAAA009,010決定. 此刻僅傳入SMWDAAA001即可
            string str = "";
            str += "<script language=javascript>";
            str += "function SignShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA027"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:275px;dialogWidth:375px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function SimSignShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=" + Page.ResolveClientUrl("../../Program/DSCGPFlowService/Public/SimShowOpinion.aspx") + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:275px;dialogWidth:375px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function SetFlowShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA014"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:475px;dialogWidth:675px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function AddSignShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA015"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:475px;dialogWidth:675px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function RejectShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA019"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:500px;dialogWidth:550px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function RedirectShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA021"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:300px;dialogWidth:580px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function ForwardShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA020"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:375px;dialogWidth:600px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function DispatchFlowShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA026"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:375px;dialogWidth:600px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function WithDrawShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA028"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:375px;dialogWidth:600px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function ReGetShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA029"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:375px;dialogWidth:600px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function RollbackShow(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA056"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:375px;dialogWidth:600px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function UserDefined1Show(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA051"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA551"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA451"].ToString() + "px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function UserDefined2Show(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA052"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA552"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA452"].ToString() + "px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function UserDefined3Show(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA053"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA553"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA453"].ToString() + "px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function UserDefined4Show(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA054"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA554"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA454"].ToString() + "px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function UserDefined5Show(){";
            str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA055"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA555"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA455"].ToString() + "px;scroll:no;status:no');";
            str += "  if(ret!=null){";
            str += "    return true;";
            str += "    }";
            str += "  else{";
            str += "      return false;";
            str += "  }";
            str += "}";
            str += "function checkCheckFieldDataResult(){";
            str += "    if(getSession('true','signCheckResult')=='True'){";
            str += "        return true;";
            str += "    }else{";
            str += "        return false;";
            str += "    }";
            str += "}";
            str += "</script>";


            Type mtype = this.GetType();
            ClientScriptManager cm = Page.ClientScript;

            if (!cm.IsStartupScriptRegistered(mtype, "SignShowScript"))
            {
                cm.RegisterStartupScript(mtype, "SignShowScript", str);
            }
        }

        /// <summary>
        /// 將NULL或者零長度字串調整成為&nbsp;
        /// </summary>
        /// <param name="ori">原始字串</param>
        /// <returns>調整後字串</returns>
        private string fixNbspS(string ori)
        {
            ori = fixNullS(ori);
            if (ori.Equals(""))
            {
                return "&nbsp;";
            }
            else
            {
                return ori;
            }
        }
        /// <summary>
        /// 將輸入字串為null的調整成為零長度字串
        /// </summary>
        /// <param name="ori">輸入字串</param>
        /// <returns>調整後字串</returns>
        private string fixNullS(string ori)
        {
            if (ori == null)
            {
                return "";
            }
            else
            {
                return ori;
            }
        }

        /// <summary>
        /// 根據一般作業畫面設定決定畫面各元件的狀態
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="isnew">true:新增狀態; false:顯示狀態</param>
        private void setGeneralForm(AbstractEngine engine, bool isnew)
        {
            Hashtable hs = new Hashtable();

            string sql = "select * from SMWAAAB inner join SMWAAAA on SMWAAAB002=SMWAAAA001 where SMWAAAA002='" + ProcessPageID + "'";
            DataSet ds = engine.getDataSet(sql, "TEMP");

            if (isnew)
            {
                //SMWAAAB005~SMWAAAB008
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    DSCWebControl.DSCWebControlBase ele = null;
                    try
                    {
                        ele = (DSCWebControl.DSCWebControlBase)this.FindControl(ds.Tables[0].Rows[i]["SMWAAAB003"].ToString());
                    }
                    catch
                    {
                        continue;
                    }
                    if (ele == null)
                    {
                        for (int x = 0; x < this.Form.Controls.Count; x++)
                        {
                            ele = findControlRec(this.Form.Controls[x], ds.Tables[0].Rows[i]["SMWAAAB003"].ToString());
                            if (ele != null)
                            {
                                break;
                            }
                        }
                        if (ele == null)
                        {
                            continue;
                        }
                    }
                    if (ds.Tables[0].Rows[i]["SMWAAAB005"].ToString().Equals("Y"))
                    {
                        ele.Display = true;
                    }
                    else
                    {
                        ele.Display = false;
                    }
                    try
                    {
                        DSCWebControl.DSCLabel lb = (DSCWebControl.DSCLabel)ele;
                        if (ds.Tables[0].Rows[i]["SMWAAAB006"].ToString().Equals("Y"))
                        {
                            lb.IsNecessary = true;
                        }
                        else
                        {
                            lb.IsNecessary = false;
                        }
                    }
                    catch { };

                    string ctype = ds.Tables[0].Rows[i]["SMWAAAB004"].ToString().ToUpper();
                    bool isR = false;
                    if (ds.Tables[0].Rows[i]["SMWAAAB007"].ToString().Equals("Y"))
                    {
                        isR = true;
                    }
                    else
                    {
                        isR = false;
                    }
                    if (ctype.Equals("SINGLEFIELD"))
                    {
                        DSCWebControl.SingleField v = (DSCWebControl.SingleField)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("SINGLEDATETIMEFIELD"))
                    {
                        DSCWebControl.SingleDateTimeField v = (DSCWebControl.SingleDateTimeField)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("GLASSBUTTON"))
                    {
                        DSCWebControl.GlassButton v = (DSCWebControl.GlassButton)ele;
                        v.Enabled = !isR;
                    }
                    else if (ctype.Equals("SINGLEDROPDOWNLIST"))
                    {
                        DSCWebControl.SingleDropDownList v = (DSCWebControl.SingleDropDownList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("MULTIDROPDOWNLIST"))
                    {
                        DSCWebControl.MultiDropDownList v = (DSCWebControl.MultiDropDownList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("DSCCHECKBOX"))
                    {
                        DSCWebControl.DSCCheckBox v = (DSCWebControl.DSCCheckBox)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("DSCRADIOBUTTON"))
                    {
                        DSCWebControl.DSCRadioButton v = (DSCWebControl.DSCRadioButton)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("DATALIST"))
                    {
                        DSCWebControl.DataList v = (DSCWebControl.DataList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("OUTDATALIST"))
                    {
                        DSCWebControl.OutDataList v = (DSCWebControl.OutDataList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("SINGLEOPENWINDOWFIELD"))
                    {
                        DSCWebControl.SingleOpenWindowField v = (DSCWebControl.SingleOpenWindowField)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("FILEUPLOAD"))
                    {
                        DSCWebControl.FileUpload v = (DSCWebControl.FileUpload)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("GRAPHFILEUPLOAD"))
                    {
                        DSCWebControl.GraphFileUpload v = (DSCWebControl.GraphFileUpload)ele;
                        v.ReadOnly = isR;
                    }
                    hs.Add(ds.Tables[0].Rows[i]["SMWAAAB003"].ToString(), ds.Tables[0].Rows[i]["SMWAAAB008"].ToString());
                }
            }
            else
            {
                //SMWAAAB009~SMWAAAB012
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    DSCWebControl.DSCWebControlBase ele = null;
                    try
                    {
                        ele = (DSCWebControl.DSCWebControlBase)this.FindControl(ds.Tables[0].Rows[i]["SMWAAAB003"].ToString());
                    }
                    catch
                    {
                        continue;
                    }
                    if (ele == null)
                    {
                        for (int x = 0; x < this.Form.Controls.Count; x++)
                        {
                            ele = findControlRec(this.Form.Controls[x], ds.Tables[0].Rows[i]["SMWAAAB003"].ToString());
                            if (ele != null)
                            {
                                break;
                            }
                        }
                        if (ele == null)
                        {
                            continue;
                        }
                    }
                    if (ds.Tables[0].Rows[i]["SMWAAAB009"].ToString().Equals("Y"))
                    {
                        ele.Display = true;
                    }
                    else
                    {
                        ele.Display = false;
                    }
                    try
                    {
                        DSCWebControl.DSCLabel lb = (DSCWebControl.DSCLabel)ele;
                        if (ds.Tables[0].Rows[i]["SMWAAAB010"].ToString().Equals("Y"))
                        {
                            lb.IsNecessary = true;
                        }
                        else
                        {
                            lb.IsNecessary = false;
                        }
                    }
                    catch { };

                    string ctype = ds.Tables[0].Rows[i]["SMWAAAB004"].ToString().ToUpper();
                    bool isR = false;
                    if (ds.Tables[0].Rows[i]["SMWAAAB011"].ToString().Equals("Y"))
                    {
                        isR = true;
                    }
                    else
                    {
                        isR = false;
                    }
                    if (ctype.Equals("SINGLEFIELD"))
                    {
                        DSCWebControl.SingleField v = (DSCWebControl.SingleField)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("SINGLEDATETIMEFIELD"))
                    {
                        DSCWebControl.SingleDateTimeField v = (DSCWebControl.SingleDateTimeField)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("GLASSBUTTON"))
                    {
                        DSCWebControl.GlassButton v = (DSCWebControl.GlassButton)ele;
                        v.Enabled = !isR;
                    }
                    else if (ctype.Equals("SINGLEDROPDOWNLIST"))
                    {
                        DSCWebControl.SingleDropDownList v = (DSCWebControl.SingleDropDownList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("MULTIDROPDOWNLIST"))
                    {
                        DSCWebControl.MultiDropDownList v = (DSCWebControl.MultiDropDownList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("DSCCHECKBOX"))
                    {
                        DSCWebControl.DSCCheckBox v = (DSCWebControl.DSCCheckBox)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("DSCRADIOBUTTON"))
                    {
                        DSCWebControl.DSCRadioButton v = (DSCWebControl.DSCRadioButton)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("DATALIST"))
                    {
                        DSCWebControl.DataList v = (DSCWebControl.DataList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("OUTDATALIST"))
                    {
                        DSCWebControl.OutDataList v = (DSCWebControl.OutDataList)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("SINGLEOPENWINDOWFIELD"))
                    {
                        DSCWebControl.SingleOpenWindowField v = (DSCWebControl.SingleOpenWindowField)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("FILEUPLOAD"))
                    {
                        DSCWebControl.FileUpload v = (DSCWebControl.FileUpload)ele;
                        v.ReadOnly = isR;
                    }
                    else if (ctype.Equals("GRAPHFILEUPLOAD"))
                    {
                        DSCWebControl.GraphFileUpload v = (DSCWebControl.GraphFileUpload)ele;
                        v.ReadOnly = isR;
                    }
                    hs.Add(ds.Tables[0].Rows[i]["SMWAAAB003"].ToString(), ds.Tables[0].Rows[i]["SMWAAAB012"].ToString());

                }
            }
            setSession("FormAudit", hs);
            //按鈕權限
            WebServerProject.auth.AUTHAgent authagent = new WebServerProject.auth.AUTHAgent();
            authagent.engine = engine;

            int auth = authagent.getAuthFromAuthItem(ds.Tables[0].Rows[0]["SMWAAAA008"].ToString(), (string)Session["UserID"], (string[])Session["usergroup"]);

            if (isnew)
            {
                if (!authagent.parse(auth, AUTHAgent.ADD))
                {
                    SaveButton.Display = false;
                }
            }
            else
            {
                if (!authagent.parse(auth, AUTHAgent.MODIFY))
                {
                    SaveButton.Display = false;
                }
                if (!authagent.parse(auth, AUTHAgent.DELETE))
                {
                    DeleteButton.Display = false;
                }
                if (!authagent.parse(auth, AUTHAgent.PRINT))
                {
                    PrintCertificateButton.Display = false;
                }
            }

            //設定畫面
            if (ds.Tables[0].Rows[0]["SMWAAAA010"].ToString().Equals("Y"))
            {
                if (isnew)
                {
                    if (ds.Tables[0].Rows[0]["SMWAAAA011"].ToString().Equals("N"))
                    {
                        SaveButton.Display = false;
                    }
                    if (ds.Tables[0].Rows[0]["SMWAAAA012"].ToString().Equals("N"))
                    {
                        RefreshButton.Display = false;
                    }
                    if (ds.Tables[0].Rows[0]["SMWAAAA013"].ToString().Equals("N"))
                    {
                        BackListButton.Display = false;
                    }

                    SaveButton.Text = ds.Tables[0].Rows[0]["SMWAAAA021"].ToString();
                    RefreshButton.Text = ds.Tables[0].Rows[0]["SMWAAAA022"].ToString();
                    BackListButton.Text = ds.Tables[0].Rows[0]["SMWAAAA023"].ToString();
                }
                else
                {
                    if (ds.Tables[0].Rows[0]["SMWAAAA014"].ToString().Equals("N"))
                    {
                        SaveButton.Display = false;
                    }
                    if (ds.Tables[0].Rows[0]["SMWAAAA015"].ToString().Equals("N"))
                    {
                        DeleteButton.Display = false;
                    }
                    if (ds.Tables[0].Rows[0]["SMWAAAA016"].ToString().Equals("N"))
                    {
                        RefreshButton.Display = false;
                    }
                    if (ds.Tables[0].Rows[0]["SMWAAAA017"].ToString().Equals("N"))
                    {
                        HistoryButton.Display = false;
                    }
                    if (ds.Tables[0].Rows[0]["SMWAAAA018"].ToString().Equals("N"))
                    {
                        BackListButton.Display = false;
                    }
                    if (ds.Tables[0].Rows[0]["SMWAAAA019"].ToString().Equals("N"))
                    {
                        PrintCertificateButton.Display = false;
                    }
                    SaveButton.Text = ds.Tables[0].Rows[0]["SMWAAAA024"].ToString();
                    DeleteButton.Text = ds.Tables[0].Rows[0]["SMWAAAA025"].ToString();
                    RefreshButton.Text = ds.Tables[0].Rows[0]["SMWAAAA026"].ToString();
                    HistoryButton.Text = ds.Tables[0].Rows[0]["SMWAAAA027"].ToString();
                    BackListButton.Text = ds.Tables[0].Rows[0]["SMWAAAA028"].ToString();
                    PrintCertificateButton.Text = ds.Tables[0].Rows[0]["SMWAAAA029"].ToString();
                }
            }
            //國昌20090821特別處理AgreeButton & DisagreeButton
            AgreeButton.Display = false;
            DisagreeButton.Display = false;
            
        }

        /// <summary>
        /// 根據作業畫面定義SMWAAAB將所有欄位ReadOnly
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        private void setReadOnlyForm(AbstractEngine engine, string UIStatus)
        {
            Hashtable hs = new Hashtable();

            string sql = "select * from SMWAAAB inner join SMWAAAA on SMWAAAB002=SMWAAAA001 where SMWAAAA002='" + ProcessPageID + "'";
            DataSet ds = engine.getDataSet(sql, "TEMP");

            //SMWAAAB005~SMWAAAB008
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                DSCWebControl.DSCWebControlBase ele = null;
                try
                {
                    ele = (DSCWebControl.DSCWebControlBase)this.FindControl(ds.Tables[0].Rows[i]["SMWAAAB003"].ToString());
                }
                catch
                {
                    continue;
                }
                if (ele == null)
                {
                    for (int x = 0; x < this.Form.Controls.Count; x++)
                    {
                        ele = findControlRec(this.Form.Controls[x], ds.Tables[0].Rows[i]["SMWAAAB003"].ToString());
                        if (ele != null)
                        {
                            break;
                        }
                    }
                    if (ele == null)
                    {
                        continue;
                    }
                }


                string ctype = ds.Tables[0].Rows[i]["SMWAAAB004"].ToString().ToUpper();
                bool isR = true;
                if (ctype.Equals("SINGLEFIELD"))
                {
                    DSCWebControl.SingleField v = (DSCWebControl.SingleField)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("SINGLEDATETIMEFIELD"))
                {
                    DSCWebControl.SingleDateTimeField v = (DSCWebControl.SingleDateTimeField)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("GLASSBUTTON"))
                {
                    DSCWebControl.GlassButton v = (DSCWebControl.GlassButton)ele;
                    if (isR)
                    {
                        v.Enabled = false;
                    }
                    else
                    {
                        v.Enabled = true;
                    }
                }
                else if (ctype.Equals("SINGLEDROPDOWNLIST"))
                {
                    DSCWebControl.SingleDropDownList v = (DSCWebControl.SingleDropDownList)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("MULTIDROPDOWNLIST"))
                {
                    DSCWebControl.MultiDropDownList v = (DSCWebControl.MultiDropDownList)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("DSCCHECKBOX"))
                {
                    DSCWebControl.DSCCheckBox v = (DSCWebControl.DSCCheckBox)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("DSCRADIOBUTTON"))
                {
                    DSCWebControl.DSCRadioButton v = (DSCWebControl.DSCRadioButton)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("DATALIST"))
                {
                    DSCWebControl.DataList v = (DSCWebControl.DataList)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("OUTDATALIST"))
                {
                    DSCWebControl.OutDataList v = (DSCWebControl.OutDataList)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("SINGLEOPENWINDOWFIELD"))
                {
                    DSCWebControl.SingleOpenWindowField v = (DSCWebControl.SingleOpenWindowField)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("FILEUPLOAD"))
                {
                    DSCWebControl.FileUpload v = (DSCWebControl.FileUpload)ele;
                    v.ReadOnly = isR;
                }
                else if (ctype.Equals("GRAPHFILEUPLOAD"))
                {
                    DSCWebControl.GraphFileUpload v = (DSCWebControl.GraphFileUpload)ele;
                    v.ReadOnly = isR;
                }
                hs.Add(ds.Tables[0].Rows[i]["SMWAAAB003"].ToString(), ds.Tables[0].Rows[i]["SMWAAAB008"].ToString());
            }

            setSession("FormAudit", hs);

            //這裡要看看是不是表單
            bool isForm = true;

            //這裡要由SMWDAAA根據此作業畫面的Origin狀態取得按鈕名稱以及設定是否允許轉寄等
            //但是要特別注意相關表單的設定

            //=====================20100118念新 修改通知資料夾改採用origin設定
            //if (UIStatus.Equals(FormNotify))
            //{
            //    sql = "select SMWDAAA.*,SMWBAAA007 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
            //}
            //else
            //{
            //    sql = "select SMWDAAA.*,SMWBAAA007 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Origin'";
            //}
            sql = "select SMWDAAA.*,SMWBAAA007 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Origin'";
            //=================================
            DataSet dsa = engine.getDataSet(sql, "TEMP");
            if (dsa.Tables[0].Rows.Count == 0)
            {
                //國昌20100402 mantis 0016689: 若Origin設定不存在，改用Default設定
                sql = "select SMWDAAA.*,SMWBAAA007 from SMWAAAA inner join SMWDAAA on SMWAAAA001=SMWDAAA005 inner join SMWBAAA on SMWBAAA004=SMWDAAA003 where SMWAAAA002='" + ProcessPageID + "' and SMWDAAA006='Default'";
                dsa = engine.getDataSet(sql, "TEMP");
                if (dsa.Tables[0].Rows.Count == 0)
                {
                    isForm = false;
                }
            }

            if (isForm)
            {
                setToolBar(dsa);

                //國昌20090821特別處理AgreeButton & DisagreeButton
                AgreeButton.Display = false;
                DisagreeButton.Display = false;

                //附件特別處理
                /*
                if (dsa.Tables[0].Rows[0]["SMWDAAA008"].ToString().Equals("0"))
                {
                    AttachButton.Display = false;
                }
                else
                {
                    attachFile.NoAdd = false;
                    attachFile.NoDelete = false;
                }
                */
                attachFile.NoAdd = true;
                attachFile.NoDelete = true;
                if (dsa.Tables[0].Rows[0]["SMWBAAA007"].ToString().Equals("Y"))
                {
                    attachFile.uploadUser = (string)Session["UserName"];
                    attachFile.displayUploadTime = true;
                    attachFile.displayUploadUser = true;
                }
                else
                {
                    attachFile.displayUploadTime = false;
                    attachFile.displayUploadUser = false;
                }

                //若SMWYAAA中的狀態已經結案, 則無法撤銷
                string objectGUID = (string)getSession("ObjectGUID");
                sql = "select SMWYAAA020 from SMWYAAA where SMWYAAA019='" + objectGUID + "'";
                ds = engine.getDataSet(sql, "TEMP");
                if (ds.Tables[0].Rows.Count == 0)
                {
                    WithDrawButton.Display = false;
                }
                else
                {
                    if (!ds.Tables[0].Rows[0][0].Equals("I"))
                    {
                        WithDrawButton.Display = false;
                    }
                }
                //如果傳入參數IsAllowWithDraw為false, 無法撤銷
                if (((bool)getSession("IsAllowWithDraw")) == false)
                {
                    WithDrawButton.Display = false;
                }

                //儲存簽核意見各項設定
                setSession("SignOpinionSetting", dsa.Tables[0].Rows[0]);

                //設定轉寄功能
                string str = "";
                str += "<script language=javascript>";

                str += "function ForwardShow(){";
                str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA020"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:375px;dialogWidth:600px;scroll:no;status:no');";
                str += "  if(ret!=null){";
                str += "    return true;";
                str += "    }";
                str += "  else{";
                str += "      return false;";
                str += "  }";
                str += "}";
                str += "function WithDrawShow(){";
                str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA028"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:375px;dialogWidth:600px;scroll:no;status:no');";
                str += "  if(ret!=null){";
                str += "    return true;";
                str += "    }";
                str += "  else{";
                str += "      return false;";
                str += "  }";
                str += "}";
                str += "function UserDefined1Show(){";
                str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA051"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA551"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA451"].ToString() + "px;scroll:no;status:no');";
                str += "  if(ret!=null){";
                str += "    return true;";
                str += "    }";
                str += "  else{";
                str += "      return false;";
                str += "  }";
                str += "}";
                str += "function UserDefined2Show(){";
                str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA052"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA552"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA452"].ToString() + "px;scroll:no;status:no');";
                str += "  if(ret!=null){";
                str += "    return true;";
                str += "    }";
                str += "  else{";
                str += "      return false;";
                str += "  }";
                str += "}";
                str += "function UserDefined3Show(){";
                str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA053"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA553"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA453"].ToString() + "px;scroll:no;status:no');";
                str += "  if(ret!=null){";
                str += "    return true;";
                str += "    }";
                str += "  else{";
                str += "      return false;";
                str += "  }";
                str += "}";
                str += "function UserDefined4Show(){";
                str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA054"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA554"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA454"].ToString() + "px;scroll:no;status:no');";
                str += "  if(ret!=null){";
                str += "    return true;";
                str += "    }";
                str += "  else{";
                str += "      return false;";
                str += "  }";
                str += "}";
                str += "function UserDefined5Show(){";
                str += "  ret=ECPScriptLibrary.showModalDialog('" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/") + "?url=../../" + dsa.Tables[0].Rows[0]["SMWDAAA055"].ToString() + "&PGID=" + PageUniqueID + "&SMWDAAA001=" + dsa.Tables[0].Rows[0]["SMWDAAA001"].ToString() + "','','dialogHeight:" + dsa.Tables[0].Rows[0]["SMWDAAA555"].ToString() + "px;dialogWidth:" + dsa.Tables[0].Rows[0]["SMWDAAA455"].ToString() + "px;scroll:no;status:no');";
                str += "  if(ret!=null){";
                str += "    return true;";
                str += "    }";
                str += "  else{";
                str += "      return false;";
                str += "  }";
                str += "}"; str += "</script>";


                Type mtype = this.GetType();
                ClientScriptManager cm = Page.ClientScript;

                if (!cm.IsStartupScriptRegistered(mtype, "SignShowScript"))
                {
                    cm.RegisterStartupScript(mtype, "SignShowScript", str);
                }
            }
            else
            {
                //非表單模式, 直接將所有工具列隱藏
                hideAllToolBar();
            }
        }

        /// <summary>
        /// 根據DataSet內容(SMWDAAA)決定工具列的顯示與否以及名稱
        /// </summary>
        /// <param name="dsa">SMWDAAA資料表</param>
        private void setToolBar(DataSet dsa)
        {
            //設定畫面
            if (dsa.Tables[0].Rows[0]["SMWDAAA101"].ToString().Equals("N"))
            {
                SaveButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA102"].ToString().Equals("N"))
            {
                DeleteButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA103"].ToString().Equals("N"))
            {
                SubmitButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA104"].ToString().Equals("N"))
            {
                SignButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA105"].ToString().Equals("N"))
            {
                AttachButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA106"].ToString().Equals("N"))
            {
                SaveDraftButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA107"].ToString().Equals("N"))
            {
                ReadDraftButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA108"].ToString().Equals("N"))
            {
                ViewButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA109"].ToString().Equals("N"))
            {
                RefreshButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA110"].ToString().Equals("N"))
            {
                ViewFlowButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA111"].ToString().Equals("N"))
            {
                SetFlowButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA112"].ToString().Equals("N"))
            {
                AddSignButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA113"].ToString().Equals("N"))
            {
                WithDrawButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA114"].ToString().Equals("N"))
            {
                RejectButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA115"].ToString().Equals("N"))
            {
                ForwardButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA116"].ToString().Equals("N"))
            {
                DispatchFlowButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA117"].ToString().Equals("N"))
            {
                CopyFormButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA118"].ToString().Equals("N"))
            {
                HistoryButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA119"].ToString().Equals("N"))
            {
                PrintCertificateButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA120"].ToString().Equals("N"))
            {
                BackListButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA121"].ToString().Equals("N"))
            {
                RedirectButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA122"].ToString().Equals("N"))
            {
                ReGetButton.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA151"].ToString().Equals("N"))
            {
                UserDefineButton1.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA152"].ToString().Equals("N"))
            {
                UserDefineButton2.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA153"].ToString().Equals("N"))
            {
                UserDefineButton3.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA154"].ToString().Equals("N"))
            {
                UserDefineButton4.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA155"].ToString().Equals("N"))
            {
                UserDefineButton5.Display = false;
            }
            if (dsa.Tables[0].Rows[0]["SMWDAAA156"].ToString().Equals("N"))
            {
                RollbackButton.Display = false;
            }

            //mantis 0018679 修正多語系工具列文字被「流程作業畫面關聯作業」設定所覆蓋。
            //2011/01/11 hjlin 增加一條件式
            if (((string)Session["Locale"]).Equals("zh_TW"))
            {
                string offsetStr = "";
                SaveButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA201"].ToString();
                DeleteButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA202"].ToString();
                SubmitButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA203"].ToString();
                SignButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA204"].ToString();
                AttachButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA205"].ToString();
                SaveDraftButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA206"].ToString();
                ReadDraftButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA207"].ToString();
                ViewButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA208"].ToString();
                RefreshButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA209"].ToString();
                ViewFlowButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA210"].ToString();
                SetFlowButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA211"].ToString();
                AddSignButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA212"].ToString();
                WithDrawButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA213"].ToString();
                RejectButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA214"].ToString();
                ForwardButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA215"].ToString();
                DispatchFlowButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA216"].ToString();
                CopyFormButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA217"].ToString();
                HistoryButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA218"].ToString();
                PrintCertificateButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA219"].ToString();
                BackListButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA220"].ToString();
                RedirectButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA221"].ToString();
                ReGetButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA222"].ToString();
                UserDefineButton1.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA251"].ToString();
                UserDefineButton2.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA252"].ToString();
                UserDefineButton3.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA253"].ToString();
                UserDefineButton4.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA254"].ToString();
                UserDefineButton5.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA255"].ToString();
                RollbackButton.Text = offsetStr + dsa.Tables[0].Rows[0]["SMWDAAA256"].ToString();
            }
            
        }

        /// <summary>
        /// 儲存畫面傳入參數
        /// </summary>
        private void saveParameter()
        {
            string tmpUIType = fixNull(Request.QueryString["UIType"]);
            string tmpUIStatus = fixNull(Request.QueryString["UIStatus"]);
            string tmpParentPanelID = fixNull(Request.QueryString["ParentPanelID"]); 
            string tmpDataListID = fixNull(Request.QueryString["DataListID"]);
            string tmpObjectGUID = fixNull(Request.QueryString["ObjectGUID"]);
            string tmpFlowGUID = fixNull(Request.QueryString["FlowGUID"]);
            string tmpACTID = fixNull(Request.QueryString["ACTID"]);
            string tmpPDID = fixNull(Request.QueryString["PDID"]);
            string tmpPDVer = fixNull(Request.QueryString["PDVer"]);
            string tmpACTName = fixNull(Request.QueryString["ACTName"]);
            string tmpCurPanelID = fixNull(Request.QueryString["CurPanelID"]);
            string tmpWorkItemOID = fixNull(Request.QueryString["WorkItemOID"]);
            string tmpTargetWorkItemOID = fixNull(Request.QueryString["TargetWorkItemOID"]);
            string tmpworkAssignmentOID = fixNull(Request.QueryString["workAssignmentOID"]);
            string tmpAssignmentType = fixNull(Request.QueryString["assignmentType"]);
            string tmpReAssignmentType = fixNull(Request.QueryString["reassignmentType"]);
            string tmpmanualReassignType = fixNull(Request.QueryString["manualReassignType"]);
            string tmpIsAllowWithDraw = fixNull(Request.QueryString["IsAllowWithDraw"]);
            string tmpIsMaintain = fixNull(Request.QueryString["IsMaintain"]);
            tmpIsAllowWithDraw = com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpIsAllowWithDraw);

            //XSS White List way；防範原則是進入的參數應該是該參數該有的樣子            
            tmpParentPanelID =intTryParse(tmpParentPanelID);
            tmpCurPanelID = intTryParse(tmpCurPanelID);

            tmpAssignmentType = intTryParse(tmpAssignmentType);
            tmpReAssignmentType = intTryParse(tmpReAssignmentType);

            tmpFlowGUID = com.dsc.kernal.utility.Utility.filter(antiFormXSS(tmpFlowGUID));
            tmpworkAssignmentOID = com.dsc.kernal.utility.Utility.filter(checkLegalOID(tmpworkAssignmentOID));
            tmpTargetWorkItemOID = com.dsc.kernal.utility.Utility.filter(checkLegalOID(tmpTargetWorkItemOID));                                  
            
            tmpWorkItemOID = com.dsc.kernal.utility.Utility.filter(checkLegalOID(tmpWorkItemOID));

            tmpDataListID = antiFormXSS(tmpDataListID);
            tmpACTName = antiFormXSS(tmpACTName);

            if(!tmpUIType.Equals(Process) &&
                !tmpUIType.Equals(General)
                )
            {
                tmpUIType = "";
            }
            setSession("UIType", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpUIType));
            setSession("UIStatus", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpUIStatus));
            //加入Replace, 過濾單引號之目的在於該參數會被置於網頁Reponse中, 有XSS的疑慮
            //考量相關參數之內容並無含單引號之可能 ; 因此濾除
            setSession("ParentPanelID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpParentPanelID).Replace("'", ""));
            setSession("DataListID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpDataListID).Replace("'", ""));
            setSession("ObjectGUID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpObjectGUID));
            setSession("FlowGUID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpFlowGUID));
            setSession("ACTID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpACTID));
            setSession("PDID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpPDID));
            setSession("PDVer", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpPDVer));
            setSession("ACTName", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpACTName));
            setSession("CurPanelID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpCurPanelID).Replace("'",""));            
            setSession("WorkItemOID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpWorkItemOID));
            setSession("TargetWorkItemOID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpTargetWorkItemOID));
            setSession("workAssignmentOID", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpworkAssignmentOID));
            setSession("AssignmentType", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpAssignmentType));
            setSession("ReAssignmentType", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpReAssignmentType));
            setSession("manualReassignType", com.dsc.kernal.utility.Utility.CheckCrossSiteScripting(tmpmanualReassignType));

            try
            {
                setSession("IsAllowWithDraw", bool.Parse(tmpIsAllowWithDraw));
            }
            catch
            {
                setSession("IsAllowWithDraw", false);
            }
            setSession("IsMaintain", tmpIsMaintain);

            SubmitInfo si = new SubmitInfo();
            setSession("SubmitInfo", si);

            DataObjectSet addSignGroup = new DataObjectSet();
            addSignGroup.setAssemblyName("WebServerProject");
            addSignGroup.setChildClassString("WebServerProject.flow.SMWP.SMWPAAA");
            addSignGroup.setTableName("SMWPAAA");
            setSession("AddSignGroup", addSignGroup);

            DataObjectSet setFlowGroup = new DataObjectSet();
            setFlowGroup.setAssemblyName("WebServerProject");
            setFlowGroup.setChildClassString("WebServerProject.flow.SMWP.SMWPAAA");
            setFlowGroup.setTableName("SMWPAAA");
            setSession("SetFlowGroup", setFlowGroup);

            setSession("IsAddSign", "");
            setSession("IsSetFlow", "");
        }

        /// <summary>
        /// 將加簽的資料串成xml
        /// </summary>
        /// <returns>加簽的xml</returns>
        private string getAddSignXml()
        {
            DataObjectSet dos = (DataObjectSet)getSession("AddSignGroup");
            if (dos.getAvailableDataObjectCount() > 0)
            {
                string xml = "<list>";
                //xml += "<list>";

                for (int i = 0; i < dos.getAvailableDataObjectCount(); i++)
                {
                    SMWPAAA aa = (SMWPAAA)dos.getAvailableDataObject(i);
                    xml += "<com.dsc.nana.data_transfer.ActivityDefinitionForClientListDTO>";
                    xml += "<performers>";
                    string[] tag = aa.SMWPAAA004.Split(new char[] { '#' });
                    for (int j = 0; j < tag.Length; j++)
                    {
                        string[] ztag = tag[j].Split(new char[] { ';' });
                        xml += "<com.dsc.nana.data_transfer.ActivityDefPerformerForClientListDTO>";
                        xml += "<OID>" + ztag[1] + "</OID>";
                        xml += "<participantType><value>" + ztag[0] + "</value></participantType>";
                        xml += "</com.dsc.nana.data_transfer.ActivityDefPerformerForClientListDTO>";
                    }
                    xml += "</performers>";

                    xml += "<multiUserMode><value>" + aa.SMWPAAA005 + "</value></multiUserMode>";
                    xml += "<name>" + aa.SMWPAAA003 + "</name>";
                    xml += "<performType><value>" + aa.SMWPAAA006 + "</value></performType>";

                    xml += "</com.dsc.nana.data_transfer.ActivityDefinitionForClientListDTO>";
                }

                //xml += "</list>";
                xml += "</list>";

                return xml;
            }
            else
            {
                return "";
            }
        }

        /// <summary>
        /// 將設定流程的資料串成xml
        /// </summary>
        /// <returns>設定流程的xml</returns>
        private string getSetFlowXml()
        {
            DataObjectSet dos = (DataObjectSet)getSession("SetFlowGroup");
            if (dos.getAvailableDataObjectCount() > 0)
            {
                //string xml = "";
                string xml = "<list>";
                xml += "<list>";

                for (int i = 0; i < dos.getAvailableDataObjectCount(); i++)
                {
                    SMWPAAA aa = (SMWPAAA)dos.getAvailableDataObject(i);
                    xml += "<com.dsc.nana.data_transfer.ActivityDefinitionForClientListDTO>";
                    xml += "<performers>";
                    string[] tag = aa.SMWPAAA004.Split(new char[] { '#' });
                    for (int j = 0; j < tag.Length; j++)
                    {
                        string[] ztag = tag[j].Split(new char[] { ';' });
                        xml += "<com.dsc.nana.data_transfer.ActivityDefPerformerForClientListDTO>";
                        xml += "<OID>" + ztag[1] + "</OID>";
                        xml += "<participantType><value>" + ztag[0] + "</value></participantType>";
                        xml += "</com.dsc.nana.data_transfer.ActivityDefPerformerForClientListDTO>";
                    }
                    xml += "</performers>";

                    xml += "<multiUserMode><value>" + aa.SMWPAAA005 + "</value></multiUserMode>";
                    xml += "<name>" + aa.SMWPAAA003 + "</name>";
                    xml += "<performType><value>" + aa.SMWPAAA006 + "</value></performType>";

                    xml += "</com.dsc.nana.data_transfer.ActivityDefinitionForClientListDTO>";
                }

                xml += "</list>";
                xml += "</list>";

                return xml;
            }
            else
            {
                return "";
            }
        }
        /// <summary>
        /// 處理錯誤訊息的方法
        /// </summary>
        /// <param name="level">錯誤等級</param>
        /// <param name="e">例外物件</param>
        protected void processErrorMessage(int level, Exception e)
        {
            processErrorMessage(level, e, false);
        }

        /// <summary>
        /// 處理錯誤訊息的方法
        /// </summary>
        /// <param name="e">例外物件</param>
        protected void processErrorMessage(int level, Exception e, bool isSignProcess)
        {
            if (isSignProcess)
            {
                //Mantis0019608
                if (Request.Form["DSCWebControl"] == null)
                {
                    Response.Write("<script>alert('" + GPErrorMessage + "');</script>");
                }
                else
                {
                    Response.Write("alert('" + GPErrorMessage + "');");
                }
            }
            else
            {
                //Mantis0019608
                //20120323 如果是DSCWebControl透過SyncCall執行JS命令時 ; 不可含<script>
                if (Request.Form["DSCWebControl"] == null)
                {
                    Response.Write("<script>alert('" + e.Message.Replace("\r", "\\r").Replace("\n", "\\n").Replace("Not all WorkItems are done successfully!", "他人已簽核") + "');</script>");
                }
                else
                {
                    Response.Write("alert('" + e.Message.Replace("\r", "\\r").Replace("\n", "\\n").Replace("Not all WorkItems are done successfully!", "他人已簽核") + "');");
                }
            }
            //這裡要整合稽核模組
            string ProgramName = (string)getSession("ProgramName");

            string connectString = (string)Session["connectString"];
            string engineType = (string)Session["engineType"];

            IOFactory factory = new IOFactory();
            AbstractEngine engine = factory.getEngine(engineType, connectString);

            WebServerProject.Audit au = new Audit(engine);
            bool res = au.writeLog(ApplicationID, ModuleID, ProcessPageID, ProgramName, level, e.Message, e.StackTrace, (string)Session["UserID"], (string)Session["UserName"], Request.ServerVariables["REMOTE_ADDR"], Request.ServerVariables["HTTP_USER_AGENT"]);

            engine.close();

            if (debugPage)
            {
                string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 10).Replace("/", "");
                fname = Server.MapPath("~/LogFolder/" + fname + ".log");
                System.IO.StreamWriter sw = new System.IO.StreamWriter(fname, true);
                sw.WriteLine(DateTimeUtility.getSystemTime2(null) + "======================");
                sw.WriteLine(e.StackTrace);
                sw.WriteLine(e.Message);
                sw.Close();
            }
        }

        /// <summary>
        /// 隱藏所有工具列
        /// </summary>
        private void hideAllToolBar()
        {
            //國昌20090821特別處理AgreeButton & DisagreeButton
            AgreeButton.Display = false;
            DisagreeButton.Display = false;

            SaveButton.Display = false;
            DeleteButton.Display = false;
            SubmitButton.Display = false;
            SignButton.Display = false;
            AttachButton.Display = false;
            SaveDraftButton.Display = false;
            ReadDraftButton.Display = false;
            ViewButton.Display = false;
            RefreshButton.Display = false;
            ViewFlowButton.Display = false;
            SetFlowButton.Display = false;
            AddSignButton.Display = false;
            WithDrawButton.Display = false;
            RejectButton.Display = false;
            ForwardButton.Display = false;
            DispatchFlowButton.Display = false;
            CopyFormButton.Display = false;
            HistoryButton.Display = false;
            PrintCertificateButton.Display = false;
            BackListButton.Display = false;
            RedirectButton.Display = false;
            ReGetButton.Display = false;
            RollbackButton.Display = false;
            UserDefineButton1.Display = false;
            UserDefineButton2.Display = false;
            UserDefineButton3.Display = false;
            UserDefineButton4.Display = false;
            UserDefineButton5.Display = false;
        }

        /// <summary>
        /// 初始化工具列
        /// </summary>
        private void initToolBar()
        {
            string simMode = (string)Session["SIMMODE"];

            if (Request.QueryString["CertificateMode"] != null)
            {
            }
            else
            {
                //start 2009/06/08 hjlin modify
                //FloatingToolBar.Text = "<div id=TSPACES style={height:1px}></div><div id=FTB style={position:absolute;top:0px;left:0px;height:25px;z-index:9999;width:100%;}><table border=0 width=100% height=100% style={position:absolute;top:0px;left:0px;height:100%;width:100%;z-index:-1;background-repeat:repeat;background-image:url(http://pxxxx32nb/webformpt/Images/GeneralWebFormButtonBack.gif)}><tr><td></td></tr></table><iframe style={position:absolute;top:0px;left:0px;height:100%;width:100%;z-index:-2}></iframe>";
                //FloatingToolBar.Text = "<div id=TSPACES style={height:1px}></div><div id=FTB style={position:absolute;top:0px;left:0px;height:25px;z-index:9999;width:100%;}><table border=0 width=100% height=100% style={position:absolute;top:0px;left:0px;height:100%;width:100%;z-index:-1;background-repeat:repeat;background-image:url(" + Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif") + ")}><tr><td></td></tr></table><iframe style={position:absolute;top:0px;left:0px;height:100%;width:100%;z-index:-2}></iframe>";                
                FloatingToolBar.Text = "<div id=TSPACES style=\"height:1px\"></div><div id=FTB style=\"position:absolute;top:0px;left:0px;height:25px;z-index:9999;width:100%;\">";
                //20110815 Eric Hsu : Add  Iframe element to avoid display Problem in IE6 (Select will cover div )
                FloatingToolBar.Text += "<iframe style=\"border:0px;position:absolute;z-index:-1;width:100%;height:100% \" ></iframe>";
                //FloatingToolBar.Text = "<div id=TSPACES style=\"height:1px\"></div><div id=FTB style=\"position:absolute;top:0px;left:0px;height:25px;z-index:9999;width:100%;\">";
                FloatingToolBar.Text+="<table border=0 width=100% height=100% style=\"position:absolute;top:0px;left:0px;height:100%;width:100%;z-index:-1;background-repeat:repeat;background-image:url(" + Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif") + ")\"><tr><td></td></tr></table>";
                //國昌 2011/07/08 修正FF, Chrome表單工具列下方多一條線的問題
                //FloatingToolBar.Text +="<iframe style=\"position:absolute;top:0px;left:0px;height:25px;width:100%;z-index:-2\"></iframe>";
                //end 2009/06/08 hjlin modify
            }
            //國昌2009/12/23:mantis0015123, QueryError46, 47重複了
            AgreeButton.ConfirmText = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError48", "你確定同意嗎?");
            AgreeButton.ImageUrl = "~/Images/GeneralAgree.gif"; //2009/06/08 hjlin modify
            AgreeButton.Text = "　";
            AgreeButton.BeforeClick = "AgreeDisagreeCheckResult";
            AgreeButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            AgreeButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            AgreeButton.Display = true;
            AgreeButton.CssClass = "GeneralButton";

            //國昌2009/12/23:mantis0015123, QueryError46, 47重複了
            DisagreeButton.ConfirmText = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError49", "你確定不同意嗎?");
            DisagreeButton.ImageUrl = "~/Images/GeneralDisagree.gif"; //2009/06/08 hjlin modify
            DisagreeButton.Text = "　";
            DisagreeButton.BeforeClick = "AgreeDisagreeCheckResult";
            DisagreeButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            DisagreeButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            DisagreeButton.Display = true;
            DisagreeButton.CssClass = "GeneralButton";

            //SaveButton.ConfirmText = "你確定要儲存嗎?";
            SaveButton.ConfirmText = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError23", "你確定要儲存嗎?");
            //SaveButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralSave.gif");
            SaveButton.ImageUrl = "~/Images/GeneralSave.gif"; //2009/06/08 hjlin modify
            SaveButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //SaveButton.showWaitingIcon = true; //2009/05/25 edward mark
            SaveButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            SaveButton.Display = false;
            SaveButton.CssClass = "GeneralButton";

            //DeleteButton.ConfirmText = "你確定要刪除嗎?";
            DeleteButton.ConfirmText = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError1", "你確定要刪除嗎?");
            //DeleteButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralDelete.gif");
            DeleteButton.ImageUrl = "~/Images/GeneralDelete.gif"; //2009/06/08 hjlin modify
            DeleteButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //DeleteButton.showWaitingIcon = true; //2009/05/25 edward mark
            DeleteButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            DeleteButton.Display = false;
            DeleteButton.CssClass = "GeneralButton";

            //SubmitButton.ConfirmText = "你確定要發起流程嗎?";
            SubmitButton.ConfirmText = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError24", "你確定要發起流程嗎?");
            //SubmitButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralSubmit.gif");
            SubmitButton.ImageUrl = "~/Images/GeneralSubmit.gif"; //2009/06/08 hjlin modify
            SubmitButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //SubmitButton.showWaitingIcon = true; //2009/05/25 edward mark
            SubmitButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            SubmitButton.Display = false;
            SubmitButton.CssClass = "GeneralButton";

            //SignButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralSign.gif");
            SignButton.ImageUrl = "~/Images/GeneralSign.gif"; //2009/06/08 hjlin modify
            SignButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            if (simMode.Equals("0"))
            {
                SignButton.BeforeClick = "SignButton_Before_Click";
            }
            else
            {
                SignButton.BeforeClick = "SimSignButton_Before_Click";
            }
            //SignButton.showWaitingIcon = true; //2009/05/25 edward mark
            SignButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            SignButton.Display = false;
            SignButton.CssClass = "GeneralButton";

            //AttachButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralAttach.gif");
            AttachButton.ImageUrl = "~/Images/GeneralAttach.gif"; //2009/06/08 hjlin modify
            AttachButton.BeforeClick = "AttachButton_Before_Click";
            AttachButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            AttachButton.Display = false;
            AttachButton.CssClass = "GeneralButton";

            //SaveDraftButton.ConfirmText = "確定要儲存草稿嗎?";
            SaveDraftButton.ConfirmText = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError25", "確定要儲存草稿嗎?");
            //SaveDraftButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralSaveDraft.gif");
            SaveDraftButton.ImageUrl = "~/Images/GeneralSaveDraft.gif"; //2009/06/08 hjlin modify
            SaveDraftButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //SaveDraftButton.showWaitingIcon = true; //2009/05/25 edward mark
            SaveDraftButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            SaveDraftButton.Display = false;
            SaveDraftButton.CssClass = "GeneralButton";

            //ReadDraftButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralReadDraft.gif");
            ReadDraftButton.ImageUrl = "~/Images/GeneralReadDraft.gif"; //2009/06/08 hjlin modify
            ReadDraftButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            ReadDraftButton.Display = false;
            ReadDraftButton.CssClass = "GeneralButton";

            //ViewButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralView.gif");
            ViewButton.ImageUrl = "~/Images/GeneralView.gif"; //2009/06/08 hjlin modify
            ViewButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            ViewButton.BeforeClick = "ViewButton_Before_Click";
            ViewButton.Display = false;
            ViewButton.CssClass = "GeneralButton";

            //RefreshButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralRefresh.gif");
            RefreshButton.ImageUrl = "~/Images/GeneralRefresh.gif"; //2009/06/08 hjlin modify
            RefreshButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            RefreshButton.Display = false;
            RefreshButton.CssClass = "GeneralButton";

            //ViewFlowButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralViewFlow.gif");
            ViewFlowButton.ImageUrl = "~/Images/GeneralViewFlow.gif"; //2009/06/08 hjlin modify
            ViewFlowButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //ViewFlowButton.showWaitingIcon = true; //2009/05/25 edward mark
            ViewFlowButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            ViewFlowButton.Display = false;
            ViewFlowButton.CssClass = "GeneralButton";

            //SetFlowButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralSetFlow.gif");
            SetFlowButton.ImageUrl = "~/Images/GeneralSetFlow.gif"; //2009/06/08 hjlin modify
            SetFlowButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            SetFlowButton.BeforeClick = "SetFlowButton_Before_Click";
            SetFlowButton.Display = false;
            SetFlowButton.CssClass = "GeneralButton";

            //AddSignButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralAddSign.gif");
            AddSignButton.ImageUrl = "~/Images/GeneralAddSign.gif"; //2009/06/08 hjlin modify
            AddSignButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //AddSignButton.showWaitingIcon = true; //2009/05/25 edward mark
            AddSignButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            AddSignButton.BeforeClick = "AddSignButton_Before_Click";
            AddSignButton.Display = false;
            AddSignButton.CssClass = "GeneralButton";

            //WithDrawButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralWithDraw.gif");
            WithDrawButton.ImageUrl = "~/Images/GeneralWithDraw.gif"; //2009/06/08 hjlin modify
            WithDrawButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            WithDrawButton.BeforeClick = "WithDrawButton_Before_Click";
            //WithDrawButton.showWaitingIcon = true; //2009/05/25 edward mark
            WithDrawButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            WithDrawButton.Display = false;
            WithDrawButton.CssClass = "GeneralButton";

            //RejectButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralReject.gif");
            RejectButton.ImageUrl = "~/Images/GeneralReject.gif"; //2009/06/08 hjlin modify
            RejectButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //RejectButton.showWaitingIcon = true; //2009/05/25 edward mark
            RejectButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            RejectButton.Display = false;
            RejectButton.BeforeClick = "RejectButton_Before_Click";
            RejectButton.CssClass = "GeneralButton";

            //ForwardButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralForward.gif");
            ForwardButton.ImageUrl = "~/Images/GeneralForward.gif"; //2009/06/08 hjlin modify
            ForwardButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //ForwardButton.showWaitingIcon = true; //2009/05/25 edward mark
            ForwardButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            ForwardButton.Display = false;
            ForwardButton.BeforeClick = "ForwardButton_Before_Click";
            ForwardButton.CssClass = "GeneralButton";

            //DispatchFlowButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralDispatchFlow.gif");
            DispatchFlowButton.ImageUrl = "~/Images/GeneralDispatchFlow.gif"; //2009/06/08 hjlin modify
            DispatchFlowButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //DispatchFlowButton.showWaitingIcon = true; //2009/05/25 edward mark
            DispatchFlowButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            DispatchFlowButton.Display = false;
            DispatchFlowButton.BeforeClick = "DispatchFlowButton_Before_Click";
            DispatchFlowButton.CssClass = "GeneralButton";

            //CopyFormButton.ConfirmText = "你確定要複製此表單嗎?";
            CopyFormButton.ConfirmText = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError26", "你確定要複製此表單嗎?");
            //CopyFormButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralCopyForm.gif");
            CopyFormButton.ImageUrl = "~/Images/GeneralCopyForm.gif"; //2009/06/08 hjlin modify
            CopyFormButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            CopyFormButton.Display = false;
            CopyFormButton.CssClass = "GeneralButton";

            //HistoryButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralHistory.gif");
            HistoryButton.ImageUrl = "~/Images/GeneralHistory.gif"; //2009/06/08 hjlin modify
            HistoryButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            HistoryButton.BeforeClick = "HistoryButton_Before_Click";
            HistoryButton.Display = false;
            HistoryButton.CssClass = "GeneralButton";

            //PrintCertificateButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralPrintCertificate.gif");
            PrintCertificateButton.ImageUrl = "~/Images/GeneralPrintCertificate.gif"; //2009/06/08 hjlin modify
            PrintCertificateButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            PrintCertificateButton.Display = false;
            PrintCertificateButton.CssClass = "GeneralButton";

            //BackListButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralBackList.gif");
            BackListButton.ImageUrl = "~/Images/GeneralBackList.gif"; //2009/06/08 hjlin modify
            BackListButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            BackListButton.Display = false;
            BackListButton.CssClass = "GeneralButton";

            //RedirectButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralRedirect.gif");
            RedirectButton.ImageUrl = "~/Images/GeneralRedirect.gif"; //2009/06/08 hjlin modify
            RedirectButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //RedirectButton.showWaitingIcon = true; //2009/05/25 edward mark
            RedirectButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            RedirectButton.Display = false;
            RedirectButton.BeforeClick = "RedirectButton_Before_Click";
            RedirectButton.CssClass = "GeneralButton";

            //ReGetButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralReGet.gif");
            ReGetButton.ImageUrl = "~/Images/GeneralReGet.gif"; //2009/06/08 hjlin modify
            ReGetButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //ReGetButton.showWaitingIcon = true; //2009/05/25 edward mark
            ReGetButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            ReGetButton.Display = false;
            ReGetButton.BeforeClick = "ReGetButton_Before_Click";
            ReGetButton.CssClass = "GeneralButton";

            //RollbackButton.ImageUrl = Page.ResolveUrl("~/Images/GeneralRollback.gif");
            RollbackButton.ImageUrl = "~/Images/GeneralRollback.gif"; //2009/06/08 hjlin modify
            RollbackButton.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //RollbackButton.showWaitingIcon = true; //2009/05/25 edward mark
            RollbackButton.showPrepareIcon = true;    //2009/05/10 hjlin add
            RollbackButton.Display = false;
            RollbackButton.BeforeClick = "RollbackButton_Before_Click";
            RollbackButton.CssClass = "GeneralButton";

            //UserDefineButton1.ImageUrl = Page.ResolveUrl("~/Images/GeneralUserDefine1.gif");
            UserDefineButton1.ImageUrl = "~/Images/GeneralUserDefine1.gif"; //2009/06/08 hjlin modify
            UserDefineButton1.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //UserDefineButton1.showWaitingIcon = true; //2009/05/25 edward mark
            UserDefineButton1.showPrepareIcon = true;    //2009/05/10 hjlin add
            UserDefineButton1.Display = false;
            UserDefineButton1.BeforeClick = "UserDefineButton1_Before_Click";
            UserDefineButton1.CssClass = "GeneralButton";

            //UserDefineButton2.ImageUrl = Page.ResolveUrl("~/Images/GeneralUserDefine2.gif");
            UserDefineButton2.ImageUrl = "~/Images/GeneralUserDefine2.gif"; //2009/06/08 hjlin modify
            UserDefineButton2.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //UserDefineButton2.showWaitingIcon = true; //2009/05/25 edward mark
            UserDefineButton2.showPrepareIcon = true;    //2009/05/10 hjlin add
            UserDefineButton2.Display = false;
            UserDefineButton2.BeforeClick = "UserDefineButton2_Before_Click";
            UserDefineButton2.CssClass = "GeneralButton";

            //UserDefineButton3.ImageUrl = Page.ResolveUrl("~/Images/GeneralUserDefine3.gif");
            UserDefineButton3.ImageUrl = "~/Images/GeneralUserDefine3.gif"; //2009/06/08 hjlin modify
            UserDefineButton3.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //UserDefineButton3.showWaitingIcon = true; //2009/05/25 edward mark
            UserDefineButton3.showPrepareIcon = true;    //2009/05/10 hjlin add
            UserDefineButton3.Display = false;
            UserDefineButton3.BeforeClick = "UserDefineButton3_Before_Click";
            UserDefineButton3.CssClass = "GeneralButton";

            //UserDefineButton4.ImageUrl = Page.ResolveUrl("~/Images/GeneralUserDefine4.gif");
            UserDefineButton4.ImageUrl = "~/Images/GeneralUserDefine4.gif"; //2009/06/08 hjlin modify
            UserDefineButton4.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //UserDefineButton4.showWaitingIcon = true; //2009/05/25 edward mark
            UserDefineButton4.showPrepareIcon = true;    //2009/05/10 hjlin add
            UserDefineButton4.Display = false;
            UserDefineButton4.BeforeClick = "UserDefineButton4_Before_Click";
            UserDefineButton4.CssClass = "GeneralButton";

            //UserDefineButton5.ImageUrl = Page.ResolveUrl("~/Images/GeneralUserDefine5.gif");
            UserDefineButton5.ImageUrl = "~/Images/GeneralUserDefine5.gif"; //2009/06/08 hjlin modify
            UserDefineButton5.BackImageUrl = Page.ResolveUrl("~/Images/GeneralWebFormButtonBack.gif");
            //UserDefineButton5.showWaitingIcon = true; //2009/05/25 edward mark
            UserDefineButton5.showPrepareIcon = true;    //2009/05/10 hjlin add
            UserDefineButton5.Display = false;
            UserDefineButton5.BeforeClick = "UserDefineButton5_Before_Click";
            UserDefineButton5.CssClass = "GeneralButton";

            if (Request.QueryString["CertificateMode"] != null)
            {
            }
            else
            {                
                com.dsc.kernal.utility.BrowserProcessor.BrowserType resultType = com.dsc.kernal.utility.BrowserProcessor.detectBrowser(this.Page);
                switch (resultType)
                {
                    default:
                        #region IE
                        FloatingToolBar2.Text = "</div>";
                        #endregion
                        break;
                    case com.dsc.kernal.utility.BrowserProcessor.BrowserType.FireFox:
                        #region FireFox
                        FloatingToolBar2.Text = "</div><br/><br/>";
                        #endregion
                        break;
                    case com.dsc.kernal.utility.BrowserProcessor.BrowserType.Chrome:
                        #region Chrome
                        FloatingToolBar2.Text = "</div><br/><br/>";
                        #endregion
                        break;
                    case com.dsc.kernal.utility.BrowserProcessor.BrowserType.Safari:
                        #region Safari
                        FloatingToolBar2.Text = "</div><br/><br/>";
                        #endregion
                        break;
                }
                
            }
            string connectString = (string)Session["connectString"];
            string engineType = (string)Session["engineType"];


            if (Request.QueryString["CertificateMode"] != null)
            {
                FloatingSignBar.Text = "<div id='ATB' style=\"display:none;text-alignment:bottom;position:absolute;top:25px;left:0px;height:25px;z-index:9999;width:100%;\" class='SimSignPanel'><table border=0 cellspacing=0 cellpadding=0><tr><td>";
            }
            else
            {
                if (!simMode.Equals("0"))
                {
                    FloatingSignBar.Text = "<div id='ATB' style=\"text-alignment:bottom;position:absolute;top:25px;left:0px;height:25px;z-index:9999;width:100%;\" class='SimSignPanel'><table border=0 cellspacing=0 cellpadding=0><tr><td>";

                }
                else
                {
                    FloatingSignBar.Text = "<div id='ATB' style=\"text-alignment:bottom;position:absolute;top:25px;left:0px;height:0px;display:none;z-index:9999;width:100%;\" class='SimSignPanel'><table border=0 cellspacing=0 cellpadding=0><tr><td>";
                }
            }

            SignLabel.Width = new System.Web.UI.WebControls.Unit("80px");
            SignLabel.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "SignPanel1", "簽核意見");


            FloatingSignSep1.Text = "</td><td>";

            SignResultField.Width = new System.Web.UI.WebControls.Unit("150px");
            if (simMode.Equals("2"))
            {
                SignResultField.Display = false;
            }
            FloatingSignSep2.Text = "</td><td valign=bottom>";

            SignOpinionField.Width = new System.Web.UI.WebControls.Unit("250px");
            //SignOpinionField.MultiLine = true;
            //SignOpinionField.Height = new System.Web.UI.WebControls.Unit("25px");

            FloatingSignSep3.Text = "</td><td>";

            SignPhraseButton.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "SignPanel2", "片語");
            SignPhraseButton.Width = new System.Web.UI.WebControls.Unit("35px");

            SignPhraseOpenWin.clientEngineType = engineType;
            SignPhraseOpenWin.connectDBString = connectString;


            FloatingSignBar2.Text = "</td></tr></table></div>";

            DraftOpenWin.clientEngineType = engineType;
            DraftOpenWin.connectDBString = connectString;

            string header = "";
            //表單資訊
            //string header = "<br>";
            //header += "&nbsp;<FieldSet style={width:666px}><Legend class='DSCGroupBox' id='FormHeadArea'><img id=FormHeadAreaToggle toggleMode='m' style='cursor:hand' src='"+Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlImages/o.gif")+"' onclick='toggleFormHeadArea()'> 表單基本資訊</Legend>";
            //FormHeadArea.Text = header;

            //FormHeadArea3.Text = "</FieldSet>";
            if (!simMode.Equals("0"))
            {
                SignBarSpace.Text = "<br><br>";
            }
            else
            {
                SignBarSpace.Text = "";
            }

            //FormHeadGroupSpace.Text = "<br/>&nbsp;";
            //FormHeadGroupSpace.Text = "<div>&nbsp;</div>";
            FormHeadGroupSpace.Text = "<br/><br/>";
            
            //FormHeadGroup.Text = "表單資訊";
            FormHeadGroup.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError27", "表單資訊");
            FormHeadGroup.Width = new System.Web.UI.WebControls.Unit("666px");
            //FormHeadGroup.Width = new System.Web.UI.WebControls.Unit("888px");                      
            
            //附件
            header = "";
            header += "<div id=attachFileDiv style=\"width:500px;height:200px;position:absolute;display:none;z-index:100;\">" + "" + "&nbsp;";
            header +="<iframe width=500 height=200 frameborder=0 scrolling=no src='" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/attachFileBackground.aspx") + "' style=\"z-index:-1;position:absolute;top:0px;left:0px\"></iframe>";

            AttachArea.Text = header;
            attachFile.Width = new System.Web.UI.WebControls.Unit("490px");            
            attachFile.Height = new System.Web.UI.WebControls.Unit("193px");
            string GeneralFileUploadCollapse = "<img  style='position:relative;left:-2px;top:-195px;width:25px;height=24px;cursor:pointer ; z-index:99999' align=\"right\" src=\"" + Page.ResolveClientUrl("~/Images/GeneralFileUploadCollapse.gif") + "\"  onclick=\"AttachButton_Before_Click();\"></img>";
            AttachArea2.Text = GeneralFileUploadCollapse+"</div>";

            //歷史資料
            header = "";
            header += "<div id=HistoryDiv style=\"width:500px;height:250px;position:absolute;display:none\">&nbsp;<iframe width=500 height=250 frameborder=0 scrolling=no src='" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/historyBackground.aspx") + "' style=\"z-index:-1;position:absolute;top:0px;left:0px\"></iframe>";
            HistoryArea.Text = header;

            HistoryArea3.Text = "</div>";

            //相關表單
            header = "";
            header += "<div id=RelationDiv style=\"width:500px;height:250px;position:absolute;display:none;z-index:9999\">&nbsp;<iframe width=500 height=250 frameborder=0 scrolling=no src='" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlUI/historyBackground.aspx") + "' style=\"z-index:-1;position:absolute;top:0px;left:0px\"></iframe>";
            RelationArea.Text = header;

            RelationArea3.Text = "</div>";

        }

        /// <summary>
        /// 建立工具列
        /// </summary>
        private void createToolBar(string pUID)
        {

            FloatingToolBar = new LiteralControl();
            this.Controls.AddAt(0, FloatingToolBar);

            AgreeButton = new DSCWebControl.GlassButton();
            AgreeButton.PageUniqueID = pUID;
            AgreeButton.ID = "AgreeButton";
            AgreeButton.BeforeClicks += new DSCWebControl.GlassButton.BeforeClickEvent(SignButton_BeforeClicks);
            AgreeButton.Click += new DSCWebControl.GlassButton.ClickEvent(AgreeButton_Click);
            this.Controls.AddAt(1, AgreeButton);

            DisagreeButton = new DSCWebControl.GlassButton();
            DisagreeButton.PageUniqueID = pUID;
            DisagreeButton.ID = "DisagreeButton";
            DisagreeButton.BeforeClicks += new DSCWebControl.GlassButton.BeforeClickEvent(SignButton_BeforeClicks);
            DisagreeButton.Click += new DSCWebControl.GlassButton.ClickEvent(DisagreeButton_Click);
            this.Controls.AddAt(2, DisagreeButton);

            SaveButton = new DSCWebControl.GlassButton();
            SaveButton.PageUniqueID = pUID;
            SaveButton.ID = "SaveButton";
            SaveButton.Click += new DSCWebControl.GlassButton.ClickEvent(SaveButton_Click);
            this.Controls.AddAt(3, SaveButton);


            DeleteButton = new DSCWebControl.GlassButton();
            DeleteButton.PageUniqueID = pUID;
            DeleteButton.ID = "DeleteButton";
            DeleteButton.Click += new DSCWebControl.GlassButton.ClickEvent(DeleteButton_Click);
            this.Controls.AddAt(4, DeleteButton);

            SubmitButton = new DSCWebControl.GlassButton();
            SubmitButton.PageUniqueID = pUID;
            SubmitButton.ID = "SubmitButton";
            SubmitButton.Click += new DSCWebControl.GlassButton.ClickEvent(SubmitButton_Click);
            this.Controls.AddAt(5, SubmitButton);

            SignButton = new DSCWebControl.GlassButton();
            SignButton.PageUniqueID = pUID;
            SignButton.ID = "SignButton";
            SignButton.BeforeClicks += new DSCWebControl.GlassButton.BeforeClickEvent(SignButton_BeforeClicks);
            SignButton.Click += new DSCWebControl.GlassButton.ClickEvent(SignButton_Click);
            this.Controls.AddAt(6, SignButton);

            AttachButton = new DSCWebControl.GlassButton();
            AttachButton.PageUniqueID = pUID;
            AttachButton.ID = "AttachButton";
            AttachButton.Click += new DSCWebControl.GlassButton.ClickEvent(AttachButton_Click);
            this.Controls.AddAt(7, AttachButton);

            SaveDraftButton = new DSCWebControl.GlassButton();
            SaveDraftButton.PageUniqueID = pUID;
            SaveDraftButton.ID = "SaveDraftButton";
            SaveDraftButton.Click += new DSCWebControl.GlassButton.ClickEvent(SaveDraftButton_Click);
            this.Controls.AddAt(8, SaveDraftButton);

            ReadDraftButton = new DSCWebControl.GlassButton();
            ReadDraftButton.PageUniqueID = pUID;
            ReadDraftButton.ID = "ReadDraftButton";
            ReadDraftButton.Click += new DSCWebControl.GlassButton.ClickEvent(ReadDraftButton_Click);
            this.Controls.AddAt(9, ReadDraftButton);

            ViewButton = new DSCWebControl.GlassButton();
            ViewButton.PageUniqueID = pUID;
            ViewButton.ID = "ViewButton";
            ViewButton.Click += new DSCWebControl.GlassButton.ClickEvent(ViewButton_Click);
            this.Controls.AddAt(10, ViewButton);

            RefreshButton = new DSCWebControl.GlassButton();
            RefreshButton.PageUniqueID = pUID;
            RefreshButton.ID = "RefreshButton";
            RefreshButton.Click += new DSCWebControl.GlassButton.ClickEvent(RefreshButton_Click);
            this.Controls.AddAt(11, RefreshButton);

            ViewFlowButton = new DSCWebControl.GlassButton();
            ViewFlowButton.PageUniqueID = pUID;
            ViewFlowButton.ID = "ViewFlowButton";
            ViewFlowButton.Click += new DSCWebControl.GlassButton.ClickEvent(ViewFlowButton_Click);
            this.Controls.AddAt(12, ViewFlowButton);

            SetFlowButton = new DSCWebControl.GlassButton();
            SetFlowButton.PageUniqueID = pUID;
            SetFlowButton.ID = "SetFlowButton";
            SetFlowButton.Click += new DSCWebControl.GlassButton.ClickEvent(SetFlowButton_Click);
            this.Controls.AddAt(13, SetFlowButton);

            AddSignButton = new DSCWebControl.GlassButton();
            AddSignButton.PageUniqueID = pUID;
            AddSignButton.ID = "AddSignButton";
            AddSignButton.Click += new DSCWebControl.GlassButton.ClickEvent(AddSignButton_Click);
            this.Controls.AddAt(14, AddSignButton);

            WithDrawButton = new DSCWebControl.GlassButton();
            WithDrawButton.PageUniqueID = pUID;
            WithDrawButton.ID = "WithDrawButton";
            WithDrawButton.Click += new DSCWebControl.GlassButton.ClickEvent(WithDrawButton_Click);
            this.Controls.AddAt(15, WithDrawButton);

            RejectButton = new DSCWebControl.GlassButton();
            RejectButton.PageUniqueID = pUID;
            RejectButton.ID = "RejectButton";
            RejectButton.Click += new DSCWebControl.GlassButton.ClickEvent(RejectButton_Click);
            this.Controls.AddAt(16, RejectButton);

            ForwardButton = new DSCWebControl.GlassButton();
            ForwardButton.PageUniqueID = pUID;
            ForwardButton.ID = "ForwardButton";
            ForwardButton.Click += new DSCWebControl.GlassButton.ClickEvent(ForwardButton_Click);
            this.Controls.AddAt(17, ForwardButton);

            DispatchFlowButton = new DSCWebControl.GlassButton();
            DispatchFlowButton.PageUniqueID = pUID;
            DispatchFlowButton.ID = "DispatchFlowButton";
            DispatchFlowButton.Click += new DSCWebControl.GlassButton.ClickEvent(DispatchFlowButton_Click);
            this.Controls.AddAt(18, DispatchFlowButton);

            CopyFormButton = new DSCWebControl.GlassButton();
            CopyFormButton.PageUniqueID = pUID;
            CopyFormButton.ID = "CopyFormButton";
            CopyFormButton.Click += new DSCWebControl.GlassButton.ClickEvent(CopyFormButton_Click);
            this.Controls.AddAt(19, CopyFormButton);

            HistoryButton = new DSCWebControl.GlassButton();
            HistoryButton.PageUniqueID = pUID;
            HistoryButton.ID = "HistoryButton";
            HistoryButton.Click += new DSCWebControl.GlassButton.ClickEvent(HistoryButton_Click);
            this.Controls.AddAt(20, HistoryButton);

            PrintCertificateButton = new DSCWebControl.GlassButton();
            PrintCertificateButton.PageUniqueID = pUID;
            PrintCertificateButton.ID = "PrintCertificateButton";
            PrintCertificateButton.Click += new DSCWebControl.GlassButton.ClickEvent(PrintCertificateButton_Click);
            this.Controls.AddAt(21, PrintCertificateButton);

            BackListButton = new DSCWebControl.GlassButton();
            BackListButton.PageUniqueID = pUID;
            BackListButton.ID = "BackListButton";
            BackListButton.Click += new DSCWebControl.GlassButton.ClickEvent(BackListButton_Click);
            this.Controls.AddAt(22, BackListButton);

            RedirectButton = new DSCWebControl.GlassButton();
            RedirectButton.PageUniqueID = pUID;
            RedirectButton.ID = "RedirectButton";
            RedirectButton.Click += new DSCWebControl.GlassButton.ClickEvent(RedirectButton_Click);
            this.Controls.AddAt(23, RedirectButton);

            ReGetButton = new DSCWebControl.GlassButton();
            ReGetButton.PageUniqueID = pUID;
            ReGetButton.ID = "ReGetButton";
            ReGetButton.Click += new DSCWebControl.GlassButton.ClickEvent(ReGetButton_Click);
            this.Controls.AddAt(24, ReGetButton);

            RollbackButton = new DSCWebControl.GlassButton();
            RollbackButton.PageUniqueID = pUID;
            RollbackButton.ID = "RollbackButton";
            RollbackButton.Click += new DSCWebControl.GlassButton.ClickEvent(RollbackButton_Click);
            this.Controls.AddAt(25, RollbackButton);

            UserDefineButton1 = new DSCWebControl.GlassButton();
            UserDefineButton1.PageUniqueID = pUID;
            UserDefineButton1.ID = "UserDefineButton1";
            UserDefineButton1.Click += new DSCWebControl.GlassButton.ClickEvent(UserDefineButton1_Click);
            this.Controls.AddAt(26, UserDefineButton1);

            UserDefineButton2 = new DSCWebControl.GlassButton();
            UserDefineButton2.PageUniqueID = pUID;
            UserDefineButton2.ID = "UserDefineButton2";
            UserDefineButton2.Click += new DSCWebControl.GlassButton.ClickEvent(UserDefineButton2_Click);
            this.Controls.AddAt(27, UserDefineButton2);

            UserDefineButton3 = new DSCWebControl.GlassButton();
            UserDefineButton3.PageUniqueID = pUID;
            UserDefineButton3.ID = "UserDefineButton3";
            UserDefineButton3.Click += new DSCWebControl.GlassButton.ClickEvent(UserDefineButton3_Click);
            this.Controls.AddAt(28, UserDefineButton3);

            UserDefineButton4 = new DSCWebControl.GlassButton();
            UserDefineButton4.PageUniqueID = pUID;
            UserDefineButton4.ID = "UserDefineButton4";
            UserDefineButton4.Click += new DSCWebControl.GlassButton.ClickEvent(UserDefineButton4_Click);
            this.Controls.AddAt(29, UserDefineButton4);

            UserDefineButton5 = new DSCWebControl.GlassButton();
            UserDefineButton5.PageUniqueID = pUID;
            UserDefineButton5.ID = "UserDefineButton5";
            UserDefineButton5.Click += new DSCWebControl.GlassButton.ClickEvent(UserDefineButton5_Click);
            this.Controls.AddAt(30, UserDefineButton5);

            FloatingToolBar2 = new LiteralControl();
            this.Controls.AddAt(31, FloatingToolBar2);

            FloatingSignBar = new LiteralControl();
            this.Controls.AddAt(32, FloatingSignBar);

            SignLabel = new DSCWebControl.DSCLabel();
            SignLabel.PageUniqueID = pUID;
            SignLabel.ID = "SignLabel";
            this.Controls.AddAt(33, SignLabel);

            FloatingSignSep1 = new LiteralControl();
            this.Controls.AddAt(34, FloatingSignSep1);

            SignResultField = new DSCWebControl.SingleDropDownList();
            SignResultField.PageUniqueID = pUID;
            SignResultField.ID = "SignResultField";
            this.Controls.AddAt(35, SignResultField);

            FloatingSignSep2 = new LiteralControl();
            this.Controls.AddAt(36, FloatingSignSep2);

            SignOpinionField = new DSCWebControl.SingleField();
            SignOpinionField.PageUniqueID = pUID;
            SignOpinionField.ID = "SignOpinionField";
            this.Controls.AddAt(37, SignOpinionField);

            FloatingSignSep3 = new LiteralControl();
            this.Controls.AddAt(38, FloatingSignSep3);

            SignPhraseButton = new DSCWebControl.GlassButton();
            SignPhraseButton.PageUniqueID = pUID;
            SignPhraseButton.ID = "SignPhraseButton";
            SignPhraseButton.Click += new DSCWebControl.GlassButton.ClickEvent(SignPhraseButton_Click);
            this.Controls.AddAt(39, SignPhraseButton);

            SignPhraseOpenWin = new DSCWebControl.OpenWin();
            SignPhraseOpenWin.PageUniqueID = pUID;
            SignPhraseOpenWin.OpenWindowButtonClick += new DSCWebControl.OpenWin.OpenWindowButtonClickEvent(SignPhraseOpenWin_OpenWindowButtonClick);
            this.Controls.AddAt(40, SignPhraseOpenWin);

            FloatingSignBar2 = new LiteralControl();
            this.Controls.AddAt(41, FloatingSignBar2);

            //草稿開窗元件
            DraftOpenWin = new DSCWebControl.OpenWin();
            DraftOpenWin.PageUniqueID = pUID;
            //國昌2009/08/17 改由另一個克制開窗畫面
            DraftOpenWin.customOpenWinPage = "/Program/DSCGPFlowService/Public/DraftOpenWin.aspx";
            DraftOpenWin.OpenWindowButtonClick += new DSCWebControl.OpenWin.OpenWindowButtonClickEvent(DraftOpenWin_OpenWindowButtonClick);
            this.Controls.AddAt(42, DraftOpenWin);

            AttachArea = new LiteralControl();
            this.Controls.AddAt(43, AttachArea);
            attachFile = new DSCWebControl.FileUpload();
            attachFile.PageUniqueID = pUID;
            this.Controls.AddAt(44, attachFile);
            AttachArea2 = new LiteralControl();
            this.Controls.AddAt(45, AttachArea2);

            /*
            FormHeadArea = new LiteralControl();
            this.Controls.AddAt(32, FormHeadArea);
            FormHeadArea2 = new LiteralControl();
            this.Controls.AddAt(33, FormHeadArea2);
            FormHeadArea3 = new LiteralControl();
            this.Controls.AddAt(34, FormHeadArea3);

            HistoryArea = new LiteralControl();
            this.Controls.AddAt(35, HistoryArea);
            HistoryArea2 = new LiteralControl();
            this.Controls.AddAt(36, HistoryArea2);
            HistoryArea3 = new LiteralControl();
            this.Controls.AddAt(37, HistoryArea3);

            RelationArea = new LiteralControl();
            this.Controls.AddAt(38, RelationArea);
            RelationArea2 = new LiteralControl();
            this.Controls.AddAt(39, RelationArea2);
            RelationArea3 = new LiteralControl();
            this.Controls.AddAt(40, RelationArea3);
            */
            SignBarSpace = new LiteralControl();
            SignBarSpace.ID = "SignBarSpace";
            this.Controls.AddAt(46, SignBarSpace);

            FormHeadGroupSpace = new LiteralControl();
            //FormHeadGroupSpace.Text = "<br>&nbsp;";
            FormHeadGroupSpace.ID = "FormHeadGroupSpace";
            this.Controls.AddAt(47, FormHeadGroupSpace);

            FormHeadGroup = new DSCWebControl.DSCGroupBox();
            FormHeadGroup.PageUniqueID = this.PageUniqueID;
            FormHeadGroup.ID = "FormHeadGroup";
            //FormHeadGroup.Text = "表單資訊";
            FormHeadGroup.Text = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError27", "表單資訊");
            FormHeadGroup.ShowToggle = true;
            this.Controls.AddAt(48, FormHeadGroup);

            HistoryArea = new LiteralControl();
            this.Controls.AddAt(49, HistoryArea);
            HistoryArea2 = new LiteralControl();
            this.Controls.AddAt(50, HistoryArea2);
            HistoryArea3 = new LiteralControl();
            this.Controls.AddAt(51, HistoryArea3);

            RelationArea = new LiteralControl();
            this.Controls.AddAt(52, RelationArea);
            RelationArea2 = new LiteralControl();
            this.Controls.AddAt(53, RelationArea2);
            RelationArea3 = new LiteralControl();
            this.Controls.AddAt(54, RelationArea3);

        }

        /// <summary>
        /// 建立歷史資料列表顯示
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="guid">目前資料物件單頭GUID</param>
        /// <returns>歷史資料列表資訊</returns>
        private string getHistoryData(AbstractEngine engine, string guid)
        {
            string header = "<table width=480px align=center border=0 cellspacing=0 id='HistoryTable' cellpadding=2 style=\"border-left-style:solid;border-top-style:solid;border-width:1px\" class=HistoryBorder>";
            header += "<tr>";
            header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryHead>處理結果</td>";
            header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryHead>模式</td>";
            header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryHead>異動者姓名</td>";
            header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryHead>異動時間</td>";
            header += "</tr>";

            string sql = "select * from DATAHISTORY where DATAGUID='" + guid + "' order by UPDATETIME desc";
            DataSet ds = engine.getDataSet(sql, "TEMP");
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                header += "<tr style='cursor:pointer' onclick='clickHistory(\"" + ds.Tables[0].Rows[i]["GUID"].ToString() + "\")'>";
                string br = "";
                switch (ds.Tables[0].Rows[i]["BACKUPRESULT"].ToString())
                {
                    case "Y":
                        //br = "同意";
                        br = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "case1", "同意");
                        break;
                    case "N":
                        //br = "不同意";
                        br = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "case2", "不同意");
                        break;
                    default:
                        //br = "處理中";
                        br = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "case3", "處理中");
                        break;
                }
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + br + "</td>";
                string bk = "";
                switch (ds.Tables[0].Rows[i]["BACKUPMODE"].ToString())
                {
                    case "A":
                        //bk = "新增";
                        bk = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError18", "新增");
                        break;
                    case "M":
                        //bk = "修改";
                        bk = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError19", "修改");
                        break;
                    case "D":
                        //bk = "刪除";
                        bk = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError20", "刪除");
                        break;
                    default:
                        //bk = "未知";
                        bk = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "case4", "未知");
                        break;
                }
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + bk + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[i]["UPDATEUSERNAME"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[i]["UPDATETIME"].ToString() + "</td>";
                header += "</tr>";
            }
            header += "</table>";
            return header;
        }

        /// <summary>
        /// 建立相關表單列表顯示
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="guid">目前資料物件單頭GUID</param>
        /// <returns>相關表單列表資訊</returns>
        private string getRelationData(AbstractEngine engine, string guid)
        {
            string header = "<table width=480px align=center border=0 cellspacing=0 id='RelationTable' cellpadding=2 style=\"border-left-style:solid;border-top-style:solid;border-width:1px\" class=HistoryBorder>";
            header += "<tr>";
            header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryHead>單據名稱</td>";
            header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryHead>建立時間</td>";
            header += "</tr>";

            string sql = "";

            //加入最先的表單
            sql = "select SMWAAAA003, SMWYAAA017, SMWYAAA019, SMWAAAA002 from SMWYAAA inner join SMWAAAA on SMWYAAA018=SMWAAAA001 where SMWYAAA005='" + (string)getSession("FlowGUID") + "' and SMWYAAA019<>'" + guid + "'";
            DataSet ds = engine.getDataSet(sql, "TEMP");
            if (ds.Tables[0].Rows.Count > 0)
            {
                header += "<tr style='cursor:pointer' onclick='clickRelation(\"" + ds.Tables[0].Rows[0][2].ToString() + "\",\"" + ds.Tables[0].Rows[0][3].ToString() + "\")'>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[0][0].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[0][1].ToString() + "</td>";
                header += "</tr>";
            }
            sql = "select * from FORMRELATION where ORIGUID in (select SMWYAAA019 from SMWYAAA where SMWYAAA005='" + (string)getSession("FlowGUID") + "') and CURGUID<>'" + guid + "' and CURPAGETYPE<>'' order by CREATETIME asc";
            ds = engine.getDataSet(sql, "TEMP");
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                header += "<tr style='cursor:pointer' onclick='clickRelation(\"" + ds.Tables[0].Rows[i]["CURGUID"].ToString() + "\",\"" + ds.Tables[0].Rows[i]["CURPAGETYPE"].ToString() + "\")'>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[i]["CURFORMNAME"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[i]["CREATETIME"].ToString() + "</td>";
                header += "</tr>";
            }

            //=======================加入參考流程表單-IMPORTANT!!
            //加入最先的表單
            sql = "select SMWAAAA003, SMWYAAA017, SMWYAAA019, SMWAAAA002 from SMWYAAA inner join SMWAAAA on SMWYAAA018=SMWAAAA001 where SMWYAAA019 in (select ORIGUID from FORMRELATION where FLOWGUID='" + (string)getSession("FlowGUID") + "')";
            ds = engine.getDataSet(sql, "TEMP");
            if (ds.Tables[0].Rows.Count > 0)
            {
                header += "<tr style='cursor:pointer' onclick='clickRelation(\"" + ds.Tables[0].Rows[0][2].ToString() + "\",\"" + ds.Tables[0].Rows[0][3].ToString() + "\")'>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[0][0].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[0][1].ToString() + "</td>";
                header += "</tr>";
            }

            sql = "select * from FORMRELATION where ORIGUID in (select ORIGUID from FORMRELATION where FLOWGUID='" + (string)getSession("FlowGUID") + "') and CURPAGETYPE<>'' order by CREATETIME asc";
            ds = engine.getDataSet(sql, "TEMP");
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                header += "<tr style='cursor:pointer' onclick='clickRelation(\"" + ds.Tables[0].Rows[i]["CURGUID"].ToString() + "\",\"" + ds.Tables[0].Rows[i]["CURPAGETYPE"].ToString() + "\")'>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[i]["CURFORMNAME"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=HistoryDetail>" + ds.Tables[0].Rows[i]["CREATETIME"].ToString() + "</td>";
                header += "</tr>";
            }
            header += "</table>";
            return header;
        }

        /// <summary>
        /// 由SMWAAAA資料表根據作業畫面代號取得作業畫面名稱
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="id">作業畫面代號</param>
        /// <returns>作業畫面名稱</returns>
        protected string getSMWAName(AbstractEngine engine, string id)
        {
            string sql = "select SMWAAAA003 from SMWAAAA where SMWAAAA002='" + id + "'";
            DataSet ds = engine.getDataSet(sql, "TEMP");
            if (ds.Tables[0].Rows.Count == 0)
            {
                return "";
            }
            else
            {
                return ds.Tables[0].Rows[0][0].ToString();
            }
        }

        /// <summary>
        /// 深層複製資料物件, 並且替換GUID
        /// </summary>
        /// <param name="target"></param>
        /// <param name="source"></param>
        protected void cloneObject(DataObject target,XMLProcessor xp)
        {
            string curGUID = com.dsc.kernal.utility.IDProcessor.getID("");
            target.setData("GUID", curGUID);

            Hashtable hs = target.child;
            if (hs != null)
            {
                IDictionaryEnumerator ie = hs.GetEnumerator();
                while (ie.MoveNext())
                {
                    string tableName = (string)ie.Key;
                    DataObjectSet child = (DataObjectSet)ie.Value;

                    //要從xml當中取得單身資料物件的FK
                    //以下XPATH為取得此XML文件中所有包含TableName 屬性的DOS元素
                    XmlNode xn = xp.selectSingleNode(@"//DOS[@TableName='" + tableName + "']");
                    string FK = "";
                    if (xn != null)
                    {
                        string[] tmp = xn.Attributes["RelationString"].InnerText.Split(new char[] { '=' });
                        FK = tmp[1];
                    }

                    for (int i = 0; i < child.getDataObjectCount(); i++)
                    {
                        if (!FK.Equals(""))
                        {
                            child.getDataObject(i).setData(FK, curGUID);
                        }
                        cloneObject(child.getDataObject(i), xp);
                    }
                }
            }
        }

        /// <summary>
        /// 顯示錯誤訊息
        /// </summary>
        protected string showErrorMessage()
        {
            string msg = "";
            for (int i = 0; i < errMsg.Count; i++)
            {
                msg += (string)errMsg[i] + "\\n";
            }
            /*
            if (msg.Length > 0)
            {
                msg = "alert('" + msg + "');";
                Response.Write(msg);
            }
            */
            return msg;
        }

        /// <summary>
        /// 使用設定檔發起流程
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="info">流程發起資訊物件</param>
        /// <param name="flowid">流程定義代號</param>
        /// <param name="subject">主旨</param>
        /// <returns>流程實例序號</returns>
        protected string invokeProcess(AbstractEngine engine, SubmitInfo info, string flowid, string subject)
        {
            SysParam sp = new SysParam(engine);
            bool isfillerID = false;
            string flowOID = "";
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");
            try
            {
                isfillerID = Convert.ToBoolean(sp.getParam("isfillerID"));
            }
            catch { }

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            if (isfillerID)
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcess(flowid, info.fillerID, info.submitOrgID, subject);
            }
            else
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcess(flowid, info.ownerID, info.submitOrgID, subject);
            }
            checkPoint("Invoke GP Done", modeInvoke);
            adp.logout();

            return flowOID;
        }

        /// <summary>
        /// 使用設定檔發起流程並參入參數
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="info">流程發起資訊物件</param>
        /// <param name="flowid">流程定義代號</param>
        /// <param name="paramID">流程參數代號</param>
        /// <param name="paramValue">參數內容</param>
        /// <param name="subject">主旨</param>
        /// <returns>流程實例序號</returns>
        protected string invokeProcessByParameter(AbstractEngine engine, SubmitInfo info, string flowid, string paramID, string paramValue, string subject)
        {
            SysParam sp = new SysParam(engine);
            bool isfillerID = false;
            string flowOID = "";
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");
            try
            {
                isfillerID = Convert.ToBoolean(sp.getParam("isfillerID"));
            }
            catch { }

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            if (isfillerID)
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcessByParameter(flowid, info.fillerID, info.submitOrgID, paramID, paramValue, subject);
            }
            else
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcessByParameter(flowid, info.ownerID, info.submitOrgID, paramID, paramValue, subject);
            }
            checkPoint("Invoke GP Done", modeInvoke);
            adp.logout();

            return flowOID;
        }

        /// <summary>
        /// 使用設定檔以及表單參數發起流程, 並且傳入流程設定
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="info">流程發起資訊物件</param>
        /// <param name="flowid">流程定義代號</param>
        /// <param name="formOID">表單識別號</param>
        /// <param name="formXML">表單參數內容</param>
        /// <param name="subject">主旨</param>
        /// <param name="actDef">自訂流程內容</param>
        /// <returns>流程實例序號</returns>
        protected string invokeProcessByFormParameterAndAddCusAct(AbstractEngine engine, SubmitInfo info, string flowid, string formOID, string formXML, string subject, string actDef)
        {
            SysParam sp = new SysParam(engine);
            bool isfillerID = false;
            string flowOID = "";
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");
            try
            {
                isfillerID = Convert.ToBoolean(sp.getParam("isfillerID"));
            }
            catch { }

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            if (isfillerID)
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcessByFormParameterAndAddCusAct(flowid, info.fillerID, info.submitOrgID, formOID, formXML, subject, actDef);
            }
            else
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcessByFormParameterAndAddCusAct(flowid, info.ownerID, info.submitOrgID, formOID, formXML, subject, actDef);
            }
            checkPoint("Invoke GP Done", modeInvoke);
            adp.logout();

            return flowOID;
        }

        /// <summary>
        /// 使用設定檔以及表單參數發起流程
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="info">流程發起資訊物件</param>
        /// <param name="flowid">流程定義代號</param>
        /// <param name="formOID">表單識別號</param>
        /// <param name="formXML">表單參數內容</param>
        /// <param name="subject">主旨</param>
        /// <returns>流程實例序號</returns>
        protected string invokeProcessByFormParameter(AbstractEngine engine, SubmitInfo info, string flowid, string formOID, string formXML, string subject)
        {
            SysParam sp = new SysParam(engine);
            bool isfillerID = false;
            string flowOID = "";
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");
            try
            {
                isfillerID = Convert.ToBoolean(sp.getParam("isfillerID"));
            }
            catch { }

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            if (isfillerID)
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcessByFormParameter(flowid, info.fillerID, info.submitOrgID, formOID, formXML, subject);
            }
            else
            {
                checkPoint("Invoke GP", modeInvoke);
                flowOID = adp.invokeProcessByFormParameter(flowid, info.ownerID, info.submitOrgID, formOID, formXML, subject);
            }
            checkPoint("Invoke GP Done", modeInvoke);
            adp.logout();

            return flowOID;
        }

        /// <summary>
        /// 准
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="workItemOID">工作項目識別</param>
        /// <param name="executiveResult">簽核結果</param>
        /// <param name="executiveComment">簽核意見</param>
        protected void completeWorkItem(AbstractEngine engine, string workItemOID, string executiveResult, string executiveComment)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.completeWorkItem((string)Session["UserID"], workItemOID, executiveResult, executiveComment);

            adp.logout();
        }

        /// <summary>
        /// 不准
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="processSerialNumber">流程實例序號</param>
        /// <param name="executiveResult">簽核結果</param>
        /// <param name="executiveComment">簽核意見</param>
        protected void terminateProcess(AbstractEngine engine, string processSerialNumber, string executiveResult, string executiveComment)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.terminateProcess((string)Session["UserID"], processSerialNumber, executiveResult, executiveComment);

            adp.logout();
        }

        /// <summary>
        /// 撤銷流程
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="processSerialNumber">流程實例序號</param>
        /// <param name="executiveComment">簽核意見</param>
        protected void abortProcessForSerialNo(AbstractEngine engine, string processSerialNumber, string executiveComment)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.abortProcessForSerialNo(processSerialNumber, executiveComment);

            adp.logout();
        }

        /// <summary>
        /// 草稿開窗後處理程序
        /// </summary>
        /// <param name="identityid">識別</param>
        /// <param name="values">回傳值陣列</param>
        protected virtual void DraftOpenWin_OpenWindowButtonClick(string identityid, string[,] values)
        {
            if (values != null)
            {
                readDraftProcedure(values[0, 0]);
            }
        }
        /// <summary>
        /// 簽核片語開窗處理程序
        /// </summary>
        /// <param name="identityid"></param>
        /// <param name="values"></param>
        protected virtual void SignPhraseOpenWin_OpenWindowButtonClick(string identityid, string[,] values)
        {
            if (values != null)
            {
                SignOpinionField.ValueText = values[0, 2];
            }
        }

        /// <summary>
        /// 取得flowSerialNo流程實例序號的流程圖, 存放於localFilePath所指定的檔案
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="flowSerialNo">流程實例序號</param>
        /// <param name="localFilePath">存放暫時路徑檔案名稱</param>
        protected void fetchFlowDiagram(AbstractEngine engine, string flowSerialNo, string localFilePath)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.fetchWorkFlowDiagram(flowSerialNo, localFilePath);

            adp.logout();
        }

        /// <summary>
        /// 由畫面欄位替換主旨字串
        /// </summary>
        /// <param name="c">畫面元件</param>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="subjectTemplate">主旨格式字串</param>
        /// <param name="UIStatus">畫面狀態</param>
        /// <returns>替換後主旨字串</returns>
        private string substituteSubjectForm(Control c, AbstractEngine engine, string subjectTemplate, string UIStatus)
        {
            try
            {
                DSCWebControl.SingleField sf = (DSCWebControl.SingleField)c;
                string tag = "@" + sf.ClientID + "@";
                subjectTemplate = subjectTemplate.Replace(tag, sf.ValueText);
            }
            catch { };
            try
            {
                DSCWebControl.SingleOpenWindowField sf = (DSCWebControl.SingleOpenWindowField)c;
                string tag = "@" + sf.ClientID + "_ID@";
                subjectTemplate = subjectTemplate.Replace(tag, sf.ValueText);
                tag = "@" + sf.ClientID + "_Name@";
                subjectTemplate = subjectTemplate.Replace(tag, sf.ReadOnlyValueText);
            }
            catch { };
            try
            {
                DSCWebControl.SingleDropDownList sf = (DSCWebControl.SingleDropDownList)c;
                string tag = "@" + sf.ClientID + "_ID@";
                subjectTemplate = subjectTemplate.Replace(tag, sf.ValueText);
                tag = "@" + sf.ClientID + "_Name@";
                subjectTemplate = subjectTemplate.Replace(tag, sf.ReadOnlyText);
            }
            catch { };
            try
            {
                DSCWebControl.SingleDateTimeField sf = (DSCWebControl.SingleDateTimeField)c;
                string tag = "@" + sf.ClientID + "@";
                subjectTemplate = subjectTemplate.Replace(tag, sf.ValueText);
            }
            catch { };

            for (int i = 0; i < c.Controls.Count; i++)
            {
                subjectTemplate = substituteSubjectForm(c.Controls[i], engine, subjectTemplate, UIStatus);
            }
            return subjectTemplate;
        }

        /// <summary>
        /// 由SMWBAAA001取得流程參數
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="guid">SMWBAAA001</param>
        /// <returns>包含參數內容的Hashtable</returns>
        protected Hashtable getProcessParameter(AbstractEngine engine, string guid)
        {
            string sql = "select SMWBAAB003, SMWBAAB006 from SMWBAAB where SMWBAAB002='" + guid + "'";
            DataSet ds = engine.getDataSet(sql, "TEMP");
            Hashtable hs = new Hashtable();

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                hs.Add(ds.Tables[0].Rows[i][0].ToString(), ds.Tables[0].Rows[i][1].ToString());
            }
            return hs;
        }

        /// <summary>
        /// 退回重辦
        /// </summary>
        /// <param name="engine">資料連線物件</param>
        /// <param name="userID">退回重辦使用者</param>
        /// <param name="processSerialNumber">流程實例序號</param>
        /// <param name="workItemOID">目前工作項目識別號</param>
        /// <param name="curActID">目前活動代號</param>
        /// <param name="actID">要退回的活動代號</param>
        /// <param name="executiveComment">簽核意見</param>
        /// <param name="reexecuteActivityType">0:退回重辦之後逐關簽核; 2:略過之前已經執行過的關卡</param>
        protected void reexecuteActivity(AbstractEngine engine, string userID, string processSerialNumber, string workItemOID, string curActID, string actID, string executiveComment, string reexecuteActivityType)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.reexecuteActivity(userID, processSerialNumber, workItemOID, curActID, actID, executiveComment, reexecuteActivityType);

            adp.logout();
        }

        /// <summary>
        /// 由工作項目識別號取得activityID
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="workItemOID">工作項目識別號</param>
        /// <returns>活動代號</returns>
        protected string fetchActivityIDFromWorkItemOID(AbstractEngine engine, string workItemOID, string processID, string userID)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            string vle = adp.fetchActivityIDFromWorkItemOID(workItemOID, processID, userID);

            adp.logout();
            return vle;
        }

        /// <summary>
        /// 取得指定流程序號的撤銷意見
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="processSerialNumber">流程實例序號</param>
        /// <returns>撤銷意見</returns>
        protected string getProcessAbortComment(AbstractEngine engine, string processSerialNumber)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            string vle = adp.getProcessAbortComment(processSerialNumber);

            adp.logout();
            return vle;
        }

        /// <summary>
        /// 代理人轉派
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="toUserID">被轉派者代號</param>
        /// <param name="workItemOID">工作項目識別號</param>
        /// <param name="executiveComment">轉派意見</param>
        protected void reassignWorkItem(AbstractEngine engine, string fromUserID, string toUserID, string workItemOID, string executiveComment)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.reassignWorkItem(fromUserID, toUserID, workItemOID, executiveComment);

            adp.logout();
        }

        /// <summary>
        /// 工作轉派
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="toUserID">被轉派者代號</param>
        /// <param name="workItemOID">工作項目識別號</param>
        /// <param name="executiveComment">轉派意見</param>
        protected void changeWorkItemOwner(AbstractEngine engine, string fromUserID, string toUserID, string workItemOID, string executiveComment)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.changeWorkItemOwner(fromUserID, toUserID, workItemOID, executiveComment);

            adp.logout();
        }

        /*
        /// <summary>
        /// 轉由他人處理(轉派), 可指定轉派類型
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="fromUserID">轉派者的使用者代號</param>
        /// <param name="toUserID">被轉派者的使用者代號</param>
        /// <param name="workItemOID">目前工作項目識別號</param>
        /// <param name="workAssignmentOID">目前工作指派識別號</param>
        /// <param name="executiveComment">轉派意見</param>
        /// <param name="reassignmentType">流程工作的重新指派類型, 
        /// 0 代表由工作受託者直接轉派給其代理人, 
        /// 1 代表系統目前解析出的工作受託者不在, 透過其設定的流程代理人或預設代理人而轉派給其代理人 , 
        /// 2 代表工作受託者逾時未處理工作, 系統透過其設定的流程代理人或預設代理人而轉派給其代理人 , 
        /// 3 代表由系統管理員(Administrator)直接將工作轉派給新的工作受託者, 此新工作受託者視為原工作受託者之代理人 , 
        /// 4 代表由流程負責人直接將工作轉派給新的工作受託者, 此新工作受託者視為原工作受託者之代理人 , 
        /// 5 代表由原工作受託者直接從改派的受託者或代理人手上取回 , 
        /// 6 代表由工作受託者將工作擁有權移交給其他的工作受託者 , 
        /// 7 代表由系統管理員(Administrator)直接將工作擁有權移交給其他的工作受託者, 此新工作受託者不視為原工作受託者之代理人 , 
        /// 8 代表由流程負責人直接將工作擁有權移交給其他的工作受託者, 此新工作受託者不視為原工作受託者之代理人轉派意見</param>
        protected void reassignWorkItemWithAssignmentType(AbstractEngine engine, string fromUserID, string toUserID, string workItemOID, string workAssignmentOID, string executiveComment, string reassignmentType)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.reassignWorkItemWithAssignmentType(fromUserID, toUserID, workItemOID, workAssignmentOID, executiveComment, reassignmentType);

            adp.logout();
        }
        */
        /// <summary>
        /// 取得指定流程實例序號的可撤簽工作項目識別. 如果不可撤簽, 則回傳空字串
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="userID">撤簽使用者</param>
        /// <param name="processSerialNumber">流程實例序號</param>
        /// <returns></returns>
        protected string fetchRollbackableWorkItemOID(AbstractEngine engine, string userID, string processSerialNumber)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            string rets = (string)adp.fetchRollbackableWorkItemOID(userID, processSerialNumber);

            adp.logout();
            return rets;
        }

        /// <summary>
        /// 撤簽
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="userID">撤簽使用者</param>
        /// <param name="workItemOID">撤簽的工作項目識別</param>
        protected void rollbackActivity(AbstractEngine engine, string userID, string workItemOID)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.rollbackActivity(userID, workItemOID);

            adp.logout();
        }

        /// <summary>
        /// 取回重辦
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="userID">要取回的使用者代號</param>
        /// <param name="workItemOID">工作項目識別</param>
        /// <param name="executiveComment">簽核意見</param>
        protected void retrieveWorkAssignment(AbstractEngine engine, string userID, string workItemOID, string executiveComment)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.retrieveWorkAssignment(userID, workItemOID, executiveComment);

            adp.logout();
        }

        /// <summary>
        /// 發送通知
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="userID">發送使用者代號</param>
        /// <param name="workItemOID">目前工作識別號</param>
        /// <param name="acceptorOID">接收通知使用者識別號陣列</param>
        /// <param name="noticeType">通知類型. 0:流程預設;1:私人轉寄; 2:於流程中追蹤; 3:被代理時通知; 4:流程被撤銷工作被回收</param>
        protected void forwardWorkItem(AbstractEngine engine, string userID, string workItemOID, string[] acceptorOID, string noticeType)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.forwardWorkItem(userID, workItemOID, acceptorOID, noticeType);

            adp.logout();
        }

        /// <summary>
        /// 加簽
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="workItemOID">要加簽目的的活動識別號</param>
        /// <param name="isAfter">true: 加簽在workItemOID後面; false: 加簽在workItemOID前面</param>
        /// <param name="xml">加簽內容xml</param>
        protected void addCustomActivity(AbstractEngine engine, string workItemOID, bool isAfter, string xml, string executiveResult, string executiveComment)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.addCustomActivity(workItemOID, isAfter, xml, executiveResult, executiveComment);

            adp.logout();
        }

        /// <summary>
        /// 根據傳入的流程實例序號與參數代號和參數值，將參數值設定到此流程實例內，如果塞入的是個表單，則參數代號傳入表單代號；參數值傳入表單實例的XML值。
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="pProcessInstanceSerialNo">流程實例序號</param>
        /// <param name="pRelevantDataId">流程參數代號或是表單代號</param>
        /// <param name="pRelevantDataValue">參數值或是表單XML</param>
        protected void assignRelevantDataBySerialNo(AbstractEngine engine, String pProcessInstanceSerialNo, String pRelevantDataId, String pRelevantDataValue)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.assignRelevantDataBySerialNo(pProcessInstanceSerialNo, pRelevantDataId, pRelevantDataValue);

            adp.logout();
        }

        /// <summary>
        /// 執行代理轉派動作
        /// </summary>
        private void reassignmentSubstitute(com.dsc.kernal.factory.AbstractEngine engine)
        {
            //檢查是否為被代理之流程
            if (isSubstituteSign)
            {
                //進行轉派動作
                SysParam sp = new SysParam(engine);
                string flowType = sp.getParam("FlowAdapter");
                string con1 = sp.getParam("NaNaWebService");
                string con2 = sp.getParam("DotJWebService");
                string account = sp.getParam("FlowAccount");
                string password = sp.getParam("FlowPassword");

                FlowFactory ff = new FlowFactory();
                AbstractFlowAdapter adp = ff.getAdapter(flowType);
                adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
                adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

                string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
                fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

                adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, (bool)Session["DebugPage"]);


                //Mantis0020030 
                string getOrgPerformer = "";
                getOrgPerformer += "Select Users.id from WorkAssignment ";
                getOrgPerformer += "join Users on assigneeOID =Users.OID ";
                getOrgPerformer += "where WorkAssignment.OID='" + com.dsc.kernal.utility.Utility.filter((string)getSession("workAssignmentOID")) + "' ";

                Object objResult = engine.executeScalar(getOrgPerformer);
                if(objResult !=null)
                {
                    acceptWorkItem(engine, (string)objResult, (string)getSession("WorkItemOID"));                
                }               
                adp.managementReassignWorkItem((string)Session["UserGUID"], (string)getSession("WorkItemOID"), "系統自動轉派至代理人");                             
                adp.logout();
            }
        }
        protected void increateViewTimesOfWorkAssignmentThreadProcess() 
        {
            string connectString = (string)Session["connectString"];
            string engineType = (string)Session["engineType"];
            IOFactory factory = new IOFactory();
            AbstractEngine engine = null;
            try
            {
                engine=factory.getEngine(engineType,connectString);
                increaseViewTimesOfWorkAssignment(engine, (string)Session["UserID"], (string)getSession("WorkItemOID"));
                engine.close();
            }
            catch(Exception ue)
            {
                if (engine != null) 
                {
                    try
                    {
                        engine.close();
                    }
                    catch { };
                }
                writeLog(ue);
            }            
        }
        /// <summary>
        /// 指定的workItemOID讀取次數增加1
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="userID">發送使用者代號</param>
        /// <param name="workItemOID">目前工作識別號</param>
        protected void increaseViewTimesOfWorkAssignment(AbstractEngine engine, string userID, string workItemOID)
        {
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, debugPage);

            adp.increaseViewTimesOfWorkAssignment(userID, workItemOID);

            adp.logout();
        }
        private void acceptWorkItem(AbstractEngine engine, string pUserID, string pWorkItemOID)
        {
            SysParam sp = new SysParam(engine);
            string flowType = sp.getParam("FlowAdapter");
            string con1 = sp.getParam("NaNaWebService");
            string con2 = sp.getParam("DotJWebService");
            string account = sp.getParam("FlowAccount");
            string password = sp.getParam("FlowPassword");

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = Server.MapPath("~/LogFolder/" + fname + "_flowdata.log");

            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, (bool)Session["DebugPage"]);

            adp.acceptWorkItem(pUserID, pWorkItemOID);

            adp.logout();
        }

        /// <summary>
        /// 將資料物件的GUID改掉, 同時也遞迴方式改掉單身的FK欄位
        /// </summary>
        /// <param name="obj">要處理的資料物件</param>
        protected void modifyDraftGUID(DataObject obj)
        {
            string oldGUID = obj.getData("GUID");
            string newGUID = IDProcessor.getID("");

            obj.setData("GUID", newGUID);

            //20090702 Modify Eric : Load Draft Error
            if (obj.child != null && obj.child.Count != 0)
            {
                IDictionaryEnumerator ie = obj.child.GetEnumerator();
                while (ie.MoveNext())
                {
                    DataObjectSet dos = (DataObjectSet)ie.Value;
                    for (int i = 0; i < dos.getDataObjectCount(); i++)
                    {
                        DataObject ch = dos.getDataObject(i);
                        for (int j = 0; j < ch.dataField.Length; j++)
                        {
                            if (ch.getData(ch.dataField[j]).Equals(oldGUID))
                            {
                                ch.setData(ch.dataField[j], newGUID);
                            }
                        }

                        modifyDraftGUID(ch);
                    }
                }
            }           
        }

        /// <summary>
        /// 由Session取得GP各參數
        /// </summary>
        /// <param name="param">參數名稱</param>
        /// <returns>參數值</returns>
        protected string getGPParam(string param)
        {
            return (String)Session[param];
        }
        /// <summary>
        /// 流程相關訊息變數
        /// </summary>
        private void messageInit()
        {
            ProcessNewSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError28", "已成功送出流程, 請等待審核");

            NewSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError29", "新增成功");

            ProcessModifySuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError28", "已成功送出流程, 請等待審核");

            ModifySuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError30", "修改成功");

            SignSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError31", "送出簽核成功");

            DataProcessSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError32", "資料處理成功");

            DeleteSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError33", "刪除成功");

            ProcessDeleteSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError28", "已成功送出流程, 請等待審核");

            DraftSaveSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError34", "草稿儲存成功");

            DraftReadSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError35", "草稿讀取成功");

            WithDrawSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError36", "撤銷流程成功");

            RejectSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError37", "退回重辦成功");

            RedirectSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError38", "轉派成功");

            ReGetSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError39", "取回成功");

            RollbackSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError40", "撤簽成功");

            ForwardSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError41", "發送通知成功");

            AddSignSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError42", "加簽成功");

            DispatchFlowSuccessMsg = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError43", "發起參考流程成功");

            GPErrorMessage = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "QueryError", "簽核失敗，請確認流程是否已被他人更新");
        }
        #endregion

        #region 繼承類別可呼叫方法
        /// <summary>
        /// 畫面元件事件中呼叫此方法可以關閉PanelWindow且Refresh父視窗DataList元件
        /// </summary>
        protected void closeRefresh()
        {
            executeScript("closeRefreshSilence();");
        }
        /// <summary>
        /// 靜默關閉畫面，無提示訊息
        /// </summary>
        protected void closeSilence()
        {
            executeScript("closeSilence();");
        }
        /// <summary>
        /// 自動帶下一張簽核表單
        /// </summary>
        protected void closeRefreshClick()
        {
            executeScript("closeRefreshClickSilence();");
        }
        /// <summary>
        /// 更新DataList
        /// </summary>
        protected void refreshDataList()
        {
            executeScript("refreshClickSilence();");
        }
        /// <summary>
        /// 取得目前頁面處理的單頭物件是否為新增狀態
        /// </summary>
        /// <returns>true:新增狀態; false:顯示狀態(可修改或刪除)</returns>
        protected bool isNew()
        {
            string tempStatus = (string)getSession("UIStatus");
            if ((tempStatus.Equals(InitNew)) || (tempStatus.Equals(ProcessNew)) || (tempStatus.Equals(GeneralNew)))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 將輸入字串為null的調整成為零長度字串
        /// </summary>
        /// <param name="ori">輸入字串</param>
        /// <returns>調整後字串</returns>
        protected string fixNull(string ori)
        {
            if (ori == null)
            {
                return "";
            }
            else
            {
                return ori;
            }
        }

        /// <summary>
        /// 將NULL或者零長度字串調整成為&nbsp;
        /// </summary>
        /// <param name="ori">原始字串</param>
        /// <returns>調整後字串</returns>
        protected string fixNbsp(string ori)
        {
            ori = fixNull(ori);
            if (ori.Equals(""))
            {
                return "&nbsp;";
            }
            else
            {
                return ori;
            }
        }

        /// <summary>
        /// 判定欄位是否須進行檢查. 此方法用在checkFieldData中
        /// </summary>
        /// <param name="fieldID">畫面欄位名稱</param>
        /// <returns>true: 必須檢查; false: 不需檢查</returns>
        protected bool isNecessary(Control field)
        {
            Hashtable hs = (Hashtable)getSession("FormAudit");
            object d = hs[field.ClientID];
            if (d == null)
            {
                return false;
            }
            else
            {
                string dd = (string)d;
                if (dd.Equals("Y"))
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        /// <summary>
        /// 要顯示的錯誤訊息
        /// </summary>
        /// <param name="errorMessage">錯誤訊息內容</param>
        protected void pushErrorMessage(string errorMessage)
        {
            errMsg.Add(errorMessage);
        }

        #endregion

        #region 繼承類別必須設定變數
        /// <summary>
        /// 設定是否使用註記Log. 若設定為true, 則會根據日期在/LogFolder下建立檔案
        /// </summary>
        public bool debugPage = false;

        /// <summary>
        /// 作業畫面代號(對應稽核模組的程式代號)
        /// </summary>
        public string ProcessPageID = "";

        /// <summary>
        /// 處理Agent的ClassString
        /// </summary>
        public string AgentSchema = "";

        /// <summary>
        /// 應用程式代號(稽核模組使用)
        /// </summary>
        public string ApplicationID = "";

        /// <summary>
        /// 模組代號(稽核模組使用)
        /// </summary>
        public string ModuleID = "";

        /// <summary>
        /// 預設系統錯誤層級
        /// </summary>
        public int errorLevel = 5;

        /// <summary>
        /// 新增資料發起的成功訊息
        /// </summary>
        //public string ProcessNewSuccessMsg = "已成功送出流程, 請等待審核";
        public string ProcessNewSuccessMsg = "";

        /// <summary>
        /// 一般新增後的成功訊息
        /// </summary>
        //public string NewSuccessMsg = "新增成功";
        public string NewSuccessMsg = "";

        /// <summary>
        /// 修改資料發起流程的成功訊息
        /// </summary>
        //public string ProcessModifySuccessMsg="已成功送出流程, 請等待審核";
        public string ProcessModifySuccessMsg = "";

        /// <summary>
        /// 一般資料修改後的成功訊息
        /// </summary>
        //public string ModifySuccessMsg="修改成功";
        public string ModifySuccessMsg = "";

        /// <summary>
        /// 按下簽核鈕後的成功訊息
        /// </summary>
        //public string SignSuccessMsg = "送出簽核成功";
        public string SignSuccessMsg = "";

        /// <summary>
        /// 資料儲存成功後的預設顯示訊息
        /// </summary>
        //public string DataProcessSuccessMsg = "資料處理成功";
        public string DataProcessSuccessMsg = "";

        /// <summary>
        /// 一般刪除訊息
        /// </summary>
        //public string DeleteSuccessMsg="刪除成功";
        public string DeleteSuccessMsg = "";

        /// <summary>
        /// 流程刪除訊息
        /// </summary>
        //public string ProcessDeleteSuccessMsg="已成功送出流程, 請等待審核";
        public string ProcessDeleteSuccessMsg = "";

        /// <summary>
        /// 草稿儲存成功訊息
        /// </summary>
        //public string DraftSaveSuccessMsg = "草稿儲存成功";
        public string DraftSaveSuccessMsg = "";

        /// <summary>
        /// 草稿讀取成功訊息
        /// </summary>
        //public string DraftReadSuccessMsg = "草稿讀取成功";
        public string DraftReadSuccessMsg = "";

        /// <summary>
        /// 撤銷流程成功訊息
        /// </summary>
        //public string WithDrawSuccessMsg = "撤銷流程成功";
        public string WithDrawSuccessMsg = "";

        /// <summary>
        /// 退回重辦成功訊息
        /// </summary>
        //public string RejectSuccessMsg = "退回重辦成功";
        public string RejectSuccessMsg = "";

        /// <summary>
        /// 轉派成功訊息
        /// </summary>
        //public string RedirectSuccessMsg = "轉派成功";
        public string RedirectSuccessMsg = "";

        /// <summary>
        /// 取回成功訊息
        /// </summary>
        //public string ReGetSuccessMsg = "取回成功";
        public string ReGetSuccessMsg = "";

        /// <summary>
        /// 撤簽成功訊息
        /// </summary>
        //public string RollbackSuccessMsg = "撤簽成功";
        public string RollbackSuccessMsg = "";

        /// <summary>
        /// 發送通知(轉寄)成功訊息
        /// </summary>
        //public string ForwardSuccessMsg = "發送通知成功";
        public string ForwardSuccessMsg = "";

        /// <summary>
        /// 加簽成功訊息
        /// </summary>
        //public string AddSignSuccessMsg = "加簽成功";
        public string AddSignSuccessMsg = "";

        /// <summary>
        /// 發起參考流程成功訊息
        /// </summary>
        //public string DispatchFlowSuccessMsg = "發起參考流程成功";
        public string DispatchFlowSuccessMsg = "";

        /// <summary>
        /// GP統一錯誤訊息
        /// </summary>
        //public string GPErrorMessage = "簽核失敗，請確認流程是否已被他人更新";
        public string GPErrorMessage = "";

        #endregion

        #region 繼承類別必須實作方法
        /// <summary>
        /// 初始化變數
        /// </summary>
        protected virtual void init()
        {
        }

        /// <summary>
        /// 初始化畫面顯示
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">目前畫面所處理的資料物件</param>
        protected virtual void initUI(AbstractEngine engine, DataObject objects)
        {
        }

        /// <summary>
        /// 將資料由資料物件顯示到畫面
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">欲顯示的資料物件</param>
        protected virtual void showData(AbstractEngine engine, DataObject objects)
        {
        }

        /// <summary>
        /// 原稿/通知/轉寄資料夾表單作轉寄後的事件
        /// </summary>
        /// <param name="engine">資料庫連線字串</param>
        /// <param name="dr">該筆資料的SMWYAAA</param>
        /// <param name="acceptorOID">被轉寄人員OID</param>
        protected virtual void customAfterForward(AbstractEngine engine, DataRow dr, string[] acceptorOID)
        {
        }

        /// <summary>
        /// 將畫面資料儲存到資料物件
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">欲儲存的資料物件</param>
        protected virtual void saveData(AbstractEngine engine, DataObject objects)
        {
        }

        /// <summary>
        /// 檢查畫面資料合法. 若有錯誤, 可呼叫pushErrorMessage加入錯誤訊息
        /// 若回傳true, 則程序繼續進行, false則中斷程序並且rollback.
        /// 但是若檢查中有呼叫pushErrorMessage, 則不論回傳是否為true, 都會繼續程序, 但會顯示訊息
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">目前畫面資料物件</param>
        /// <returns></returns>
        protected virtual bool checkFieldData(AbstractEngine engine, DataObject objects)
        {
            return true;
        }

        /// <summary>
        /// 客製化單號
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <returns>單號</returns>
        protected virtual string getCustomizeSheetNo(AbstractEngine engine)
        {
            return "";
        }

        /// <summary>
        /// 設定自動編號所需要的參數. 若此自動編號不需要參數, 可直接回傳null或是Empty Hashtable或是不覆寫此方法
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="autoCodeID">自動編號代碼(SMVIAAA002)</param>
        /// <returns>Hashtable, key:參數名稱; value:參數值</returns>
        protected virtual Hashtable getSheetNoParam(AbstractEngine engine, string autoCodeID)
        {
            return null;
        }

        /// <summary>
        /// 設定發起流程相關資訊. 必須覆寫此方法, 將表單相關資訊寫入SubmitInfo物件
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">目前資料物件</param>
        /// <param name="si">SubmitInfo物件</param>
        /// <returns>填寫好的SubmitInfo物件</returns>
        protected virtual com.dsc.flow.data.SubmitInfo getSubmitInfo(AbstractEngine engine, DataObject objects, SubmitInfo si)
        {
            return null;
        }

        /// <summary>
        /// 表單初始化時設定發起流程相關資訊. 必須覆寫此方法, 將表單相關資訊寫入SubmitInfo物件
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">目前資料物件</param>
        /// <param name="si">SubmitInfo物件</param>
        /// <returns>填寫好的SubmitInfo物件</returns>
        protected virtual com.dsc.flow.data.SubmitInfo initSubmitInfo(AbstractEngine engine, DataObject objects, SubmitInfo si)
        {
            return null;
        }

        /// <summary>
        /// 設定單頭資料物件的識別欄位. 若不覆寫, 預設為GUID
        /// </summary>
        /// <returns>欄位名稱</returns>
        protected virtual string getObjectGUIDField()
        {
            return "GUID";
        }

        /// <summary>
        /// 處理原稿資料夾自定變數程序
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="objects">資料物件</param>
        /// <param name="hs">包含各變數名稱為Key值的Hashtable. 需要將Value填入</param>
        protected virtual void getOriginalFormVariables(AbstractEngine engine, DataObject objects, Hashtable hs)
        {
        }

        /// <summary>
        /// 設定草稿主旨. 此方法若無實做, 回傳空字串. 系統預設會使用主旨格式替換, 若無設定或是發生錯誤, 才呼叫此方法取得草稿主旨
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前處理的資料物件</param>
        /// <returns>草稿主旨</returns>
        protected virtual string getDraftSubject(AbstractEngine engine, DataObject currentObject)
        {
            return "";
        }

        /// <summary>
        /// 草稿讀取後，會將草稿的資料物件GUID遞迴更換為新的GUID；以避免GUID重複問題。可在此方法拿到更新GUID前的資料物件
        /// </summary>
        /// <param name="engine"></param>
        /// <param name="currentObject"></param>
        protected virtual void beforeModifiedDraftDataObjectGUID(AbstractEngine engine, DataObject currentObject)
        { 
        
        }

        /// <summary>
        /// 草稿讀取後設定. 通常在此方法中將有時效性以及識別欄位等內容替換, 以免覆蓋原本資料
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前畫面資料物件(已由草稿內容取代)</param>
        protected virtual void afterReadDraft(AbstractEngine engine, DataObject currentObject)
        {

        }

        /// <summary>
        /// 設定流程參數, 並且指定預先送出的參數代號. 若參數代號為空字串或null, 
        /// 表示此流程參數不使用參數. 若此方法無實做, 參數代號固定為空字串
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="param">須設定參數的Hashtable. KEY為參數代號, Value需由此方法填入</param>
        /// <param name="currentObject">目前資料物件</param>
        /// <returns>預先送出的參數代號</returns>
        protected virtual string setFlowVariables(AbstractEngine engine, Hashtable param, DataObject currentObject)
        {
            return "";
        }

        /// <summary>
        /// 設定表單參數XML. 若回傳空字串(預設未Override), 則發起流程時不送表單參數
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前資料物件</param>
        /// <returns>送至表單的XML</returns>
        /*
        protected virtual string setFormVariables(AbstractEngine engine, DataObject currentObject)
        {
            return "";
        }
        */

        /// <summary>
        /// 流程結案後，呼叫執行此方法
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前資料物件</param>
        /// <param name="result">Y:完成;N:終止;W:撤銷</param>
        protected virtual void afterApprove(AbstractEngine engine, DataObject currentObject, string result)
        {
        }

        /// <summary>
        /// 流程徹銷後，呼叫執行此方法
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前作業畫面物件</param>
        protected virtual void afterWithDraw(AbstractEngine engine, DataObject currentObject)
        {
        }

        /// <summary>
        /// 列印憑證模式(傳入CertificateMode=1)時, 複寫此方法決定畫面顯示
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前資料物件</param>
        protected virtual void setPrintCertificateCustomizeDisplay(AbstractEngine engine, DataObject currentObject)
        {
        }

        /// <summary>
        /// 送簽核前呼叫, 可於此方法中修改加簽的Xml
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="addSignXml">要加簽的Xml</param>
        /// <returns>修改後的加簽Xml</returns>
        protected virtual string beforeSign(AbstractEngine engine, bool isAfter, string addSignXml)
        {
            return addSignXml;
        }
        /// <summary>
        /// 發起流程時, 若有設定流程, 此方法可程式化改寫設定流程的Xml
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="setFlowXml">設定流程的Xml</param>
        /// <returns>修改後的Xml</returns>
        protected virtual string beforeSetFlow(AbstractEngine engine, string setFlowXml)
        {
            return setFlowXml;
        }
        /// <summary>
        /// 簽核鈕按下後事件
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前畫面資料物件</param>
        /// <param name="result">簽核案下結果</param>
        protected virtual void afterSign(AbstractEngine engine, DataObject currentObject, string result)
        {
        }

        /// <summary>
        /// 流程送出前呼叫
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前畫面資料物件</param>
        protected virtual void beforeSend(AbstractEngine engine, DataObject currentObject)
        {
        }

        /// <summary>
        /// 流程送出後呼叫
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前畫面資料物件</param>
        protected virtual void afterSend(AbstractEngine engine, DataObject currentObject)
        {
        }

        /// <summary>
        /// 決定是否客製化表單資訊區塊顯示. 預設回傳false
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="guid">資料物件GUID</param>
        /// <param name="flowOID">流程實例序號</param>
        /// <returns>true: 系統停止Render原表單資訊內容; false:系統保持原render方式</returns>
        protected virtual bool customizeFormHead(AbstractEngine engine, string guid, string flowOID)
        {
            return false;
        }

        /// <summary>
        /// 建立表單單頭資訊顯示
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="guid">資料物件GUID</param>
        /// <param name="flowOID">流程實例序號</param>
        /// <returns>單頭資訊</returns>
        protected virtual string getFormHead(AbstractEngine engine, string guid, string flowOID)
        {
            string sss = "select * from SMWYAAA where SMWYAAA019='" + guid + "' and SMWYAAA005='" + flowOID + "'";
            DataSet oss = engine.getDataSet(sss, "TEMP");

            ///因為不一定會有表單單頭資訊, 所以要判斷
            if (oss.Tables[0].Rows.Count > 0)
            {
                //hw = Header Wording
                string hwProcessName = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header8", "流程名稱"));
                string hwSheetNo = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header9", "單號"));
                string hwStartDate = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header10", "填表日期"));
                string hwProcessCondition = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header11", "流程狀態"));
                string hwImportance = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header12", "重要性"));
                string hwUserId = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header13", "使用者代號"));
                string hwUserName = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header14", "使用者姓名"));
                string hwOrgId = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header15", "填表單位代號"));
                string hwOrgName = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header16", "填表單位名稱"));
                string hwApplierId = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header17", "申請人代號"));
                string hwApplierName = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header18", "申請人姓名"));
                string hwApplierOrgId = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header19", "申請單位代號"));
                string hwApplierOrgName = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header20", "申請單位名稱"));
                string hwSubject = Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header21", "主旨"));

                string header = "<table width=100% border=0 cellspacing=0 id='FormHeadTable' cellpadding=2 style=\"border-left-style:solid;border-top-style:solid;border-width:1px\" class=FormHeadBorder>";
                header += "<tr>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>" + hwProcessName + "</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA004"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>" + hwSheetNo + "</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA002"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>" + hwStartDate + "</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA017"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>" + hwProcessCondition + "</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>";
                if (oss.Tables[0].Rows[0]["SMWYAAA020"].ToString().Equals("I"))
                {
                    //header += "進行中";
                    header += Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header1", "進行中"));
                }
                else if (oss.Tables[0].Rows[0]["SMWYAAA020"].ToString().Equals("Y"))
                {
                    //header += "已結案";
                    header += Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header2", "已結案"));
                }
                else if (oss.Tables[0].Rows[0]["SMWYAAA020"].ToString().Equals("N"))
                {
                    //header += "已終止";
                    header += Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header3", "已終止"));
                }
                else
                {
                    //header += "已撤銷";
                    header += Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header4", "已撤銷"));
                }
                header += "</td>";
                header += "</tr>";
                header += "<tr>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>" + hwImportance + "</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>";
                if (oss.Tables[0].Rows[0]["SMWYAAA007"].ToString().Equals("0"))
                {
                    //header += "低";
                    header += Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header5", "低"));
                }
                else if (oss.Tables[0].Rows[0]["SMWYAAA007"].ToString().Equals("1"))
                {
                    //header += "中";
                    header += Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header6", "中"));
                }
                else
                {
                    //header += "高";
                    header += Page.Server.HtmlEncode(com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "header7", "高"));
                }
                header += "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>" + hwSubject + "</td><td colspan=5 style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA006"].ToString() + "</td>";
                header += "</tr>";                                                                                                                                                                  
                                                                                                                                                                                                                 
                header += "<tr>";                                                                                                                                                                   
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwUserId+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA008"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwUserName+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA009"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwOrgId+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA010"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwOrgName+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA011"].ToString() + "</td>";
                header += "</tr>";                                                                                                                                                                  
                                                                                                                                                                                                                 
                header += "<tr>";                                                                                                                                                                   
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwApplierId+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA012"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwApplierName+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA013"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwApplierOrgId+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA014"].ToString() + "</td>";
                header += "<td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadHead>"+hwApplierOrgName+"</td><td valign=top style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=FormHeadDetail>" + oss.Tables[0].Rows[0]["SMWYAAA015"].ToString() + "</td>";
                header += "</tr>";

                header += "</table>";

                return header;
            }
            else
            {
                return "";
            }
        }

        /// <summary>
        /// 決定是否客製化簽核資訊區塊顯示. 預設回傳false
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="guid">資料物件GUID</param>
        /// <param name="flowOID">流程實例序號</param>
        /// <param name="opinionSetting">DataRow, 其中SMWDAAA300開始為各項設定</param>
        /// <returns>true: 系統停止Render原表單資訊內容; false:系統保持原render方式</returns>
        protected virtual bool customizeSignOpinion(System.Web.HttpServerUtility server, bool mDebugPage, AbstractEngine engine, string processSerialNumber, string opinionType, DataRow opinionSetting)
        {
            return false;
        }

        /// <summary>
        /// 可複寫此方法改變頁面各項參數儲存值
        /// </summary>
        protected virtual void changeParameter()
        {
        }

        /// <summary>
        /// 取得簽核意見列表
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="processSerialNumber">流程實例序號</param>
        /// <param name="opinionType">0:顯示所有流程;1:僅顯示已簽核流程</param>
        /// <param name="opinionSetting">DataRow, 其中SMWDAAA300開始為各項設定</param>
        /// <returns>意見列表</returns>
        protected virtual string getSignOpinion(System.Web.HttpServerUtility server, bool mDebugPage, AbstractEngine engine, string processSerialNumber, string opinionType, DataRow opinionSetting)
        {
            //*********************************************************************
            //註冊切換轉派意見的Script
            //*********************************************************************
            StringBuilder sstr = new StringBuilder();
            sstr.Append ("<script language=javascript>");
            sstr.Append( "function toogleOpinionDetail(workitempanel,event){");
            sstr.Append( "   imgobj=(event.srcElement || event.target);;");
            sstr.Append( "   workitemobj=eval('document.all.'+workitempanel);");
            sstr.Append( "   workitemobj=eval(\"document.getElementById(\\'\" + workitempanel + \"')\");");
                   
            sstr.Append( "   if(workitemobj.style.display=='none'){");
            sstr.Append( "       workitemobj.style.display='';");
            sstr.Append( "       imgobj.src='" + Page.ResolveClientUrl("~/DSCWebControlRunTime/DSCWebControlImages/o.gif") + "';");
            sstr.Append( "   }else{");
            sstr.Append( "       workitemobj.style.display='none';");
            sstr.Append( "       imgobj.src='" + Page.ResolveClientUrl("~/DSCWebControlRunTime/DSCWebControlImages/c.gif") + "';");
            sstr.Append( "   }");
            sstr.Append( "}");
            sstr.Append( "</script>");

            ClientScriptManager cm = Page.ClientScript;
            Type ctype = Page.GetType();
            cm.RegisterStartupScript(ctype, "SignOpinionScript", sstr.ToString());

            //************************************************************************
            //第一步: 透過fetchFullProcInstanceWithSerialNoXML方法取得此流程的XML資訊
            //************************************************************************
            SysParam sp = new SysParam(engine);
            string flowType = getGPParam("FlowAdapter");
            string con1 = getGPParam("NaNaWebService");
            string con2 = getGPParam("DotJWebService");
            string account = getGPParam("FlowAccount");
            string password = getGPParam("FlowPassword");

            //國昌20100614:加入舊資料轉檔工具轉置的XML
            string opinionXML = "";
            bool isFromGP=false;

            FlowFactory ff = new FlowFactory();
            AbstractFlowAdapter adp = ff.getAdapter(flowType);
            adp.retryTimes = int.Parse(Session["FlowProcessCount"].ToString());
            adp.retryWaitingTime = int.Parse(Session["FlowProcessWaiting"].ToString());

            string fname = DateTimeUtility.getSystemTime2(null).Substring(0, 13).Replace("/", "").Replace(" ", "_");
            fname = server.MapPath("~/LogFolder/" + fname + "_flowdata.log");
            adp.init(con1, con2, account, password, "", "127.0.0.1", "127.0.0.1:8080", "EF2KWeb", fname, mDebugPage);

            try
            {
                //checkPoint("getSignOpinion Inside Start", modeFormLoad);
                opinionXML = adp.fetchFullProcInstanceWithSerialNoXML(processSerialNumber);
                
                //checkPoint("getSignOpinion Inside Done", modeFormLoad);
                isFromGP = true;
            }
            catch (Exception ue)
            {
                writeLog(ue);
                isFromGP = false;
            }

            adp.logout();

            //isFromGP = false;

            if (!isFromGP)
            {
                //由轉檔工具產生
                string YA003 = (string)getSession("PDID");
                string YA005 = processSerialNumber;

                //國昌20100614:加入舊資料轉檔工具轉置的XML(以下兩行測試用）
                //YA003 = "H3006";
                //YA005 = "0000000449";

                string sql = "select XML from SIGNRECORD inner join SMWYAAA on FORMID=SMWYAAA003 and SHEETNO=SMWYAAA002 where FORMID='" + YA003 + "' and SMWYAAA005 = '" + YA005 + "'";
                DataSet ds = engine.getDataSet(sql, "TEMP");

                if (ds.Tables[0].Rows.Count == 0) 
                {
                    throw new Exception("EF SIGNRECORD Data Error");
                }
                opinionXML = ds.Tables[0].Rows[0][0].ToString();

                //writeLog(new Exception(opinionXML));
            }

            //國昌20100715:將opinionXML儲存到Session中
            setSession("OpinionXML", opinionXML);

            //************************************************************************
            //第二步: 將XML轉換成為PerformDetail物件陣列(包含ReassignWorkItem陣列)
            //************************************************************************
            ArrayList performDetailArray = new ArrayList();
            ArrayList temp2 = new ArrayList();

            XMLProcessor xp = new XMLProcessor(opinionXML, 1);

            //以下測試用噓刪除
            if (xp.selectSingleNode("com.dsc.nana.services.webservice.ProcessInfo/state") == null)
            {
                writeLog(new Exception("NLLLLLL"));
            }
            string abortComment = "";
            bool isAbort = false;
            if (xp.selectSingleNode("com.dsc.nana.services.webservice.ProcessInfo/state").InnerText.Equals("closed.aborted"))
            {
                isAbort = true;
            }

            if (xp.selectSingleNode("com.dsc.nana.services.webservice.ProcessInfo/abortComment") != null)
            {
                abortComment = xp.selectSingleNodeText("com.dsc.nana.services.webservice.ProcessInfo/abortComment");
            }

            //處理ActInstanceInfo
            XmlNodeList xnl = xp.selectAllNodes("com.dsc.nana.services.webservice.ProcessInfo/actInstanceInfos/com.dsc.nana.services.webservice.ActInstanceInfo");
            foreach (XmlNode actInfo in xnl)
            {
                //確認要不要處理各項關卡設定
                string types = actInfo.SelectSingleNode("performType").InnerText;
                bool isProcess = false;
                if (types.Equals("NORMAL"))
                {
                    if (opinionSetting["SMWDAAA301"].ToString().Equals("Y"))
                    {
                        isProcess = true;
                    }
                }
                else if (types.Equals("NOTICE"))
                {
                    if (opinionSetting["SMWDAAA302"].ToString().Equals("Y"))
                    {
                        isProcess = true;
                    }
                }
                else
                {
                    if (opinionSetting["SMWDAAA303"].ToString().Equals("Y"))
                    {
                        isProcess = true;
                    }
                }
                if (!isProcess)
                {
                    continue;
                }

                //處理performInfo
                XmlNodeList xnl2 = actInfo.SelectNodes("performInfos/com.dsc.nana.services.webservice.PerformInfo");
                foreach (XmlNode performInfo in xnl2)
                {
                    //處理performDetail
                    XmlNodeList xnl3 = performInfo.SelectNodes("performDetails/com.dsc.nana.services.webservice.PerformDetail");
                    foreach (XmlNode performDetail in xnl3)
                    {
                        PerformDetail pd = new PerformDetail();
                        pd.performType = actInfo.SelectSingleNode("performType").InnerText;
                        pd.activityName = actInfo.SelectSingleNode("activityName").InnerText;
                        pd.performerName = performDetail.SelectSingleNode("performerName").InnerText;
                        string rs = "";
                        if (performDetail.SelectSingleNode("comment") != null)
                        {
                            rs = performDetail.SelectSingleNode("comment").InnerText;
                        }
                        if (rs.Equals(""))
                        {
                            pd.executiveResult = "";
                            pd.comment = "";
                        }
                        else
                        {
                            string[] rss = rs.Split(new string[] { "##" }, StringSplitOptions.None);
                            if (rss.Length == 2)
                            {
                                pd.executiveResult = rss[0];
                                pd.comment = rss[1];
                            }
                            else
                            {
                                pd.executiveResult = "";
                                pd.comment = rs;
                            }
                        }
                        if (performDetail.SelectSingleNode("performedTime") != null)
                        {
                            if (!performDetail.SelectSingleNode("performedTime").InnerText.Equals("") && !performDetail.SelectSingleNode("performedTime").InnerText.Equals("NULL"))
                            {
                                pd.performedTime = DateTimeUtility.convertDateTimeToString(DateTime.Parse(performDetail.SelectSingleNode("performedTime").InnerText));
                            }
                            else
                            {
                                pd.performedTime = "";
                            }
                        }
                        else
                        {
                            pd.performedTime = "";
                        }
                        pd.state = performInfo.SelectSingleNode("state").InnerText;
                        pd.notifiedName = performDetail.SelectSingleNode("notifiedName").InnerText;
                        if (!performDetail.SelectSingleNode("createdTime").InnerText.Equals(""))
                        {
                            pd.createdTime = DateTimeUtility.convertDateTimeToString(DateTime.Parse(performDetail.SelectSingleNode("createdTime").InnerText));
                        }
                        else
                        {
                            pd.createdTime = "";
                        }

                        if (pd.createdTime.Equals(""))
                        {
                            pd.processTime = "0";
                        }
                        else
                        {
                            DateTime startdt = DateTime.Parse(pd.createdTime);
                            DateTime enddt;
                            if (pd.performedTime.Equals(""))
                            {
                                enddt = DateTime.Now;
                            }
                            else
                            {
                                enddt = DateTime.Parse(pd.performedTime);
                            }
                            TimeSpan ts = enddt.Subtract(startdt);
                            pd.processTime = Utility.Round(ts.TotalHours, 2).ToString();
                        }

                        //處理reassignment
                        temp2 = new ArrayList();
                        XmlNodeList xnl4 = performDetail.SelectNodes("reassignWorkItemRecords/com.dsc.nana.data__transfer.ReassignmentInfoForListDTO");
                        foreach (XmlNode workItemRecord in xnl4)
                        {
                            //確認處理各項轉派
                            string type2 = workItemRecord.SelectSingleNode("reassignmentType/value").InnerText;
                            bool isProcess2 = false;
                            if (type2.Equals("0"))
                            {
                                if (opinionSetting["SMWDAAA304"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else if (type2.Equals("1"))
                            {
                                if (opinionSetting["SMWDAAA305"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else if (type2.Equals("2"))
                            {
                                if (opinionSetting["SMWDAAA306"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else if (type2.Equals("3"))
                            {
                                if (opinionSetting["SMWDAAA307"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else if (type2.Equals("4"))
                            {
                                if (opinionSetting["SMWDAAA308"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else if (type2.Equals("5"))
                            {
                                if (opinionSetting["SMWDAAA309"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else if (type2.Equals("6"))
                            {
                                if (opinionSetting["SMWDAAA310"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else if (type2.Equals("7"))
                            {
                                if (opinionSetting["SMWDAAA311"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }
                            else
                            {
                                if (opinionSetting["SMWDAAA312"].ToString().Equals("Y"))
                                {
                                    isProcess2 = true;
                                }
                            }

                            if (!isProcess2)
                            {
                                continue;
                            }

                            ReAssignedWorkItem rw = new ReAssignedWorkItem();
                            rw.reassignmentType = workItemRecord.SelectSingleNode("reassignmentType/value").InnerText;
                            rw.reassignFromUserId = workItemRecord.SelectSingleNode("reassignFromUserId").InnerText;
                            rw.reassignFromUserName = workItemRecord.SelectSingleNode("reassignFromUserName").InnerText;
                            rw.reassignToUserId = workItemRecord.SelectSingleNode("reassignToUserId").InnerText;
                            rw.reassignToUserName = workItemRecord.SelectSingleNode("reassignToUserName").InnerText;
                            if (workItemRecord.SelectSingleNode("comment") != null)
                            {
                                rw.comment = workItemRecord.SelectSingleNode("comment").InnerText;
                            }
                            else
                            {
                                rw.comment = "";
                            }
                            //國昌20100614:加入舊資料轉檔工具轉置的XML-因為EF不見得有reassignedTime
                            try
                            {
                                rw.reassignedTime = DateTimeUtility.convertDateTimeToString(DateTime.Parse(workItemRecord.SelectSingleNode("reassignedTime").InnerText));
                            }
                            catch
                            {
                                rw.reassignedTime = "";
                            }
                            temp2.Add(rw);
                        }
                        ReAssignedWorkItem[] ary = new ReAssignedWorkItem[temp2.Count];
                        for (int x = 0; x < temp2.Count; x++)
                        {
                            ary[x] = (ReAssignedWorkItem)temp2[x];
                        }
                        pd.record = ary;

                        performDetailArray.Add(pd);
                    }
                }
            }

            //************************************************************************
            //第三步: 排序(使用插入排序法)
            //************************************************************************
            //排序PerformDetail
            ArrayList newPerformDetailArray = new ArrayList();
            for (int i = 0; i < performDetailArray.Count; i++)
            {
                PerformDetail cur = (PerformDetail)performDetailArray[i];
                if (newPerformDetailArray.Count == 0)
                {
                    newPerformDetailArray.Add(cur);
                }
                else
                {
                    int index = -1;
                    for (int j = 0; j < newPerformDetailArray.Count; j++)
                    {
                        PerformDetail newd = (PerformDetail)newPerformDetailArray[j];
                        DateTime newdt = DateTime.Parse(newd.createdTime);
                        DateTime curdt = DateTime.Parse(cur.createdTime);                   
                        
                        if (opinionSetting["SMWDAAA315"].ToString().Equals("A"))
                        {
                            //昇冪
                            if (newdt.CompareTo(curdt) > 0)
                            {
                                index = j;
                                break;
                            }
                            else if (newdt.Equals(curdt))
                            {
                                if (!isFromGP)//EasyFlow簽核資料須依照關卡與支號排列 ; 而非使用處理時間
                                {                                    
                                    //取關號
                                    int newdKuangNum = int.Parse(newd.activityName.Substring(0, 4));
                                    int curKuangNum = int.Parse(cur.activityName.Substring(0, 4));
                                    //支號
                                    int newdBranchNum = int.Parse(newd.activityName.Substring(newd.activityName.IndexOf("支號") + 3, 4));
                                    int curBranchNum = int.Parse(cur.activityName.Substring(cur.activityName.IndexOf("支號") + 3, 4));                                    
                                    if (curKuangNum < newdKuangNum)
                                    {
                                        if (curBranchNum < newdBranchNum)
                                        {
                                            index = j;
                                            break;
                                        }
                                    }                                    
                                }                                
                                else 
                                {
                                    if (newd.performedTime.Equals(""))
                                    {
                                        newdt = DateTime.MaxValue;
                                    }
                                    else
                                    {
                                        newdt = DateTime.Parse(newd.performedTime);
                                    }
                                    if (cur.performedTime.Equals(""))
                                    {
                                        curdt = DateTime.MaxValue;
                                    }
                                    else
                                    {
                                        curdt = DateTime.Parse(cur.performedTime);
                                    }

                                    if (newdt.CompareTo(curdt) >= 0)
                                    {
                                        index = j;
                                        break;
                                    }                                
                                }                                
                            }
                        }
                        else
                        {
                            //降冪
                            if (newdt.CompareTo(curdt) < 0)
                            {
                                index = j;
                                break;
                            }
                            else if (newdt.Equals(curdt))
                            {
                                if (!isFromGP)//EasyFlow簽核資料須依照關卡與支號排列 ; 而非使用處理時間
                                {
                                    //取關號
                                    int newdKuangNum = int.Parse(newd.activityName.Substring(0, 4));                                    
                                    int curKuangNum = int.Parse(cur.activityName.Substring(0, 4));                                                                        
                                    //支號
                                    int newdBranchNum = int.Parse(newd.activityName.Substring(newd.activityName.IndexOf("支號") + 3, 4));
                                    int curBranchNum = int.Parse(cur.activityName.Substring(cur.activityName.IndexOf("支號") + 3, 4));                                    
                                    if (curKuangNum > newdKuangNum)
                                    {
                                        index = j;
                                        break;                                            
                                    }
                                    else if (curKuangNum == newdKuangNum) {
                                        if (curBranchNum > newdBranchNum)
                                        {
                                            index = j;
                                            break;
                                        }
                                    }                                    
                                }
                                else 
                                {
                                    if (newd.performedTime.Equals(""))
                                    {
                                        newdt = DateTime.MaxValue;
                                    }
                                    else
                                    {
                                        newdt = DateTime.Parse(newd.performedTime);
                                    }
                                    if (cur.performedTime.Equals(""))
                                    {
                                        curdt = DateTime.MaxValue;
                                    }
                                    else
                                    {
                                        curdt = DateTime.Parse(cur.performedTime);
                                    }

                                    if (newdt.CompareTo(curdt) <= 0)
                                    {
                                        index = j;
                                        break;
                                    }
                                }                                
                            }
                        }
                    }
                    if (index == -1)
                    {
                        newPerformDetailArray.Add(cur);
                    }
                    else
                    {
                        newPerformDetailArray.Insert(index, cur);
                    }
                }
            }

                //排序WorkItemRecord
                for (int i = 0; i < newPerformDetailArray.Count; i++)
                {
                    PerformDetail pd = (PerformDetail)newPerformDetailArray[i];
                    if (pd.record.Length > 0)
                    {
                        ArrayList temp = new ArrayList();
                        for (int j = 0; j < pd.record.Length; j++)
                        {
                            ReAssignedWorkItem cur = pd.record[j];
                            if (temp.Count == 0)
                            {
                                temp.Add(cur);
                            }
                            else
                            {
                                int index = -1;
                                for (int x = 0; x < temp.Count; x++)
                                {
                                    ReAssignedWorkItem newd = (ReAssignedWorkItem)temp[x];
                                    DateTime newdt = DateTime.Parse(newd.reassignedTime);
                                    DateTime curdt = DateTime.Parse(cur.reassignedTime);
                                    if (opinionSetting["SMWDAAA316"].ToString().Equals("A"))
                                    {
                                        //昇冪
                                        if (newdt.CompareTo(curdt) >= 0)
                                        {
                                            index = x;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        //降冪
                                        if (newdt.CompareTo(curdt) <= 0)
                                        {
                                            index = x;
                                            break;
                                        }

                                    }
                                }
                                if (index == -1)
                                {
                                    temp.Add(cur);
                                }
                                else
                                {
                                    temp.Insert(index, cur);
                                }
                            }
                        }

                        ReAssignedWorkItem[] ary = new ReAssignedWorkItem[temp.Count];
                        for (int j = 0; j < ary.Length; j++)
                        {
                            ary[j] = (ReAssignedWorkItem)temp[j];
                        }
                        pd.record = ary;
                    }
                }
            
            


            //國昌20100715:將newPerformDetailArray儲存到Session中
            setSession("PerformDetailArray", newPerformDetailArray);

            //************************************************************************
            //第四步: 再將PerformDetail物件陣列轉換成為HTML
            //************************************************************************

            //計算會顯示的欄位數
            int columnCount = 0;
            if (opinionSetting["SMWDAAA321"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA322"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA323"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA324"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA325"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA326"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA327"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA328"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA329"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (opinionSetting["SMWDAAA330"].ToString().Equals("Y"))
            {
                columnCount++;
            }
            if (columnCount < 2)
            {
                columnCount = 1;
            }
            else
            {
                columnCount -= 1;
            }
            StringBuilder sbHtml = new StringBuilder();
            string html = "";

            if (isAbort)
            {
                sbHtml.Append("<table width=100% border=0  cellspacing=0 cellpadding=2 style=\"border-left-style:solid;border-top-style:solid;border-width:1px\" class=OpinionBorder>");
                sbHtml.Append("<tr>");
                sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead width=100px>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString1", "流程撤銷意見") + "</td>");
                sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(abortComment)) + "</td>");
                sbHtml.Append("</tr>");
                sbHtml.Append("</table>");
                sbHtml.Append("<br>");
            }

            sbHtml.Append("<table width=100% border=0  cellspacing=0 cellpadding=2 style=\"border-left-style:solid;border-top-style:solid;border-width:1px\" class=OpinionBorder>");
            sbHtml.Append("<tr>");
            sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>&nbsp;</td>");
            if (opinionSetting["SMWDAAA321"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString2", "類型") + "</td>");
            }
            if (opinionSetting["SMWDAAA322"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString3", "關卡名稱") + "</td>");
            }
            if (opinionSetting["SMWDAAA323"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString4", "處理者") + "</td>");
            }
            if (opinionSetting["SMWDAAA324"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString5", "處理結果") + "</td>");
            }
            if (opinionSetting["SMWDAAA325"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString6", "處理意見") + "</td>");
            }
            if (opinionSetting["SMWDAAA326"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString7", "處理時間") + "</td>");
            }
            if (opinionSetting["SMWDAAA327"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString8", "狀態") + "</td>");
            }
            if (opinionSetting["SMWDAAA328"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString9", "轉寄") + "</td>");
            }
            if (opinionSetting["SMWDAAA329"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString10", "開始時間") + "</td>");
            }
            if (opinionSetting["SMWDAAA330"].ToString().Equals("Y"))
            {
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString11", "處理時數") + "</td>");
            }
             sbHtml.Append("</tr>");

            bool isOpen = false;
            if (opinionSetting["SMWDAAA300"].ToString().Equals("Y"))
            {
                isOpen = true;
            }

            for (int i = 0; i < newPerformDetailArray.Count; i++)
            {
                PerformDetail pd = (PerformDetail)newPerformDetailArray[i];
                 sbHtml.Append("<tr>");

                bool hasChild = false;

                if (pd.record.Length > 0)
                {
                    hasChild = true;
                }

                string toogleStr = "&nbsp;";
                if (hasChild)
                {
                    toogleStr = "<img src='" + Page.ResolveUrl("~/DSCWebControlRunTime/DSCWebControlImages/");
                    if (isOpen)
                    {
                        toogleStr += "o.gif' ";
                    }
                    else
                    {
                        toogleStr += "c.gif' ";
                    }
                    toogleStr += " style=\"cursor:pointer\" onclick='toogleOpinionDetail(\"WORKITEMRECORD_" + i.ToString() + "\",event);'>";

                }
                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail align=center valign=top>" + toogleStr + "</td>");
                if (opinionSetting["SMWDAAA321"].ToString().Equals("Y"))
                {
                    if (pd.performType.Equals("NORMAL"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString12", "一般") + "</td>");
                    }
                    else if (pd.performType.Equals("NOTICE"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString13", "通知") + "</td>");
                    }
                    else
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString14", "執行") + "</td>");
                    }
                }
                if (opinionSetting["SMWDAAA322"].ToString().Equals("Y"))
                {
                    //國昌20100715:流程圖
                    if ((pd.activityName.Length > 11) && (pd.activityName.IndexOf("(") == 11))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.activityName.Substring(0, 11))) + "</td>");
                    }
                    else
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.activityName)) + "</td>");
                    }
                }
                if (opinionSetting["SMWDAAA323"].ToString().Equals("Y"))
                {
                    //國昌20100715:流程圖
                    if (pd.performerName.IndexOf(":") == 4)
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.performerName.Substring(5, pd.performerName.Length - 5))) + "</td>");
                    }
                    else
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.performerName)) + "</td>");
                    }
                }
                if (opinionSetting["SMWDAAA324"].ToString().Equals("Y"))
                {
                     sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.executiveResult)) + "</td>");
                }
                if (opinionSetting["SMWDAAA325"].ToString().Equals("Y"))
                {
                    sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.comment)) + "</td>");
                }
                if (opinionSetting["SMWDAAA326"].ToString().Equals("Y"))
                {
                     sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.performedTime)) + "</td>");
                }
                if (opinionSetting["SMWDAAA327"].ToString().Equals("Y"))
                {
                    //open.not_running.not_started:未開始; open.running:進行中; open.not_running.suspended:已暫停; closed.completed:已完成; closed.aborted:已撤銷; closed.terminated:已中止
                    if (pd.state.Equals("open.not_running.not_started"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString15", "未開始") + "</td>");
                    }
                    else if (pd.state.Equals("open.running"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString16", "進行中") + "</td>");
                    }
                    else if (pd.state.Equals("open.running.not_performed"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString17", "進行中") + "</td>");
                    }
                    else if (pd.state.Equals("open.running.performing"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString18", "進行中") + "</td>");
                    }
                    else if (pd.state.Equals("open.not_running.suspended"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString19", "已暫停") + "</td>");
                    }
                    else if (pd.state.Equals("closed.completed"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString20", "已完成") + "</td>");
                    }
                    else if (pd.state.Equals("closed.aborted"))
                    {
                        sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString21", "已撤銷") + "</td>");
                    }
                    else if (pd.state.Equals("closed.terminated"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString22", "已中止") + "</td>");
                    }
                    else
                    {
                        sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + ShowOtherState(fixNbspS(Page.Server.HtmlEncode(pd.state))) + "</td>");
                    }
                }
                if (opinionSetting["SMWDAAA328"].ToString().Equals("Y"))
                {
                     sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.notifiedName)) + "</td>");
                }
                if (opinionSetting["SMWDAAA329"].ToString().Equals("Y"))
                {
                     sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.createdTime)) + "</td>");
                }
                if (opinionSetting["SMWDAAA330"].ToString().Equals("Y"))
                {
                     sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(Page.Server.HtmlEncode(pd.processTime)) + "</td>");
                }
                 sbHtml.Append("</tr>");

                if (pd.record.Length > 0)
                {
                     sbHtml.Append("<tbody id='WORKITEMRECORD_" + i.ToString() + "' style=\"display:");
                    if (isOpen)
                    {
                         sbHtml.Append("inline\">");                                                                        
                    }
                    else
                    {
                         sbHtml.Append("none\">");
                    }
                     sbHtml.Append("<tr>");
                     sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none;border-right-style:none\" class=OpinionDetail colspan=2>&nbsp;</td>");
                     sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail colspan=" + columnCount.ToString() + ">");


                     sbHtml.Append("<table width=90% border=0  cellspacing=0 cellpadding=2 style=\"border-left-style:solid;border-top-style:solid;border-width:1px\" class=OpinionBorder>");
                     sbHtml.Append("<tr>");

                    if (opinionSetting["SMWDAAA331"].ToString().Equals("Y"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString23", "類型") + "</td>");
                    }
                    if (opinionSetting["SMWDAAA332"].ToString().Equals("Y"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString24", "處理者") + "</td>");
                    }
                    if (opinionSetting["SMWDAAA333"].ToString().Equals("Y"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString25", "受託者") + "</td>");
                    }
                    if (opinionSetting["SMWDAAA334"].ToString().Equals("Y"))
                    {
                        sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString26", "處理意見") + "</td>");
                    }
                    if (opinionSetting["SMWDAAA335"].ToString().Equals("Y"))
                    {
                         sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionHead>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString27", "處理時間") + "</td>");
                    }
                     sbHtml.Append("</tr>");

                    for (int j = 0; j < pd.record.Length; j++)
                    {
                        ReAssignedWorkItem rw = pd.record[j];
                         sbHtml.Append("<tr>");

                        if (opinionSetting["SMWDAAA331"].ToString().Equals("Y"))
                        {
                            /// 轉派類型.
                            /// 0:直接轉派
                            /// 1:系統代理人轉派
                            /// 2:系統逾時轉派
                            /// 3:管理員代理轉派
                            /// 4:負責人代理轉派
                            /// 5:工作取回
                            /// 6:工作轉派
                            /// 7:管理員工作轉派
                            /// 8:負責人工作轉派
                            /// 9:系統永久代理轉派
                            if (rw.reassignmentType.Equals("0"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString28", "直接轉派") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("1"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString29", "系統代理人轉派") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("2"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString30", "系統逾時轉派") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("3"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString31", "管理員代理轉派") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("4"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString32", "負責人代理轉派") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("5"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString33", "工作取回") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("6"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString34", "工作轉派") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("7"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString35", "系統工作轉派") + "</td>");
                            }
                            else if (rw.reassignmentType.Equals("8"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString36", "負責人工作轉派") + "</td>");
                            }
                            //start 2009/04/30 hjlin
                            else if (rw.reassignmentType.Equals("9"))
                            {
                                 sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString37", "系統永久代理轉派") + "</td>");
                            }
                            else
                            {
                                sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>&nbsp;</td>");
                            }
                            //end 2009/04/30 hjlin
                        }
                        if (opinionSetting["SMWDAAA332"].ToString().Equals("Y"))
                        {
                            sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(rw.reassignFromUserId + "_" + rw.reassignFromUserName) + "</td>");
                        }
                        if (opinionSetting["SMWDAAA333"].ToString().Equals("Y"))
                        {
                            sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(rw.reassignToUserId + "_" + rw.reassignToUserName) + "</td>");
                        }
                        if (opinionSetting["SMWDAAA334"].ToString().Equals("Y"))
                        {
                            sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(rw.comment) + "</td>");
                        }
                        if (opinionSetting["SMWDAAA335"].ToString().Equals("Y"))
                        {
                            sbHtml.Append("<td style=\"border-style:solid;border-width:1px;border-top-style:none;border-left-style:none\" class=OpinionDetail>" + fixNbspS(rw.reassignedTime) + "</td>");
                        }
                        sbHtml.Append("</tr>");
                    }

                    sbHtml.Append("</table>");

                    sbHtml.Append("</td>");
                    sbHtml.Append("</tr>");
                    sbHtml.Append("</tbody>");
                }
            }

            sbHtml.Append("</table>");
            sbHtml.Append("</span>");

            return sbHtml.ToString();
        }

        /// <summary>
        /// 顯示其他簽核狀態(整合EasyFlow)
        /// </summary>
        /// <param name="state">state</param>
        /// <returns>簽核狀態說明</returns>
        protected virtual string ShowOtherState(string state)
        {
            string ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString51", "未定義") + "(" + state + ")";
            try
            {
                switch (state)
                {
                    case "1":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString38", "未傳送");
                        break;
                    case "2":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString39", "已傳送");
                        break;
                    case "3":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString40", "已讀取");
                        break;
                    case "4":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString41", "已通知");
                        break;
                    case "5":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString42", "ByPpass");
                        break;
                    case "6":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString43", "已會辦");
                        break;
                    case "7":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString44", "已簽核");
                        break;
                    case "8":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString45", "已撤簽");
                        break;
                    case "9":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString46", "已執行");
                        break;
                    case "10":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString47", "已退件");
                        break;
                    case "11":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString48", "已抽單");
                        break;
                    case "12":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString49", "他人已簽核");
                        break;
                    case "13":
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString50", "他人已簽核");
                        break;
                    default:
                        ret = com.dsc.locale.LocaleString.getKernalLocaleString("BaseWebUI.dll.language.ini", "message", "OpinionString51", "未定義") + "(" + state + ")";
                        break;
                }
            }
            catch
            { }
            return ret;

        }


        /// <summary>
        /// 原稿/通知狀態畫面初始化完成後客製程式碼片段. 開發者可以複寫此方法, 在原稿/通知模式系統會自動將所有欄位ReadOnly後, 可更改此設定. 此複寫方法僅在原稿以及通知模式會呼叫
        /// </summary>
        /// <param name="engine">資料庫連線物件</param>
        /// <param name="currentObject">目前資料物件</param>
        /// <param name="UIStatus">GeneralWebForm.FormReadOnly:原稿; GeneralWebForm.FormNotify: 通知</param>
        protected virtual void afterSetReadOnlyForm(AbstractEngine engine, DataObject currentObject, string UIStatus)
        {
        }

        #endregion

        protected string intTryParse(string input) 
        {
            int tmp;
            if (int.TryParse(input, out tmp))
            {
                return input;
            }
            else
            {
                return "";
            }                        
        }
        protected string checkLegalOID(string input)
        {
            if (input.Length == 0 || input.Length == 32)
            {
                return input;
            }
            else
            {
                return "";
            }
        }
        //針對表單初始化參數 ;某些參數不可能含有特定字元; 以此方式來防禦AppScan
        protected string antiFormXSS(string parameter) 
        {
            if (parameter.Contains("%") || parameter.IndexOf("alert") > -1)
            {
                return "";
            }
            else
            {
                return parameter;
            }
        }
    }
}
